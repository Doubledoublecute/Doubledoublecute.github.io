{"title":"Java基础","uid":"3316961ecf1671c6065b043220187c47","slug":"后端/Java/Java基础","date":"2022-10-26T08:32:00.000Z","updated":"2023-08-17T06:28:02.259Z","comments":true,"path":"api/articles/后端/Java/Java基础.json","keywords":null,"cover":"/images/cover/Java基础.png","content":"<h1 id=\"Java基础\"><a href=\"#Java基础\" class=\"headerlink\" title=\"Java基础\"></a>Java基础</h1><ol>\n<li>Java对大小写敏感。</li>\n<li>关键字class对意思是类。Java是面向对象的语言，所有代码必须放在class里面。</li>\n<li>编译后的源文件，得到相应的字节码文件，编译起为每个类生成独立的字节码文件。</li>\n<li>main方法是Java应用程序的入口方法 固定格式: <strong>Public static void (String[] args) { }</strong></li>\n<li>一个源文件可以包含多个类。</li>\n<li>每个语句必须以分号结束，回车不是语句的结束标志。</li>\n</ol>\n<details class=\"custom-details\">\n<summary>Click to see more</summary>\n<p>建议：</p>\n<ol>\n<li>编程是一定要注意缩进规范</li>\n<li>在写括号、引号时，一定要成对敲出来后再往里面写代码</li>\n</ol>\n<p>\t</p>\n\n</details>\n<h2 id=\"创建第一个Java程序\"><a href=\"#创建第一个Java程序\" class=\"headerlink\" title=\"创建第一个Java程序\"></a>创建第一个Java程序</h2><p>​\t在桌面创建一个java文本文件，命名为 <strong>test</strong>（test.java），然后编辑<strong>test.java</strong>文件，写入代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class test &#123;\t&#x2F;&#x2F;class的名字一定要和java文本文件名一致！！！\n    public static void main(String[] args) &#123;\t&#x2F;&#x2F;开头固定搭配！！！\n        System.out.println(&quot;Chan_Honman,你好！&quot;);\n        System.out.println(&quot;this is a test!&quot;);\n        System.out.println(&quot;这是第三行代码&quot;);\n    &#125;\n&#125;\n</code></pre>\n\n<p>​\t写完代码后记得保存（⌘ + s &#x2F; Ctrl + s ），然后打开终端输入命令如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#\t将test.java文件编译成字节码文件 \njavac test.java\n#\t运行程序\njava test</code></pre>\n\n<p>​\t其中 javac 命令的作用是：启动java的编译器程序。对指定扩展名的.java文件进行编译。 生成了jvm可以识别的字节码文件。也就是class文件，也就是java的运行程序。</p>\n<p>​\t而 java 命令的作用是：负责运行的部分.会启动jvm.加载运行时所需的类库,并对class文件进行执行.一个文件要被执行,必须要有一个执行的起始点,这个起始点就是main函数.</p>\n<p>​\t工作原理如下：</p>\n<p><img src=\"/images/Java/Java%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png\" alt=\"java工作原理\"></p>\n<h2 id=\"最常用DOS命令\"><a href=\"#最常用DOS命令\" class=\"headerlink\" title=\"最常用DOS命令\"></a>最常用DOS命令</h2><p>磁盘操作系统（Disk Operating System）是早期个人电脑上的一类操作系统。</p>\n<p>常用命令：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cd</td>\n<td>进入一个目录</td>\n</tr>\n<tr>\n<td>cd ..</td>\n<td>进入父级目录</td>\n</tr>\n<tr>\n<td>dir</td>\n<td>查看本目录下的文件和子目录列表</td>\n</tr>\n<tr>\n<td>cls</td>\n<td>清楚屏幕命令 现在是（clear）</td>\n</tr>\n<tr>\n<td>上下键</td>\n<td>查找之前敲过的命令</td>\n</tr>\n<tr>\n<td>Tab键盘</td>\n<td>自动补全命令</td>\n</tr>\n</tbody></table>\n<h2 id=\"十进制和二进制转换\"><a href=\"#十进制和二进制转换\" class=\"headerlink\" title=\"十进制和二进制转换\"></a>十进制和二进制转换</h2><h3 id=\"1-十进制转二进制\"><a href=\"#1-十进制转二进制\" class=\"headerlink\" title=\"1.十进制转二进制\"></a>1.十进制转二进制</h3><p>​\t十进制整数转换为二进制整数采用 <strong>“除2取余 逆序排序”</strong> 法。</p>\n<p>将十进制的(43)D转换为二进制的步骤如下：</p>\n<ol>\n<li><p>将商43除以2，商21余数为1；</p>\n</li>\n<li><p>将商21除以2，商10余数为1；</p>\n</li>\n<li><p>将商10除以2，商5余数为0；</p>\n</li>\n<li><p>将商5除以2，商2余数为1；</p>\n</li>\n<li><p>将商2除以2，商1余数为0； </p>\n</li>\n<li><p>将商1除以2，商0余数为1； </p>\n</li>\n<li><p>读数，因为最后一位是经过多次除以2才得到的，因此它是最高位，读数字从最后的余数向前读，101011，即(43)D&#x3D;(101011)B。</p>\n</li>\n</ol>\n<h3 id=\"2-二进制转十进制\"><a href=\"#2-二进制转十进制\" class=\"headerlink\" title=\"2.二进制转十进制\"></a>2.二进制转十进制</h3><p>​\t采用 <strong>“权位相加”</strong> 法</p>\n<p>将二进制的(101011)B转换为十进制的步骤如下：</p>\n<ol>\n<li><p>第0位 1 x 2^0 &#x3D; 1；</p>\n</li>\n<li><p>第1位 1 x 2^1 &#x3D; 2；</p>\n</li>\n<li><p>第2位 0 x 2^2 &#x3D; 0；</p>\n</li>\n<li><p>第3位 1 x 2^3 &#x3D; 8；</p>\n</li>\n<li><p>第4位 0 x 2^4 &#x3D; 0；</p>\n</li>\n<li><p>第5位 1 x 2^5 &#x3D; 32；</p>\n</li>\n<li><p>读数，把结果值相加，1+2+0+8+0+32&#x3D;43，即(101011)B&#x3D;(43)D。</p>\n</li>\n</ol>\n<h2 id=\"Java注释\"><a href=\"#Java注释\" class=\"headerlink\" title=\"Java注释\"></a>Java注释</h2><p>​\t注释不会出现在字节码文件中，也就是说编译器是会跳过注释的语句。在Java中注释分为三种。</p>\n<h3 id=\"1-单行注释\"><a href=\"#1-单行注释\" class=\"headerlink\" title=\"1.单行注释\"></a>1.单行注释</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Welcome &#123;\n\n    &#x2F;&#x2F;这是单行注释 main（）方法是程序的入口\n    public static void main(String[] args) &#123;\n        System.out.println(&quot;Chan_Honman,你好！&quot;);\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h3 id=\"2-多行注释\"><a href=\"#2-多行注释\" class=\"headerlink\" title=\"2.多行注释\"></a>2.多行注释</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Welcome &#123;\n\n    &#x2F;*\n        这是多行注释\n        这是多行注释\n        这是多行注释\n    *&#x2F;\n    public static void main(String[] &#x2F;*行内注释： arguments的缩写是args *&#x2F;args) &#123;\n        System.out.println(&quot;Chan_Honman,你好！&quot;);\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h3 id=\"3-文档注释\"><a href=\"#3-文档注释\" class=\"headerlink\" title=\"3.文档注释\"></a>3.文档注释</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n&#x2F;**\n * 这是文档注释 主要用于开发环境 IDEA、Eclipse、VScode\n * @author chan_honman\n * @version 1.0\n*&#x2F;\npublic class Welcome &#123;\n    public static void main(String[] args) &#123;\n        System.out.println(&quot;Chan_Honman,你好！&quot;);\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"标识符和关键字\"><a href=\"#标识符和关键字\" class=\"headerlink\" title=\"标识符和关键字\"></a>标识符和关键字</h2><h3 id=\"1-标识符\"><a href=\"#1-标识符\" class=\"headerlink\" title=\"1.标识符\"></a>1.标识符</h3><p>​\t<strong>标识符</strong>是用来给变量、类、方法和包进行命名的。</p>\n<p>标识符4大规则：</p>\n<ol>\n<li>必须以字母、下划线_ 、美元符号$ 开头。</li>\n<li>其他部分可以是字母、下划线_ 、美元符号$ 和数字任意组合。</li>\n<li>大小写敏感，且长度无限制。</li>\n<li>不可用Java的<strong>关键字</strong>。</li>\n</ol>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>表示类名的标识符：每个单词的首字母大写，如：Boy、GoodBoy</p>\n<p>表示方法和变量的标识符：第一个字母小写，从第二个单词开始首字母大写（<strong>驼峰原则</strong>）如：eat()、eatFood()</p>\n<p>​\tJava不采用ASCII字符集，而是用Unicode字符集。所以这里字母的含义不仅仅是英文，还包括汉字等等。但是<strong>不建议使用汉字来定义标识符</strong>！因为不够高级，不够酷，<strong>不够官方</strong>。</p>\n</p>\n</div>\n<h3 id=\"2-关键字\"><a href=\"#2-关键字\" class=\"headerlink\" title=\"2.关键字\"></a>2.关键字</h3><p>​\t<strong>48个关键字</strong>：abstract、assert、<strong>boolean</strong>、<strong>break</strong>、byte、case、catch、<strong>char</strong>、<strong>class</strong>、continue、default、do、<strong>double</strong>、else、enum、extends、final、finally、<strong>float</strong>、<strong>for</strong>、<strong>if</strong>、implements、<strong>import</strong>、<strong>int</strong>、interface、instanceof、<strong>long</strong>、native、<strong>new</strong>、package、private、protected、<strong>public</strong>、<strong>return</strong>、<strong>short</strong>、<strong>static</strong>、strictfp、super、<strong>switch</strong>、synchronized、<strong>this</strong>、throw、throws、transient、<strong>try</strong>、<strong>void</strong>、volatile、<strong>while</strong>。</p>\n<h2 id=\"变量的分类和作用域\"><a href=\"#变量的分类和作用域\" class=\"headerlink\" title=\"变量的分类和作用域\"></a>变量的分类和作用域</h2><p>变量有三种类型：</p>\n<ol>\n<li>局部变量</li>\n<li>成员变量（实例变量）</li>\n<li>静态变量</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>声明位置</th>\n<th>从属于</th>\n<th>生命周期（作用域）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>局部变量</td>\n<td>方法或语句内部</td>\n<td>方法&#x2F;语句块</td>\n<td>从声明位置开始。知道方法或语句块执行完毕。局部变量消失</td>\n</tr>\n<tr>\n<td>成员变量（实例变量）</td>\n<td>类内部，方法外部</td>\n<td>对象object</td>\n<td>对象创建，成员变量页跟着创建。对象消失，成员变量也跟着消失</td>\n</tr>\n<tr>\n<td>静态变量（类变量）</td>\n<td>类内部，static修饰</td>\n<td>类class</td>\n<td>类被加载，静态变量就有效。类被卸载，静态变量消失</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class test &#123;\n\n    int a &#x3D; 3;  &#x2F;&#x2F;成员变量\n    static int b &#x3D; 4;   &#x2F;&#x2F;静态变量\n\n    public static void main(String[] agrs) &#123;\n        &#x2F;&#x2F;局部变量\n        int age &#x3D; 18;\n        int b;  &#x2F;&#x2F;只是声明了变量b 还没有初始化\n        int x &#x3D; 0, y &#x3D; 0, z &#x3D; 1;\n\n        System.out.println(age);    &#x2F;&#x2F;输出：18\n        b &#x3D; 0;  &#x2F;&#x2F;变量使用之前必须初始化\n        System.out.println(b);  &#x2F;&#x2F;输出：0\n        System.out.println(z);  &#x2F;&#x2F;输出：1\n    &#125;\n&#125;\n</code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><strong>下面代码哪个是正确的？？？</strong></p>\n<p>A代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public void test()&#123;\n        int i;\n        int j &#x3D; i + 5; \n    &#125;</code></pre>\n\n<p>B代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public void test()&#123;\n        int i;\n        i &#x3D; 5;\n        int j &#x3D; i + 5; \n    &#125;</code></pre>\n\n\n\n\n</div>\n<details class=\"custom-details\">\n<summary>Click to see the answer</summary>\n<p><p>答案：B</p>\n<p>因为 A 代码中的错误如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public void test()&#123;\n        int i;\n        int j &#x3D; i + 5;  &#x2F;&#x2F;编译出错 变量 i 没有被初始化\n    &#125;</code></pre>\n\n<p><strong>变量 i 没有被初始化</strong></p>\n</p>\n</details>\n<h2 id=\"常量-和-final\"><a href=\"#常量-和-final\" class=\"headerlink\" title=\"常量 和 final\"></a>常量 和 final</h2><p>​\t在Java中，用关键字 <strong>final</strong> 来定义一个常量。常量<strong>一旦被初始化后就不能再更改</strong>。</p>\n<p>声明格式：<strong>final</strong> type varName &#x3D; value;</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class TestConstant &#123;\n    public static void main(String[] args) &#123;\n        final double pi &#x3D; 3.14;\n        &#x2F;&#x2F;pi &#x3D; 3.1415;    &#x2F;&#x2F;Cannot assign a value to final variable &#39;pi&#39;\n        System.out.println(pi);\n    &#125;\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>一般将1、2、3、’a’、’b’、’c’、true、false、”helloWorld”等称为<strong>字符常量</strong>，而使用final修饰的 pi 等称为<strong>符号常量</strong>。</p></blockquote>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><strong>变量和常量的命名规范</strong></p>\n<ol>\n<li>大写字母和下划线：MAX_VALUE</li>\n<li>类成员变量：首字母小写、驼峰原则</li>\n<li>类名：首字母大写、驼峰原则（ Man、GoodMan ）</li>\n<li>方法名：首字母小写、驼峰原则( play()、playComputer() )</li>\n</ol>\n<p><strong>练习题：圆的半径r为4 π约为3.14 计算该圆的面积area和周长perimeter</strong></p>\n\n</div>\n<details class=\"custom-details\">\n<summary>Click to see the answer</summary>\n<p><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 圆的半径r为4 π约为3.14 计算该圆的面积area和周长perimeter\n *&#x2F;\npublic class TestConstant &#123;\n    public static void main(String[] args) &#123;\n        final double pi &#x3D; 3.14; &#x2F;&#x2F;π\n        int r &#x3D; 4;  &#x2F;&#x2F;半径为4\n        double area &#x3D; pi * r * r;\n        double perimeter &#x3D; 2 * pi * r;\n        System.out.println(&quot;圆的面积：&quot; + area); &#x2F;&#x2F;输出：圆的面积：50.24\n        System.out.println(&quot;圆的周长：&quot; + perimeter);    &#x2F;&#x2F;输出：圆的周长：25.12\n    &#125;\n&#125;\n</code></pre>\n\n\n\n</p>\n</details>\n<h2 id=\"基本数据类型-Primitive-data-type\"><a href=\"#基本数据类型-Primitive-data-type\" class=\"headerlink\" title=\"基本数据类型 Primitive data type\"></a>基本数据类型 Primitive data type</h2><p><img src=\"/images/Java/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png\"></p>\n<h3 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h3><p>一共有<strong>四种类型</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>占用存储空间</th>\n<th>范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>byte</strong></td>\n<td>1字节</td>\n<td>-2^7 —  2^7 - 1</td>\n</tr>\n<tr>\n<td><strong>short</strong></td>\n<td>2字节</td>\n<td>-2^15 —  2^15 - 1</td>\n</tr>\n<tr>\n<td><strong>int</strong></td>\n<td>4字节</td>\n<td>-2^31 —  2^31 - 1</td>\n</tr>\n<tr>\n<td><strong>long</strong></td>\n<td>8字节</td>\n<td>-2^63 —  2^63 - 1</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Java语言整型常量的四种表示形式：</p>\n<ol>\n<li>十进制整数：如：99、-500、0</li>\n<li>八进制整数：要求以 0 开头，如：014</li>\n<li>十六进制整数：要求以 0x 开头 或 0X 开头，如：0x14</li>\n<li>二进制整数：要求 0b 或 0B 开头，如：0b01110011</li>\n</ol></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class TestInt &#123;\n    public static void main(String[] args) &#123;\n\n        int a &#x3D; 100;    &#x2F;&#x2F;十进制\n        int b &#x3D; 022;    &#x2F;&#x2F;八进制\n        int c &#x3D; 0xff;    &#x2F;&#x2F;十六进制\n        int d &#x3D; 0b10;    &#x2F;&#x2F;二进制\n\n        byte e &#x3D; 50;\n        short f &#x3D; 300;\n\n        long salary &#x3D; 3000000000L;  &#x2F;&#x2F;整型常量定义为long类型\n\n        System.out.println(a);  &#x2F;&#x2F;100\n        System.out.println(b);  &#x2F;&#x2F;18    输出自动转为十进制\n        System.out.println(c);  &#x2F;&#x2F;255   输出自动转为十进制\n        System.out.println(d);  &#x2F;&#x2F;2     输出自动转为十进制\n\n        System.out.println(salary); &#x2F;&#x2F;3000000000\n\n        System.out.println(e);  &#x2F;&#x2F;50\n        System.out.println(f);  &#x2F;&#x2F;300\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h3 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h3><p><strong>Floating Point Number</strong></p>\n<p>一共有<strong>两种类型</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>占用空间</th>\n<th>范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>float</strong></td>\n<td>4字节</td>\n<td>-3.403<strong>E</strong>38 — 3.403<strong>E</strong>38</td>\n</tr>\n<tr>\n<td><strong>double</strong></td>\n<td>8字节</td>\n<td>-1.798<strong>E</strong>308 —  1.798<strong>E</strong>308</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li><p>float类型aka单精度类型 尾数可以精确到7位有效数字</p>\n</li>\n<li><p>double类型aka双精度 <strong>绝大部分应程序都采用double类型</strong></p>\n</li>\n<li><p>Java浮点类型常量有两种表达形式： 1.十进制数形式 <strong>3.14 、314.0、 0.314</strong> 2.科学记数法形式 <strong>3.14E0、 3.14E2、 3.14E-1</strong></p>\n</li>\n<li><p>浮点型不精确的 不建议用来作运算比较 若精度要求非常高用于商业计算<strong>可使用BigDecimal进行运算比较</strong></p>\n</li>\n<li><p>浮点型常量默认是double 若改成float可以在后面加个F或f</p>\n</li>\n</ol></blockquote>\n<h3 id=\"字符型\"><a href=\"#字符型\" class=\"headerlink\" title=\"字符型\"></a>字符型</h3><p>​\t<strong>字符型在内存中占2个字节</strong>，在Java中使用单引号来表示字符常量。例如’A’是一个字符，它与”A”是不同的，”A”表示含有<strong>一个字符的字符串</strong>。</p>\n<p>​\t<strong>char类型</strong>用来表示在<strong>Unicode</strong>编码表中的字符。Unicode编码被设计用来处理各种语言的文字，它占2个字节，可允许有65536个字符。</p>\n<table>\n<thead>\n<tr>\n<th>转义符</th>\n<th>含义</th>\n<th>Unicode值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\b</td>\n<td>退格（backspace）</td>\n<td>\\u0008</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n<td>\\u000a</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n<td>\\u000d</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>制表符（tab）</td>\n<td>\\u0009</td>\n</tr>\n<tr>\n<td>\\ “</td>\n<td>双引号</td>\n<td>\\u0022</td>\n</tr>\n<tr>\n<td>\\ ‘</td>\n<td>单引号</td>\n<td>\\u0027</td>\n</tr>\n<tr>\n<td>\\\\</td>\n<td>反斜杠</td>\n<td>\\u005c</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>String类其实是字符序列（char sequence），本质是char字符组成的数组。</strong></p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * char类型的使用\n * @author chan_honman \n * @version 1.0\n *&#x2F;\npublic class TestChar &#123;\n    public static void main(String[] args) &#123;\n        char c1 &#x3D; &#39;a&#39;;  &#x2F;&#x2F;a\n        char c2 &#x3D; &#39;中&#39;;  &#x2F;&#x2F;中\n        char c3 &#x3D; &#39;\\u0061&#39;; &#x2F;&#x2F;a\n\n        System.out.println(c1);\n        System.out.println(c2);\n        System.out.println(c3);\n\n        String str &#x3D; &quot;My name is Chan_Honman!&quot;;\n        System.out.println(str);\n\n        char c5 &#x3D; &#39;\\n&#39;;\n        System.out.println(&quot;a\\nb\\nc\\nd\\ne\\nf\\ng&quot;);  &#x2F;&#x2F;没输出一个字母就换一次行\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h3 id=\"布尔型-boolean\"><a href=\"#布尔型-boolean\" class=\"headerlink\" title=\"布尔型 boolean\"></a>布尔型 boolean</h3><ol>\n<li>boolean类型只有两个常量值 <strong>true</strong> 和 <strong>false</strong>。</li>\n<li><strong>内存中占用一个字节或4个字节</strong> 不可以使用0或非0的整数代替 ture 和 false。（与c语言不同）</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * @author chan_honman \n * @version 1.0\n *&#x2F;\n\npublic class TestBoolean &#123;\n    public static void main(String[] args) &#123;\n        boolean b1 &#x3D; true;\n        boolean b2 &#x3D; false;\n\n        if (b1)&#123;\n            System.out.println(&quot;b1是true！&quot;);\n        &#125;else&#123;\n            System.out.println(&quot;b1是false！&quot;);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"运算符-operator\"><a href=\"#运算符-operator\" class=\"headerlink\" title=\"运算符 operator\"></a>运算符 operator</h2><p>计算机的基本用途就是执行数学运算，Java提供了一套丰富的运算符来操作变量。</p>\n<h3 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h3><ol>\n<li><em><em>＋, －, <em>, &#x2F;, %</em></em> 属于二元运算符。</em>*%<strong>是取模运算符，就是我们常说的</strong>求余数操作。**</li>\n<li>算数运算符中**++<strong>（</strong>自增<strong>），</strong>–<strong>（</strong>自减**）属于一元运算符。</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * @author chan_honman\n * @version 1.0\n *&#x2F;\n\npublic class TestOperator01 &#123;\n    public static void main(String[] args) &#123;\n        int a &#x3D; 3;\n        long b &#x3D; 4;\n        long c &#x3D; a + b;\n\n        double d &#x3D; 3 + 3.14;\n        int d2 &#x3D; 32 &#x2F; 3;    &#x2F;&#x2F;两个整数相除 直接保留结果的整数部分 没有四舍五入\n        System.out.println(d2); &#x2F;&#x2F;输出10\n\n        &#x2F;&#x2F;取余数\n        int e &#x3D; 10 % 3;\n        System.out.println(e);  &#x2F;&#x2F;输出1\n\n        &#x2F;&#x2F;自增 自减\n        int g &#x3D; 30;\n        g++;    &#x2F;&#x2F;相当于 g &#x3D; g + 1\n        g--;    &#x2F;&#x2F;相当于 g &#x3D; g - 1\n\n        g &#x3D; 10;\n        int h &#x3D; g++;    &#x2F;&#x2F;g++先赋值给h 后g自增\n        System.out.println(&quot;这时候的g &#x3D; &quot; + g); &#x2F;&#x2F;输出11\n        g &#x3D; 10;\n        int i &#x3D; ++g;    &#x2F;&#x2F;++g先自增后 赋值给i\n\n        System.out.println(h);  &#x2F;&#x2F;输出10\n        System.out.println(i);  &#x2F;&#x2F;输出11\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h3 id=\"二元运算符的运算规则\"><a href=\"#二元运算符的运算规则\" class=\"headerlink\" title=\"二元运算符的运算规则\"></a>二元运算符的运算规则</h3><p><strong>整数运算</strong>：</p>\n<ol>\n<li>如果两个操作数<strong>有一个为long类型</strong>，则<strong>结果也为long类型。</strong></li>\n<li><strong>没有long类型时</strong>，结果为int类型。<strong>就算操作数全为short、byte类型，结果也是int类型。</strong></li>\n</ol>\n<p><strong>浮点运算</strong>：</p>\n<ol>\n<li>如果两个操作数有<strong>一个为double类型，则结果也是double类型。</strong></li>\n<li><strong>只有两个操作数都是float类型</strong>，则<strong>结果才为float类型。</strong></li>\n</ol>\n<p><strong>取模运算</strong>：</p>\n<p>其余作数可以为浮点数，一般使用整数，结果是”余数“，<strong>”余数“符号和左边操作数相同</strong>，如：7 % 3 &#x3D; 1， -7 % 3 &#x3D; -1， 7 % -1 &#x3D; 1。</p>\n<h3 id=\"赋值及其扩展赋值运算符\"><a href=\"#赋值及其扩展赋值运算符\" class=\"headerlink\" title=\"赋值及其扩展赋值运算符\"></a>赋值及其扩展赋值运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>用法举例</th>\n<th>等效表达式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+&#x3D;</td>\n<td>a +&#x3D; b</td>\n<td>a &#x3D; a + b</td>\n</tr>\n<tr>\n<td>-&#x3D;</td>\n<td>a -&#x3D; b</td>\n<td>a &#x3D; a - b</td>\n</tr>\n<tr>\n<td>*&#x3D;</td>\n<td>a *&#x3D; b</td>\n<td>a &#x3D; a * b</td>\n</tr>\n<tr>\n<td>&#x2F;&#x3D;</td>\n<td>a &#x2F;&#x3D; b</td>\n<td>a &#x3D; a &#x2F; b</td>\n</tr>\n<tr>\n<td>%&#x3D;</td>\n<td>a %&#x3D; b</td>\n<td>a &#x3D; a % b</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * @author chan_honman\n * @version 2.0\n *&#x2F;\n\npublic class TestOperator02 &#123;\n    public static void main(String[] args) &#123;\n        int a &#x3D; 3;\n        int b &#x3D; 4;\n        a +&#x3D; b;     &#x2F;&#x2F;相当于 a &#x3D; a + b\n        System.out.println(a);  &#x2F;&#x2F;输出7\n\n        a &#x3D; 3;\n        a *&#x3D; b + 3;   &#x2F;&#x2F;相当于 a &#x3D; a * (b + 3)\n        System.out.println(a);  &#x2F;&#x2F;输出21\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><p><strong>关系运算符用来进行比较运算。关系运算的结果是布尔值：true 或者 false。</strong></p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x3D;&#x3D;</td>\n<td>等于</td>\n<td>a &#x3D;&#x3D; b</td>\n</tr>\n<tr>\n<td>!&#x3D;</td>\n<td>不等于</td>\n<td>a !&#x3D; b</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td>a &gt; b</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>a &lt; b</td>\n</tr>\n<tr>\n<td>&gt;&#x3D;</td>\n<td>大于或等于</td>\n<td>a &gt;&#x3D; b</td>\n</tr>\n<tr>\n<td>&lt;&#x3D;</td>\n<td>小于或等于</td>\n<td>a &lt;&#x3D; b</td>\n</tr>\n</tbody></table>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><strong>注意事项</strong></p>\n<ol>\n<li><strong>&#x3D; 是赋值运算符 而真正的判断两个操作数是否相等的运算符是 &#x3D;&#x3D;。</strong></li>\n<li><strong>&#x3D;&#x3D; 、 !&#x3D; 、 是所有（基本和引用）数据类型都可以使用。</strong></li>\n<li><strong>（&gt; 、 &gt;&#x3D;、 &lt;、 &lt;&#x3D;）仅针对数值类型（byte short int long float double char）。</strong></li>\n</ol>\n\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * @author chan_honman\n * @version 3.0\n *&#x2F;\n\npublic class TestOperator03 &#123;\n    public static void main(String[] args) &#123;\n        int a &#x3D; 3;\n        int b &#x3D; 4;\n        boolean c &#x3D; a &gt; b;\n        System.out.println(c);  &#x2F;&#x2F;输出false\n\n        char d &#x3D; &#39;h&#39;;\n        &#x2F;&#x2F;char值位于0-65536之间 可以通过（int）强转成数字\n        System.out.println(d);  &#x2F;&#x2F;输出h\n        System.out.println((int) d);    &#x2F;&#x2F;输出104 h对应的十进制数是104\n        boolean e &#x3D; d &gt; 100;\n        System.out.println(e);\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>符号</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>与</td>\n<td>&amp;</td>\n<td>只要有一个为false 则为false</td>\n</tr>\n<tr>\n<td>短路与</td>\n<td><strong>&amp;&amp;</strong></td>\n<td>只要有一个为false 则为false</td>\n</tr>\n<tr>\n<td>或</td>\n<td>|</td>\n<td>只要有一个为true 则为true</td>\n</tr>\n<tr>\n<td>短路或</td>\n<td><strong>||</strong></td>\n<td>只要有一个为true 则为true</td>\n</tr>\n<tr>\n<td>非</td>\n<td>!</td>\n<td>取反</td>\n</tr>\n<tr>\n<td>异或</td>\n<td>^</td>\n<td>相同为false 不同为true</td>\n</tr>\n</tbody></table>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p><strong>短路与和短路或采用短路的方式。从左到右计算，如果通过运算左边的操作数就能够确定逻辑表达式的值，则不会继续计算运算符右边的操作数，提高效率。</strong></p>\n</p>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * @author chan_honman\n * @version 4.0\n *&#x2F;\n\npublic class TestOperator04 &#123;\n    public static void main(String[] args) &#123;\n        boolean b1 &#x3D; true;\n        boolean b2 &#x3D; false;\n        System.out.println(b1 &amp; b2);    &#x2F;&#x2F;与 有一个false 输出false\n        System.out.println(b1 | b2);    &#x2F;&#x2F;或 有一个true 输出true\n        System.out.println(!b2);        &#x2F;&#x2F;取反\n        System.out.println(b1 ^ b2);    &#x2F;&#x2F;异或 相同false 不同所以输出 true\n\n        &#x2F;&#x2F;短路与 短路或\n        &#x2F;&#x2F;int b3 &#x3D; 3&#x2F;0 会报错 不能除以0\n        boolean b3 &#x3D; 1 &gt; 2 &amp;&amp; (4 &lt; 3 &#x2F; 0);  &#x2F;&#x2F;短路只要前面符合要求 后面就不会判断了\n        System.out.println(b3); &#x2F;&#x2F;输出false\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p><strong>位运算指的是进行二进制的运算。</strong></p>\n<table>\n<thead>\n<tr>\n<th>位运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>~</strong></td>\n<td>取反</td>\n</tr>\n<tr>\n<td><strong>&amp;</strong></td>\n<td>按位与</td>\n</tr>\n<tr>\n<td><strong>|</strong></td>\n<td>按位或</td>\n</tr>\n<tr>\n<td><strong>^</strong></td>\n<td>按位异或</td>\n</tr>\n<tr>\n<td><strong>&lt;&lt;</strong></td>\n<td>左移运算符 左移动1位相当于乘2</td>\n</tr>\n<tr>\n<td><strong>&gt;&gt;</strong></td>\n<td>右移运算符 右移动1位相当于除2取商</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * @author chan_honman\n * @version 4.0\n *&#x2F;\n\npublic class TestOperator04 &#123;\n    public static void main(String[] args) &#123;\n        int a &#x3D; 7;  &#x2F;&#x2F;0 1 1 1\n        int b &#x3D; 8;  &#x2F;&#x2F;1 0 0 0\n        System.out.println(a &amp; b);    &#x2F;&#x2F;按位或 0\n        System.out.println(a | b);    &#x2F;&#x2F;按位与 15\n        System.out.println(a ^ b);    &#x2F;&#x2F;按位异或 15\n        System.out.println(~b);       &#x2F;&#x2F;取反  -9\n\n&#x2F;&#x2F;      位移 乘以2 除以2 使用位移操作 最快！！！！\n        int c &#x3D; 5 &lt;&lt; 2;   &#x2F;&#x2F;5*2*2\n        System.out.println(c);\n        int d &#x3D; 40 &gt;&gt; 3;    &#x2F;&#x2F;40&#x2F;8\n\n    &#125;\n&#125;\n</code></pre>\n\n<p><strong>乘除2 使用位移操作 最快！！！！</strong></p>\n<h3 id=\"字符串连接符\"><a href=\"#字符串连接符\" class=\"headerlink\" title=\"字符串连接符\"></a>字符串连接符</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 测试字符串连接符的用法\n *&#x2F;\n\npublic class TestOperator05 &#123;\n\n    public static void main(String[] args) &#123;\n        String a &#x3D; &quot;3&quot;;\n        int b &#x3D; 4;\n        System.out.println(a + b);  &#x2F;&#x2F;34\n\n&#x2F;&#x2F;      条件是String 不是char 若是char 则仍然是加法\n        char c1 &#x3D; &#39;h&#39;;\n        char c2 &#x3D; &#39;i&#39;;\n        System.out.println(c1 + c2);    &#x2F;&#x2F;209\n        System.out.println(&quot;&quot; + c1 + c2);   &#x2F;&#x2F;hi\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h3 id=\"条件运算符\"><a href=\"#条件运算符\" class=\"headerlink\" title=\"条件运算符\"></a>条件运算符</h3><p><img src=\"/images/Java/%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 测试条件（三元）运算符的用法\n *&#x2F;\n\npublic class TestOperator06 &#123;\n\n    public static void main(String[] args) &#123;\n        int score &#x3D; 90;\n        String a &#x3D; score &lt; 60 ? &quot;不及格&quot; : &quot;及格&quot;;\n        System.out.println(a);  &#x2F;&#x2F;及格\n\n        if (score &lt; 60) &#123;\n            a &#x3D; &quot;不及格&quot;;\n        &#125; else &#123;\n            a &#x3D; &quot;及格&quot;;\n        &#125;\n        System.out.println(a);  &#x2F;&#x2F;及格\n\n        int x &#x3D; -100;\n        int flag &#x3D; x &gt; 0 ? 1 : (x &#x3D;&#x3D; 0 ? 0 : 1);    &#x2F;&#x2F;x是否大于0 不是的话执行冒号后的 判断x是否等于0 不是的话 执行冒号后面赋值\n        System.out.println(flag);   &#x2F;&#x2F;1\n\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"运算符优先级问题\"><a href=\"#运算符优先级问题\" class=\"headerlink\" title=\"运算符优先级问题\"></a>运算符优先级问题</h2><ol>\n<li><strong>逻辑与&amp;&amp; &gt; 逻辑或|| &gt; 逻辑非\ta || b &amp;&amp; c 的运行结果是 a || ( b &amp;&amp; c )</strong></li>\n<li><strong>括号运算符 &gt; 算术运算符 &gt; 关系运算符 &gt; 位运算符 &gt; 逻辑运算符</strong></li>\n</ol>\n<h2 id=\"数据类型的转换\"><a href=\"#数据类型的转换\" class=\"headerlink\" title=\"数据类型的转换\"></a>数据类型的转换</h2><p><strong>自动类型转换指的是容量小的数据类型可以自动转为容量大的数据类型 如下图所示：</strong></p>\n<p><img src=\"/images/Java/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BD%AC%E6%8D%A2.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>红色线条表示转换无数据丢失 虚线表示在转换时可能会丢失精度</strong></p></blockquote>\n<h2 id=\"数据强制转换\"><a href=\"#数据强制转换\" class=\"headerlink\" title=\"数据强制转换\"></a>数据强制转换</h2><p><strong>强制转换类型 又称为造型（cast） 用于强制转换数值的类型 可能会损失精度</strong></p>\n<p>语法格式如下：</p>\n<p>（type）var</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 测试类型强制转换\n *&#x2F;\n\npublic class TestTypeCast &#123;\n\n    public static void main(String[] args) &#123;\n        double a &#x3D; 3.94152;\n        int b &#x3D; (int) a;\n        System.out.println(b);  &#x2F;&#x2F;3 浮点数强转为整数 直接丢失小数部分\n\n        int c &#x3D; 97;\n        char d &#x3D; (char) c;\n        System.out.println(c);  &#x2F;&#x2F;97\n\n        &#x2F;&#x2F;强制转换超过了表数范围会丢失精度（完全不同的值）\n        byte e &#x3D; (byte) 300;\n        System.out.println(e);  &#x2F;&#x2F;44\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"基本类型转化时常见错误和问题\"><a href=\"#基本类型转化时常见错误和问题\" class=\"headerlink\" title=\"基本类型转化时常见错误和问题\"></a>基本类型转化时常见错误和问题</h2><ol>\n<li><strong>操作比较大的数时 要留意是否溢出 尤其是整数操作时</strong></li>\n<li><strong>L 和 l 的问题：（1）不要命名为 l 的变量 字母 l 容易和数字 1 混淆 （2）long类型使用大写L 不要用小写 l</strong></li>\n</ol>\n<h2 id=\"Scanner处理键盘输入\"><a href=\"#Scanner处理键盘输入\" class=\"headerlink\" title=\"Scanner处理键盘输入\"></a>Scanner处理键盘输入</h2><p><strong>Scanner让程序和用户通过键盘交互</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\n\n&#x2F;**\n * 测试键盘输入：Scanner用法\n *&#x2F;\n\npublic class TestScanner &#123;\n\n    public static void main(String[] args) &#123;\n        Scanner sc &#x3D; new Scanner(System.in);\n\n        System.out.println(&quot;请输入用户名：&quot;);\n        String uname &#x3D; sc.nextLine();\n        System.out.println(&quot;你好，&quot; + uname);\n    &#125;\n&#125;\n</code></pre>\n\n<p>请输入用户名：<br>Chan_Honman\t<strong>(键盘输入)</strong><br>你好，Chan_Honman</p>\n<p>Process finished with exit code 0</p>\n<h2 id=\"控制语句\"><a href=\"#控制语句\" class=\"headerlink\" title=\"控制语句\"></a>控制语句</h2><ol>\n<li><strong>顺序结构：先执行a，再执行b的逻辑</strong></li>\n<li><strong>条件判断结构：如果。。。则。。。的逻辑</strong></li>\n<li><strong>循环结构：如果。。。则重复执行。。。的逻辑</strong></li>\n</ol>\n<h2 id=\"条件判断结构（选择结构）\"><a href=\"#条件判断结构（选择结构）\" class=\"headerlink\" title=\"条件判断结构（选择结构）\"></a>条件判断结构（选择结构）</h2><p><img src=\"/images/Java/%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E7%BB%93%E6%9E%84.png\"></p>\n<h3 id=\"if单分支结构\"><a href=\"#if单分支结构\" class=\"headerlink\" title=\"if单分支结构\"></a>if单分支结构</h3><p><img src=\"/images/Java/if%E5%8D%95%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>语法结构：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">if(布尔表达式)&#123;\n\t语句块\n&#125;</code></pre>\n\n</blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>【示例】掷色子🎲游戏</strong> </p>\n<p>Math类的使用</p>\n<p>Math.random()该方法用于产生 0 到 1 区间 double 类型的随机数，但是不包括1。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int i &#x3D; (int) (6 * Math.random()); &#x2F;&#x2F;产生【0,5】之间的随机数</code></pre>\n\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 写个掷色子游戏\n * 1.如果三次加起来一共大于15        不错\n * 2.如果三次加起来在 10-15 之间     一般\n * 3.如果三次加起来在 10-3之间       不好\n *&#x2F;\n\npublic class TestIf01 &#123;\n\n    public static void main(String[] args) &#123;\n        int i &#x3D; (int) (Math.random() * 6) + 1;\n        int j &#x3D; (int) (Math.random() * 6) + 1;\n        int k &#x3D; (int) (Math.random() * 6) + 1;\n\n        int count &#x3D; i + j + k;\n\n        if (count &gt; 15) &#123;\n            System.out.println(&quot;运气不错！&quot;);\n        &#125;\n\n        if (count &lt; 10) &#123;\n            System.out.println(&quot;运气不好！&quot;);\n        &#125;\n\n        if (10 &lt;&#x3D; count &amp;&amp; count &lt;&#x3D; 15) &#123;\n            System.out.println(&quot;运气一般！&quot;);\n        &#125;\n\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h3 id=\"if-else双分支结构\"><a href=\"#if-else双分支结构\" class=\"headerlink\" title=\"if-else双分支结构\"></a>if-else双分支结构</h3><p><img src=\"/images/Java/ifelse%E5%8F%8C%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>语法结构：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">if (布尔表达式) &#123;\n\t语句块1\n&#125; else &#123;\n\t语句块2\n&#125;</code></pre>\n\n</blockquote>\n<p><strong>小练习：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 测试if-else双分支结构\n *&#x2F;\n\npublic class TestIf02 &#123;\n\n    public static void main(String[] args) &#123;\n        double r &#x3D; 4 * Math.random();\n        double area &#x3D; Math.PI * r * r;\n        double circle &#x3D; 2 * r * Math.PI;\n        System.out.println(&quot;半径&#x3D;&quot; + r + &quot; 面积&#x3D;&quot; + area + &quot;， 周长&#x3D;&quot; + circle);\n        if (area &gt;&#x3D; circle) &#123;\n            System.out.println(&quot;面积的数值大于周长&quot;);\n        &#125;else &#123;\n            System.out.println(&quot;面积的数值小于周长&quot;);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h3 id=\"If-elseif-else多分支结构\"><a href=\"#If-elseif-else多分支结构\" class=\"headerlink\" title=\"If-elseif-else多分支结构\"></a>If-elseif-else多分支结构</h3><p><img src=\"/images/Java/%E5%A4%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>语法结构</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&gt;if (布尔表达式1) &#123;\n   语句块1;\n&#125; else if (布尔表达式2) &#123;\n   语句块2;\n\t&#125;.....</code></pre>\n\n</blockquote>\n<p><strong>小练习：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 测试多分支结构\n *&#x2F;\n\npublic class TestIf03 &#123;\n\n    public static void main(String[] args) &#123;\n        int age &#x3D; (int) (120 * Math.random());\n        System.out.println(&quot;年龄是： &quot; + age);\n\n        &#x2F;&#x2F;15以下儿童 15-24青年 25-44中年 45-64中老年 65-84老年 85-99老寿星\n        &#x2F;&#x2F;100-109百岁老人 110以上申请国家纪录\n        if (age &lt; 15) &#123;\n            System.out.println(&quot;儿童&quot;);\n        &#125; else if (age &lt; 25) &#123;\n            System.out.println(&quot;青年&quot;);\n        &#125; else if (age &lt; 45) &#123;\n            System.out.println(&quot;中年&quot;);\n        &#125; else if (age &lt; 65) &#123;\n            System.out.println(&quot;中老年&quot;);\n        &#125; else if (age &lt; 85) &#123;\n            System.out.println(&quot;老年&quot;);\n        &#125; else if (age &lt; 100) &#123;\n            System.out.println(&quot;老寿星&quot;);\n        &#125; else if (age &lt; 110) &#123;\n\n        &#125; else &#123;\n            System.out.println(&quot;百岁老人&quot;);\n        &#125;\n    &#125;\n\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"switch语句\"><a href=\"#switch语句\" class=\"headerlink\" title=\"switch语句\"></a>switch语句</h2><ol>\n<li><strong>switch会根据表达式的值从相匹配的case标签处开始执行，一直执行到break处或者是switch的末尾。如果表达式的值与任一case值不匹配，则进入default语句。</strong></li>\n<li><strong>switch中表达式的值是int（byte、short、char也可。但是long不行）、枚举、字符串。</strong></li>\n</ol>\n<p><img src=\"/images/Java/switch%E5%A4%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84.png\"></p>\n<p><strong>练习题：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class TestSwitch01 &#123;\n\n    public static void main(String[] args) &#123;\n        int grade &#x3D; (int) (Math.random() * 4) + 1;   &#x2F;&#x2F;大学年级\n\n        switch (grade) &#123;\n            case 1:\n                System.out.println(&quot;大一新生&quot;);\n                break;\n            case 2:\n                System.out.println(&quot;大二&quot;);\n                break;\n            case 3:\n                System.out.println(&quot;大三&quot;);\n                break;\n            default:\n                System.out.println(&quot;大四&quot;);\n                break;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h2><p><strong>循环结构 分两大类，一类是当型，一类是直到型。</strong></p>\n<ul>\n<li><p><strong>当型：</strong></p>\n<p><strong>当布尔表达式条件位true时，反复执行某语句，当布尔表达式的值为false时才停止循环，比如while与for循环。</strong></p>\n</li>\n<li><p><strong>直到型：</strong></p>\n<p><strong>先执行某语句，再判断布尔表达式，如果true再执行语句，如此反复，直到布尔表达式条件为false时才停止循环，比如do-while循环。</strong></p>\n</li>\n</ul>\n<h3 id=\"while循环♻️\"><a href=\"#while循环♻️\" class=\"headerlink\" title=\"while循环♻️\"></a>while循环♻️</h3><p><img src=\"/images/Java/while%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>语法结构：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">while (布尔表达式)\t&#123;\n\t\t循环体;\n&#125;</code></pre>\n\n</blockquote>\n<p>练习题：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class TestWhile &#123;\n\n    public static void main(String[] args) &#123;\n        int a &#x3D; 0;\n        while (a &lt; 3) &#123;\n            System.out.println(&quot;I love U! &quot; + a);\n            a++;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h3 id=\"for循环♻️\"><a href=\"#for循环♻️\" class=\"headerlink\" title=\"for循环♻️\"></a>for循环♻️</h3><p><img src=\"/images/Java/for%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>语法结构：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for (初始表达式;布尔表达式;迭代因子) &#123;\n\t循环体；\n&#125;</code></pre>\n\n</blockquote>\n<ul>\n<li>初始化部分设置：循环变量的初值</li>\n<li>条件判断部分为：布尔表达式</li>\n<li>迭代因子：控制循环变量的增减</li>\n</ul>\n<p><strong>练习题：</strong></p>\n<p>累加 0+1+2+3+4+…+100</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class TestFor &#123;\n\n    public static void main(String[] args) &#123;\n        int sum &#x3D; 0;\n        for (int i &#x3D; 0; i &lt;&#x3D; 100; i++) &#123;\n            sum +&#x3D; i;\n        &#125;\n        System.out.println(sum);    &#x2F;&#x2F;5050\n    &#125;\n&#125;\n</code></pre>\n\n<p>输出90-1之间能被3整除的数</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class TestFor &#123;\n\n    public static void main(String[] args) &#123;\n        for (int i &#x3D; 90; i &gt;&#x3D; 1; i--) &#123;\n            if (i % 3 &#x3D;&#x3D; 0) &#123;\n                System.out.println(i + &quot;\\t&quot;);\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h3 id=\"do-while循环♻️\"><a href=\"#do-while循环♻️\" class=\"headerlink\" title=\"do-while循环♻️\"></a>do-while循环♻️</h3><p><img src=\"/images/Java/dowhile%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>语法结构：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">do&#123;\n\t循环体;\n&#125;while(布尔表达式);</code></pre>\n\n</blockquote>\n<h2 id=\"嵌套循环♻️\"><a href=\"#嵌套循环♻️\" class=\"headerlink\" title=\"嵌套循环♻️\"></a>嵌套循环♻️</h2><p>1⃣️执行结果如下所示：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">1 1 1 1 1\n2 2 2 2 2\n3 3 3 3 3\n4 4 4 4 4\n5 5 5 5 5</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class TestLoop2 &#123;\n\n    public static void main(String[] args) &#123;\n        for (int i &#x3D; 1; i &lt;&#x3D; 5; i++) &#123;\n            for (int j &#x3D; 1; j &lt;&#x3D; 5; j++) &#123;\n                System.out.print(i + &quot;\\t&quot;);\n            &#125;\n            System.out.println();\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n<p>2⃣️输出9*9乘法口诀表:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">1 * 1 &#x3D; 1\t\n1 * 2 &#x3D; 2\t2 * 2 &#x3D; 4\t\n1 * 3 &#x3D; 3\t2 * 3 &#x3D; 6\t3 * 3 &#x3D; 9\t\n1 * 4 &#x3D; 4\t2 * 4 &#x3D; 8\t3 * 4 &#x3D; 12\t4 * 4 &#x3D; 16\t\n1 * 5 &#x3D; 5\t2 * 5 &#x3D; 10\t3 * 5 &#x3D; 15\t4 * 5 &#x3D; 20\t5 * 5 &#x3D; 25\t\n1 * 6 &#x3D; 6\t2 * 6 &#x3D; 12\t3 * 6 &#x3D; 18\t4 * 6 &#x3D; 24\t5 * 6 &#x3D; 30\t6 * 6 &#x3D; 36\t\n1 * 7 &#x3D; 7\t2 * 7 &#x3D; 14\t3 * 7 &#x3D; 21\t4 * 7 &#x3D; 28\t5 * 7 &#x3D; 35\t6 * 7 &#x3D; 42\t7 * 7 &#x3D; 49\t\n1 * 8 &#x3D; 8\t2 * 8 &#x3D; 16\t3 * 8 &#x3D; 24\t4 * 8 &#x3D; 32\t5 * 8 &#x3D; 40\t6 * 8 &#x3D; 48\t7 * 8 &#x3D; 56\t8 * 8 &#x3D; 64\t\n...</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class TestLoop2 &#123;\n\n    public static void main(String[] args) &#123;\n        for (int i &#x3D; 1; i &lt;&#x3D; 9; i++) &#123;\n            for (int j &#x3D; 1; j &lt;&#x3D; i; j++) &#123;\n                System.out.print(j + &quot; * &quot; + i + &quot; &#x3D; &quot; + i * j + &quot;\\t&quot;);\n            &#125;\n            System.out.println();\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"break语句和continue语句\"><a href=\"#break语句和continue语句\" class=\"headerlink\" title=\"break语句和continue语句\"></a>break语句和continue语句</h2><ul>\n<li><strong>break语句用于强行退出整个循环♻️</strong></li>\n<li><strong>continue语句用于结束本次循环，继续下一次循环</strong></li>\n</ul>\n<p><img src=\"/images/Java/break%E5%92%8Ccontinue.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>练习题：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 测试breal语句\n * 产生100以内的随机数 知道随机数为88 终止循环\n *&#x2F;\n\npublic class TestBreak &#123;\n\n    public static void main(String[] args) &#123;\n        int total &#x3D; 0;\n        while (true) &#123;\n            total++;\n            int i &#x3D; (int) (Math.random() * 100);\n            System.out.println(i);\n            if (i &#x3D;&#x3D; 88) &#123;\n                break;\n            &#125;\n        &#125;\n        System.out.println(&quot;循环次数：&quot; + total);\n    &#125;\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 测试continue语句\n * 把100-150之间不能被3整除的数输出，并且每行输出5个\n *&#x2F;\n\npublic class TestContinue &#123;\n\n    public static void main(String[] args) &#123;\n        int count &#x3D; 0;\n\n        for (int i &#x3D; 100; i &lt;&#x3D; 150; i++) &#123;\n            if (i % 3 &#x3D;&#x3D; 0) &#123;\n                continue;\n            &#125;\n            System.out.print(i + &quot;\\t&quot;);\n            count++;\n            if (count &#x3D;&#x3D; 5) &#123;\n                System.out.println();\n                count &#x3D; 0;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n</blockquote>\n<h2 id=\"带标签的continue\"><a href=\"#带标签的continue\" class=\"headerlink\" title=\"带标签的continue\"></a>带标签的continue</h2><p>“标签”是指后面跟一个冒号的标识符 例如 <strong>label</strong> 。 对Java来说唯一用到标签的地方是循环语句之前。</p>\n<p>“<strong>go to 有害</strong>”论中，最多有问题的就是变迁，而非 <strong>to go</strong>。随着标签在一个程序里数量的增多，产生错误的机会也越来越多。但Java标签不会造成这方面的问题，因为它们的活动产所已被限制死，不可通过特别的方式到处传递程序的控制权。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 打印101-150之间的所有质数\n *&#x2F;\n\npublic class TestCountinue02 &#123;\n\n    public static void main(String[] args) &#123;\n        outer:\n        for (int i &#x3D; 101; i &lt; 150; i++) &#123;\n            for (int j &#x3D; 2; j &lt; i &#x2F; 2; j++) &#123;\n                if (i % j &#x3D;&#x3D; 0) &#123;\n                    continue outer; &#x2F;&#x2F;符合条件跳到外部循环继续\n                &#125;\n            &#125;\n            System.out.print(i + &quot; &quot;);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"❓年薪计算器程序\"><a href=\"#❓年薪计算器程序\" class=\"headerlink\" title=\"❓年薪计算器程序\"></a>❓年薪计算器程序</h2><ol>\n<li>通过键盘输入用户的月薪，每年是几个月薪水。</li>\n<li>输出用户的年薪。</li>\n<li>如果年薪超过10万则恭喜超过90%的国人，如果年薪超过20万则恭喜超过98%的国人。</li>\n<li>直到键盘输入数字88，则退出程序（使用break退出循环）。</li>\n<li>键盘输入66，则这个用户退出计算不显示恭喜…，直接显示“重新开始计算…”，然后计算下一个用户的年薪。</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\n\n&#x2F;**\n * 年薪计算器程序\n *\n * @author chan_honman\n * @version 1.0\n *&#x2F;\n\npublic class SalaryCalculator &#123;\n\n    public static void main(String[] args) &#123;\n        Scanner sc &#x3D; new Scanner(System.in);\n\n\n        outer:\n        while (true) &#123;\n\n            System.out.println(&quot;请输入您的月薪：&quot;);\n            int monthlySalary &#x3D; sc.nextInt();\n            if (monthlySalary &#x3D;&#x3D; 88) &#123;\n                break;\n            &#125;\n\n            System.out.println(&quot;请输入您每年是有几个月薪水：&quot;);\n            int month &#x3D; sc.nextInt();\n            if (month &#x3D;&#x3D; 66) &#123;\n                System.out.println(&quot;重新开始计算...\\n&quot;);\n                continue outer;\n            &#125;\n\n            int annualSalary &#x3D; monthlySalary * month;\n            System.out.println(&quot;您的年薪为：&quot; + annualSalary + &quot;元&quot;);\n\n            if (annualSalary &gt; 200000) &#123;\n                System.out.println(&quot;恭喜您的年薪超过98%的国人！！！\\n&quot;);\n            &#125; else if (annualSalary &gt; 100000) &#123;\n                System.out.println(&quot;恭喜您的年薪超过90%的国人！！！\\n&quot;);\n            &#125; else &#123;\n                System.out.println(&quot;继续加油争取年薪过10万吧！！！\\n&quot;);\n            &#125;\n        &#125;\n\n\n    &#125;\n&#125;\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p><strong>updating……….</strong></p>\n","feature":true,"text":"Java基础 Java对大小写敏感。 关键字class对意思是类。Java是面向对象的语言，所有代码必须放在class里面。 编译后的源文件，得到相应的字节码文...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"计算机","slug":"计算机","count":5,"path":"api/categories/计算机.json"},{"name":"后端","slug":"计算机/后端","count":2,"path":"api/categories/计算机/后端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":7,"path":"api/tags/笔记.json"},{"name":"Java","slug":"Java","count":1,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">Java基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">创建第一个Java程序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%B8%B8%E7%94%A8DOS%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">最常用DOS命令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%81%E8%BF%9B%E5%88%B6%E5%92%8C%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">十进制和二进制转换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6\"><span class=\"toc-text\">1.十进制转二进制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6\"><span class=\"toc-text\">2.二进制转十进制</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">Java注释</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%8D%95%E8%A1%8C%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">1.单行注释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%A4%9A%E8%A1%8C%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">2.多行注释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">3.文档注释</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%87%E8%AF%86%E7%AC%A6%E5%92%8C%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">标识符和关键字</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%A0%87%E8%AF%86%E7%AC%A6\"><span class=\"toc-text\">1.标识符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">2.关键字</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E7%9A%84%E5%88%86%E7%B1%BB%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">变量的分类和作用域</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E9%87%8F-%E5%92%8C-final\"><span class=\"toc-text\">常量 和 final</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-Primitive-data-type\"><span class=\"toc-text\">基本数据类型 Primitive data type</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">整数类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E5%9E%8B\"><span class=\"toc-text\">浮点型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E5%9E%8B\"><span class=\"toc-text\">字符型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%83%E5%B0%94%E5%9E%8B-boolean\"><span class=\"toc-text\">布尔型 boolean</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6-operator\"><span class=\"toc-text\">运算符 operator</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">算数运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E8%BF%90%E7%AE%97%E8%A7%84%E5%88%99\"><span class=\"toc-text\">二元运算符的运算规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E5%8F%8A%E5%85%B6%E6%89%A9%E5%B1%95%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">赋值及其扩展赋值运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">关系运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">逻辑运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">位运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9E%E6%8E%A5%E7%AC%A6\"><span class=\"toc-text\">字符串连接符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">条件运算符</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">运算符优先级问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">数据类型的转换</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">数据强制转换</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96%E6%97%B6%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E5%92%8C%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">基本类型转化时常见错误和问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Scanner%E5%A4%84%E7%90%86%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">Scanner处理键盘输入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">控制语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E7%BB%93%E6%9E%84%EF%BC%88%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84%EF%BC%89\"><span class=\"toc-text\">条件判断结构（选择结构）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#if%E5%8D%95%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">if单分支结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#if-else%E5%8F%8C%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">if-else双分支结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#If-elseif-else%E5%A4%9A%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">If-elseif-else多分支结构</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#switch%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">switch语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">循环结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#while%E5%BE%AA%E7%8E%AF%E2%99%BB%EF%B8%8F\"><span class=\"toc-text\">while循环♻️</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#for%E5%BE%AA%E7%8E%AF%E2%99%BB%EF%B8%8F\"><span class=\"toc-text\">for循环♻️</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#do-while%E5%BE%AA%E7%8E%AF%E2%99%BB%EF%B8%8F\"><span class=\"toc-text\">do-while循环♻️</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B5%8C%E5%A5%97%E5%BE%AA%E7%8E%AF%E2%99%BB%EF%B8%8F\"><span class=\"toc-text\">嵌套循环♻️</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#break%E8%AF%AD%E5%8F%A5%E5%92%8Ccontinue%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">break语句和continue语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%A6%E6%A0%87%E7%AD%BE%E7%9A%84continue\"><span class=\"toc-text\">带标签的continue</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E2%9D%93%E5%B9%B4%E8%96%AA%E8%AE%A1%E7%AE%97%E5%99%A8%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">❓年薪计算器程序</span></a></li></ol></li></ol>","author":{"name":"Honman","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"这家伙很坏 什么都没留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"8000英语单词","uid":"a2af924c2c9dc8abd52717dfa27385c7","slug":"English/8000英语单词","date":"2023-03-30T03:00:00.000Z","updated":"2023-08-17T06:38:25.930Z","comments":true,"path":"api/articles/English/8000英语单词.json","keywords":null,"cover":"/images/cover/7.jpg","text":" 学习英语是绝大部分年轻人绝不可能绕过去的一道坎。而“低配版”词汇量与“高配版”词汇量，将导致英语学习体验全方位的差别，所以背单词是一种“must-do”。 所...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"英语","slug":"英语","count":4,"path":"api/categories/英语.json"}],"tags":[{"name":"英语","slug":"英语","count":4,"path":"api/tags/英语.json"}],"author":{"name":"Honman","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"这家伙很坏 什么都没留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"《乔布斯激情演讲》","uid":"7525935f3d7857db9f6e83da3969ebe0","slug":"Reading Book/《乔布斯激情演讲》江涛","date":"2022-09-21T09:30:00.000Z","updated":"2023-01-18T17:15:32.953Z","comments":true,"path":"api/articles/Reading Book/《乔布斯激情演讲》江涛.json","keywords":null,"cover":"/images/cover/2.png","text":"《乔布斯激情演讲》江涛Stay Hungry, Stay Foolish求知若饥，虚心若愚——史蒂夫·乔布斯2005年在斯坦福大学演讲 ​ 2005年6月，未能...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"Reading Book","slug":"Reading-Book","count":2,"path":"api/categories/Reading-Book.json"}],"tags":[{"name":"Reading Book","slug":"Reading-Book","count":2,"path":"api/tags/Reading-Book.json"}],"author":{"name":"Honman","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"这家伙很坏 什么都没留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}