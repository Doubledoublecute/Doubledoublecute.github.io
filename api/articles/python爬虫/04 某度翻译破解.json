{"title":"04 某度翻译破解","uid":"798e63d78401db1ba196dce3ef953f65","slug":"python爬虫/04 某度翻译破解","date":"2022-09-15T07:29:00.000Z","updated":"2022-09-17T01:49:41.969Z","comments":true,"path":"api/articles/python爬虫/04 某度翻译破解.json","keywords":null,"cover":null,"content":"<h1 id=\"某度翻译破解\"><a href=\"#某度翻译破解\" class=\"headerlink\" title=\"某度翻译破解\"></a>某度翻译破解</h1><p><strong>在pycharm中实现直接输入要翻译的英语单词，终获得翻译结果并且保存下来。</strong></p>\n<h2 id=\"指定url\"><a href=\"#指定url\" class=\"headerlink\" title=\"指定url\"></a>指定url</h2><p>利用浏览器的开发工具进行数据抓包，在XHP页面获取Ajax实际请求地址。</p>\n<p>切换到Headers找到请求，可以看到请求的url、请求方式和返回的数据类型都有了。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 指定url</span>\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'https://fanyi.baidu.com/sug'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"UA伪装\"><a href=\"#UA伪装\" class=\"headerlink\" title=\"UA伪装\"></a>UA伪装</h2><p><strong>让爬虫对应的请求载体身份标识伪装成某一款浏览器。</strong><br>方法：将对应的User-Agent封装到一个字典中。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># UA伪装</span>\nheaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Mozilla/x.x (Macintosh; Intel Mac OS X xx_xx_x) AppleWebKit/xxx.xx (KHTML, like Gecko) Chrome/xxx.x.x.x Safari/xxx.xx'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"POST请求参数处理\"><a href=\"#POST请求参数处理\" class=\"headerlink\" title=\"POST请求参数处理\"></a>POST请求参数处理</h2><p>在XHP页面获取Ajax实际相关参数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># post请求参数处理（同get请求一致）</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">'kw'</span><span class=\"token punctuation\">:</span> words\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"请求发送\"><a href=\"#请求发送\" class=\"headerlink\" title=\"请求发送\"></a>请求发送</h2><p>基于requests发送请求，通过前面抓包得到的信息我们得到了，它的请求方式为post请求，这里我们使用requests模块中post()方法来发送请求</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 请求发送</span>\nresponce <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"获取响应数据\"><a href=\"#获取响应数据\" class=\"headerlink\" title=\"获取响应数据\"></a>获取响应数据</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 获取响应数据：json()方法放回的是obj（确认了响应数据是json类型才可以用json()方法）</span>\nresult <span class=\"token operator\">=</span> responce<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回一个obj</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"进行持久化存储\"><a href=\"#进行持久化存储\" class=\"headerlink\" title=\"进行持久化存储\"></a>进行持久化存储</h2><p>默认使用的编码是ASCII（不包含中文），而中文是Unicode编码。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 进行持久化存储</span>\nfp <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'UTF-8'</span><span class=\"token punctuation\">)</span>\njson<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> fp<span class=\"token operator\">=</span>fp<span class=\"token punctuation\">,</span> ensure_ascii<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># json()返回的obj中有中文 所以不能用ASCII解码</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> json\n\n<span class=\"token comment\"># 指定url</span>\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'https://fanyi.baidu.com/sug'</span>\n\n<span class=\"token comment\"># UA伪装</span>\nheaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Mozilla/x.x (Macintosh; Intel Mac OS X xx_xx_x) AppleWebKit/xxx.xx (KHTML, like Gecko) Chrome/xxx.x.x.x Safari/xxx.xx'</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 输入翻译的词</span>\nwords <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入要翻译的英语单词: '</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># post请求参数处理（同get请求一致）</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">'kw'</span><span class=\"token punctuation\">:</span> words\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># 请求发送</span>\nresponce <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n\nfileName <span class=\"token operator\">=</span> words <span class=\"token operator\">+</span> <span class=\"token string\">'.json'</span>\n\n<span class=\"token comment\"># 获取响应数据：json()方法放回的是obj（确认了响应数据是json类型才可以用json()方法）</span>\nresult <span class=\"token operator\">=</span> responce<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回一个obj</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'翻译结果如下:'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 打印返回的obj结果</span>\n\n<span class=\"token comment\"># 进行持久化存储</span>\nfp <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'UTF-8'</span><span class=\"token punctuation\">)</span>\njson<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> fp<span class=\"token operator\">=</span>fp<span class=\"token punctuation\">,</span> ensure_ascii<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># json()返回的obj中有中文 所以不能用ASCII解码</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'save over！'</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n","text":"某度翻译破解在pycharm中实现直接输入要翻译的英语单词，终获得翻译结果并且保存下来。 指定url利用浏览器的开发工具进行数据抓包，在XHP页面获取Ajax实际请求地址。 切换到Headers找到请求，可以看到请求的url、请求方式和返回的数据类型都有了。 # 指定url ur...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"计算机","slug":"计算机","count":8,"path":"api/categories/计算机.json"},{"name":"Python爬虫","slug":"计算机/Python爬虫","count":5,"path":"api/categories/计算机/Python爬虫.json"}],"tags":[{"name":"笔记","slug":"笔记","count":10,"path":"api/tags/笔记.json"},{"name":"Python爬虫","slug":"Python爬虫","count":5,"path":"api/tags/Python爬虫.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9F%90%E5%BA%A6%E7%BF%BB%E8%AF%91%E7%A0%B4%E8%A7%A3\"><span class=\"toc-text\">某度翻译破解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E5%AE%9Aurl\"><span class=\"toc-text\">指定url</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#UA%E4%BC%AA%E8%A3%85\"><span class=\"toc-text\">UA伪装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#POST%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86\"><span class=\"toc-text\">POST请求参数处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E5%8F%91%E9%80%81\"><span class=\"toc-text\">请求发送</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">获取响应数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E8%A1%8C%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">进行持久化存储</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">完整代码</span></a></li></ol></li></ol>","author":{"name":"Chan_Honman","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"这家伙很坏 什么都没留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"《西西弗神话》Albert Camus","uid":"3f5d3d267589901b817d54b9b16a9af3","slug":"Reading Book/《西西弗神话》Albert Camus","date":"2022-09-19T02:23:00.000Z","updated":"2022-09-21T11:10:21.324Z","comments":true,"path":"api/articles/Reading Book/《西西弗神话》Albert Camus.json","keywords":null,"cover":null,"text":"《西西弗神话》Albert Camus荒诞与自杀真正严肃的哲学问题只有一个，那就是自杀。 我发现有很多人死去，是因为他们认为生命不值得继续。更奇怪的是，还有些人，却是为了支持他们活下去的想法和幻想慷慨赴死。 自杀，在某种程度上，就像在情节剧中一般，是一种承认。承认我们被生活超越，...","link":"","photos":[],"count_time":{"symbolsCount":303,"symbolsTime":"1 mins."},"categories":[{"name":"Reading Book","slug":"Reading-Book","count":2,"path":"api/categories/Reading-Book.json"}],"tags":[{"name":"Reading Book","slug":"Reading-Book","count":2,"path":"api/tags/Reading-Book.json"}],"author":{"name":"Chan_Honman","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"这家伙很坏 什么都没留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"虚拟语气","uid":"56fe382c7e3daf8006dd9f69319d34eb","slug":"English/虚拟语气","date":"2022-09-14T07:24:00.000Z","updated":"2022-09-15T07:00:56.653Z","comments":true,"path":"api/articles/English/虚拟语气.json","keywords":null,"cover":null,"text":"虚拟语气虚拟语气在非真实条件句及主句中的用法 区别 从句的谓语动词 主句的谓语动词 假设过去情况 had+过去分词 should、would、could、might have + 过去分词 假设现在情况 动词的过去式（be动词用were） should、would、could、m...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"英语","slug":"英语","count":7,"path":"api/categories/英语.json"},{"name":"插本","slug":"英语/插本","count":5,"path":"api/categories/英语/插本.json"}],"tags":[{"name":"英语","slug":"英语","count":7,"path":"api/tags/英语.json"},{"name":"插本","slug":"插本","count":5,"path":"api/tags/插本.json"}],"author":{"name":"Chan_Honman","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"这家伙很坏 什么都没留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}