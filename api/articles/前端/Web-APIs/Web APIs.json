{"title":"Web APIs笔记","uid":"5dce2666999480e2fb451f13cc3dbea9","slug":"前端/Web-APIs/Web APIs","date":"2023-07-20T07:30:00.000Z","updated":"2023-08-18T04:31:45.009Z","comments":true,"path":"api/articles/前端/Web-APIs/Web APIs.json","keywords":null,"cover":"/images/cover/4.jpg","content":"<h1 id=\"Web-APIs笔记\"><a href=\"#Web-APIs笔记\" class=\"headerlink\" title=\"Web APIs笔记\"></a>Web APIs笔记</h1><p>跟着黑马程序员pink老师学完HTML、CSS、JavaScript 基础知识后开展了Web APIs的学习。那么一个重要的问题来了！！！到底Web APIs是什么？？？</p>\n<p><em><strong>Web API（Application Programming Interface，应用程序编程接口）是一种允许不同软件应用程序之间进行通信和交互的技术。它定义了一组规则和协议，用于在应用程序之间传递数据和执行特定的操作。 网络应用程序接口</strong></em></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<p>学习 JavaScript 时学习 API<em><strong>（Application Programming Interface，应用程序编程接口）</strong></em>是非常重要的，原因如下：</p>\n<ol>\n<li>功能扩展：API 允许你扩展 JavaScript 的功能，使其能够与其他应用程序或服务进行交互。通过使用 API，你可以访问和使用其他应用程序或服务提供的功能，而无需从头开始编写所有代码。这样可以节省时间和精力，加快开发速度。</li>\n<li>数据获取和处理：许多 API 提供了数据访问接口，允许你从服务器或其他数据源获取数据。这对于构建 Web 应用程序或移动应用程序来说非常有用。通过使用 API，你可以获取实时数据、用户信息、产品信息等，并在你的应用程序中进行处理和展示。</li>\n<li>互联网服务集成：API 允许你与各种互联网服务进行集成，如社交媒体平台、支付网关、地图服务等。通过与这些服务进行交互，你可以实现用户身份验证、支付功能、地理位置信息等。这样可以提供更丰富的用户体验，并增加你的应用程序的功能和吸引力。</li>\n<li>前端开发：在前端开发中，API 是与后端服务进行交互的关键。通过与后端 API 进行通信，你可以获取数据、提交表单、进行用户认证等。这对于构建动态和交互式的 Web 应用程序至关重要。</li>\n<li>学习资源丰富：学习 API 有助于你了解不同服务和平台提供的功能和技术。许多知名的互联网公司和服务提供商都提供了丰富的 API 文档和示例代码，以帮助开发人员学习和使用他们的服务。</li>\n</ol>\n<p>总之，学习 API 可以帮助你扩展 JavaScript 的功能、获取和处理数据、与其他服务进行集成，并提供更丰富的用户体验。它是现代 Web 开发中不可或缺的一部分，可以使你的应用程序更强大、更灵活。</p></blockquote>\n</blockquote>\n<p>复习：</p>\n<p>splice() 方法用于添加或删除数组中的元素。</p>\n<p><strong>注意：</strong>这种方法会改变原始数组。</p>\n<ol>\n<li><strong>删除数组：</strong></li>\n</ol>\n<p>splice(起始位置， 删除的个数)</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let arr &#x3D; [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;]\narr.splice(1,1) &#x2F;&#x2F; 删除green元素\nconsole.log(arr) &#x2F;&#x2F; [&#39;red, &#39;blue&#39;]</code></pre>\n\n<ol start=\"2\">\n<li><strong>添加元素</strong></li>\n</ol>\n<p>splice(起始位置，删除个数，添加数组元素)</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let arr &#x3D; [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;]\n&#x2F;&#x2F;arr.splice(1, 0, &#39;pink&#39;) &#x2F;&#x2F; 在索引号是1的位置添加 pink\n&#x2F;&#x2F;console.log(arr) &#x2F;&#x2F; [&#39;red&#39;, &#39;pink&#39;, &#39;green&#39;, &#39;blue&#39;]\narr.splice(1, 0, &#39;pink&#39;, &#39;hotpink&#39;) &#x2F;&#x2F; 在索引号是1的位置添加 pink  hotpink\nconsole.log(arr) &#x2F;&#x2F; [&#39;red&#39;, &#39;pink&#39;, &#39;hotpink&#39;, &#39;green&#39;, &#39;blue&#39;]</code></pre>\n\n\n\n<h2 id=\"Web-APIs-第1天笔记\"><a href=\"#Web-APIs-第1天笔记\" class=\"headerlink\" title=\"Web APIs - 第1天笔记\"></a>Web APIs - 第1天笔记</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>了解 DOM 的结构并掌握其基本的操作，体验 DOM 的在开发中的作用</p></blockquote>\n<ul>\n<li>知道 ECMAScript 与 JavaScript 的关系</li>\n<li>了解 DOM 的相关概念及DOM 的本质是一个对象</li>\n<li>掌握查找节点的基本方法</li>\n<li>掌握节点属性和文本的操作</li>\n<li>能够使用间歇函数创建定时任务</li>\n</ul>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>知道 ECMAScript 与 JavaScript 的关系，Web APIs 是浏览器扩展的功能。</p></blockquote>\n<p>严格意义上讲，我们在 JavaScript 阶段学习的知识绝大部分属于 ECMAScript 的知识体系，ECMAScript 简称 ES 它提供了一套语言标准规范，如变量、数据类型、表达式、语句、函数等语法规则都是由 ECMAScript 规定的。浏览器将 ECMAScript 大部分的规范加以实现，并且在此基础上又扩展一些实用的功能，这些被扩展出来的内容我们称为 Web APIs。</p>\n<p><img src=\"/images/Web-APIs/assets/guide.png\" alt=\"guide\"></p>\n<p>ECMAScript 运行在浏览器中然后再结合 Web APIs 才是真正的 JavaScript，Web APIs 的核心是 DOM 和 BOM。</p>\n<p>扩展阅读：ECMAScript 规范在不断的更新中，存在多个不同的版本，早期的版本号采用数字顺序编号如 ECMAScript3、ECMAScript5，后来由于更新速度较快便采用年份做为版本号，如 ECMAScript2017、ECMAScript2018 这种格式，ECMAScript6 是 2015 年发布的，常叫做 EMCAScript2015。</p>\n<p>关于 JavaScript 历史的<a href=\"https://javascript.ruanyifeng.com/introduction/history.html\">扩展阅读</a>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>知道 DOM 相关的概念，建立对 DOM 的初步认识，学习 DOM 的基本操作，体会 DOM 的作用</p></blockquote>\n<p>DOM（Document Object Model）是将整个 HTML 文档的每一个标签元素视为一个对象，这个对象下包含了许多的属性和方法，通过操作这些属性或者调用这些方法实现对 HTML 的动态更新，为实现网页特效以及用户交互提供技术支撑。</p>\n<p>简言之 DOM 是用来动态修改 HTML 的，其目的是开发网页特效及用户交互。</p>\n<p>观察一个小例子：</p>\n<p><img src=\"/images/Web-APIs/assets/demo.gif\" alt=\"demo\"></p>\n<p>上述的例子中当用户分分别点击【开始】或【结束】按钮后，通过右侧调试窗口可以观察到 html 标签的内容在不断的发生改变，这便是通过 DOM 实现的。</p>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><h4 id=\"DOM-树\"><a href=\"#DOM-树\" class=\"headerlink\" title=\"DOM 树\"></a>DOM 树</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n  &lt;title&gt;标题&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  文本\n  &lt;a href&#x3D;&quot;&quot;&gt;链接名&lt;&#x2F;a&gt;\n  &lt;div id&#x3D;&quot;&quot; class&#x3D;&quot;&quot;&gt;文本&lt;&#x2F;div&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>如下图所示，将 HTML 文档以树状结构直观的表现出来，我们称之为文档树或 DOM 树，<strong>文档树直观的体现了标签与标签之间的关系。</strong></p>\n<p><img src=\"/images/Web-APIs/assets/web-api.jpg\" alt=\"dom\"></p>\n<h4 id=\"DOM-节点\"><a href=\"#DOM-节点\" class=\"headerlink\" title=\"DOM 节点\"></a>DOM 节点</h4><p>节点是文档树的组成部分，<strong>每一个节点都是一个 DOM 对象</strong>，主要分为元素节点、属性节点、文本节点等。</p>\n<ol>\n<li>【元素节点】其实就是 HTML 标签，如上图中 <code>head</code>、<code>div</code>、<code>body</code> 等都属于元素节点。</li>\n<li>【属性节点】是指 HTML 标签中的属性，如上图中 <code>a</code> 标签的 <code>href</code> 属性、<code>div</code> 标签的 <code>class</code> 属性。</li>\n<li>【文本节点】是指 HTML 标签的文字内容，如 <code>title</code> 标签中的文字。</li>\n<li>【根节点】特指 <code>html</code> 标签。</li>\n<li>其它…</li>\n</ol>\n<h4 id=\"document\"><a href=\"#document\" class=\"headerlink\" title=\"document\"></a>document</h4><p><code>document</code> 是 JavaScript 内置的专门用于 DOM 的对象，该对象包含了若干的属性和方法，<code>document</code> 是学习 DOM 的核心。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; document 是内置的对象\n  &#x2F;&#x2F; console.log(typeof document);\n\n  &#x2F;&#x2F; 1. 通过 document 获取根节点\n  console.log(document.documentElement); &#x2F;&#x2F; 对应 html 标签\n\n  &#x2F;&#x2F; 2. 通过 document 节取 body 节点\n  console.log(document.body); &#x2F;&#x2F; 对应 body 标签\n\n  &#x2F;&#x2F; 3. 通过 document.write 方法向网页输出内容\n  document.write(&#39;Hello World!&#39;);\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>上述列举了 <code>document</code> 对象的部分属性和方法，我们先对 <code>document</code> 有一个整体的认识。</p>\n<h3 id=\"获取DOM对象\"><a href=\"#获取DOM对象\" class=\"headerlink\" title=\"获取DOM对象\"></a>获取DOM对象</h3><ol>\n<li>querySelector   满足条件的第一个元素</li>\n<li>querySelectorAll  满足条件的元素集合 返回伪数组</li>\n<li>了解其他方式<ol>\n<li>getElementById</li>\n<li>getElementsByTagName</li>\n</ol>\n</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n  &lt;title&gt;DOM - 查找节点&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;h3&gt;查找元素类型节点&lt;&#x2F;h3&gt;\n  &lt;p&gt;从整个 DOM 树中查找 DOM 节点是学习 DOM 的第一个步骤。&lt;&#x2F;p&gt;\n  &lt;ul&gt;\n      &lt;li&gt;元素&lt;&#x2F;li&gt;\n      &lt;li&gt;元素&lt;&#x2F;li&gt;\n      &lt;li&gt;元素&lt;&#x2F;li&gt;\n      &lt;li&gt;元素&lt;&#x2F;li&gt;\n  &lt;&#x2F;ul&gt;\n  &lt;script&gt;\n  \tconst p &#x3D; document.querySelector(&#39;p&#39;)  &#x2F;&#x2F; 获取第一个p元素\n  \tconst lis &#x3D; document.querySelectorAll(&#39;li&#39;)  &#x2F;&#x2F; 获取第一个p元素\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>总结：</p>\n<ul>\n<li>document.getElementById 专门获取元素类型节点，根据标签的 <code>id</code>  属性查找</li>\n<li>任意 DOM 对象都包含 nodeType 属性，用来检检测节点类型</li>\n</ul>\n<h3 id=\"操作元素内容\"><a href=\"#操作元素内容\" class=\"headerlink\" title=\"操作元素内容\"></a>操作元素内容</h3><p>通过修改 DOM 的文本内容，动态改变网页的内容。</p>\n<ol>\n<li><code>innerText</code> 将文本内容添加&#x2F;更新到任意标签位置，<strong>文本中包含的标签不会被解析。</strong></li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; innerText 将文本内容添加&#x2F;更新到任意标签位置\n  const intro &#x3D; document.querySelector(&#39;.intro&#39;)\n  &#x2F;&#x2F; intro.innerText &#x3D; &#39;嗨~ 我叫李雷！&#39;\n  &#x2F;&#x2F; intro.innerText &#x3D; &#39;&lt;h4&gt;嗨~ 我叫李雷！&lt;&#x2F;h4&gt;&#39;\n&lt;&#x2F;script&gt;</code></pre>\n\n<ol start=\"2\">\n<li><code>innerHTML</code> 将文本内容添加&#x2F;更新到任意标签位置，<strong>文本中包含的标签会被解析。</strong></li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; innerHTML 将文本内容添加&#x2F;更新到任意标签位置\n  const intro &#x3D; document.querySelector(&#39;.intro&#39;)\n  intro.innerHTML &#x3D; &#39;嗨~ 我叫韩梅梅！&#39;\n  intro.innerHTML &#x3D; &#39;&lt;h4&gt;嗨~ 我叫韩梅梅！&lt;&#x2F;h4&gt;&#39;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>总结：如果文本内容中包含 <code>html</code> 标签时推荐使用 <code>innerHTML</code>，否则建议使用 <code>innerText</code> 属性。</p>\n<h3 id=\"操作元素属性\"><a href=\"#操作元素属性\" class=\"headerlink\" title=\"操作元素属性\"></a>操作元素属性</h3><p>有3种方式可以实现对属性的修改：</p>\n<h4 id=\"常用属性修改\"><a href=\"#常用属性修改\" class=\"headerlink\" title=\"常用属性修改\"></a>常用属性修改</h4><ol>\n<li>直接能过属性名修改，最简洁的语法</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 1. 获取 img 对应的 DOM 元素\n  const pic &#x3D; document.querySelector(&#39;.pic&#39;)\n\t&#x2F;&#x2F; 2. 修改属性\n  pic.src &#x3D; &#39;.&#x2F;images&#x2F;lion.webp&#39;\n  pic.width &#x3D; 400;\n  pic.alt &#x3D; &#39;图片不见了...&#39;\n&lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"控制样式属性\"><a href=\"#控制样式属性\" class=\"headerlink\" title=\"控制样式属性\"></a>控制样式属性</h4><ol>\n<li>应用【修改样式】，通过修改行内样式 <code>style</code> 属性，实现对样式的动态修改。</li>\n</ol>\n<p>通过元素节点获得的 <code>style</code> 属性本身的数据类型也是对象，如 <code>box.style.color</code>、<code>box.style.width</code> 分别用来获取元素节点 CSS 样式的 <code>color</code> 和 <code>width</code> 的值。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n  &lt;title&gt;练习 - 修改样式&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;div class&#x3D;&quot;box&quot;&gt;随便一些文本内容&lt;&#x2F;div&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 获取 DOM 节点\n    const box &#x3D; document.querySelector(&#39;.intro&#39;)\n    box.style.color &#x3D; &#39;red&#39;\n    box.style.width &#x3D; &#39;300px&#39;\n    &#x2F;&#x2F; css 属性的 - 连接符与 JavaScript 的 减运算符\n    &#x2F;&#x2F; 冲突，所以要改成驼峰法\n    box.style.backgroundColor &#x3D; &#39;pink&#39;\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>任何标签都有 <code>style</code> 属性，通过 <code>style</code> 属性可以动态更改网页标签的样式，如要遇到 <code>css</code> 属性中包含字符 <code>-</code> 时，要将 <code>-</code> 去掉并将其后面的字母改成大写，如 <code>background-color</code> 要写成 <code>box.style.backgroundColor</code></p>\n<ol start=\"2\">\n<li>操作类名(className) 操作CSS</li>\n</ol>\n<p>如果修改的样式比较多，直接通过style属性修改比较繁琐，我们可以通过借助于css类名的形式。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n  &lt;title&gt;练习 - 修改样式&lt;&#x2F;title&gt;\n    &lt;style&gt;\n        .pink &#123;\n            background: pink;\n            color: hotpink;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;div class&#x3D;&quot;box&quot;&gt;随便一些文本内容&lt;&#x2F;div&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 获取 DOM 节点\n    const box &#x3D; document.querySelector(&#39;.intro&#39;)\n    box.className &#x3D; &#39;pink&#39;\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：</p>\n<p>1.由于class是关键字, 所以使用className去代替</p>\n<p>2.className是使用新值换旧值, 如果需要添加一个类,需要保留之前的类名</p></blockquote>\n<ol start=\"3\">\n<li>通过 classList 操作类控制CSS</li>\n</ol>\n<p>为了解决className 容易覆盖以前的类名，我们可以通过classList方式追加和删除类名</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;title&gt;Document&lt;&#x2F;title&gt;\n    &lt;style&gt;\n        div &#123;\n            width: 200px;\n            height: 200px;\n            background-color: pink;\n        &#125;\n\n        .active &#123;\n            width: 300px;\n            height: 300px;\n            background-color: hotpink;\n            margin-left: 100px;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n\n&lt;body&gt;\n\n    &lt;div class&#x3D;&quot;one&quot;&gt;&lt;&#x2F;div&gt;\n    &lt;script&gt;\n        &#x2F;&#x2F; 1.获取元素\n        &#x2F;&#x2F; let box &#x3D; document.querySelector(&#39;css选择器&#39;)\n        let box &#x3D; document.querySelector(&#39;div&#39;)\n        &#x2F;&#x2F; add是个方法 添加  追加\n        &#x2F;&#x2F; box.classList.add(&#39;active&#39;)\n        &#x2F;&#x2F; remove() 移除 类\n        &#x2F;&#x2F; box.classList.remove(&#39;one&#39;)\n        &#x2F;&#x2F; 切换类\n        box.classList.toggle(&#39;one&#39;)\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n\n&lt;&#x2F;html&gt;</code></pre>\n\n<h4 id=\"操作表单元素属性\"><a href=\"#操作表单元素属性\" class=\"headerlink\" title=\"操作表单元素属性\"></a>操作表单元素属性</h4><p>表单很多情况，也需要修改属性，比如点击眼睛，可以看到密码，本质是把表单类型转换为文本框</p>\n<p>正常的有属性有取值的跟其他的标签属性没有任何区别</p>\n<p>获取:DOM对象.属性名</p>\n<p>设置:DOM对象.属性名&#x3D; 新值</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;title&gt;Document&lt;&#x2F;title&gt;\n\n&lt;&#x2F;head&gt;\n\n&lt;body&gt;\n    &lt;input type&#x3D;&quot;text&quot; value&#x3D;&quot;请输入&quot;&gt;\n    &lt;button disabled&gt;按钮&lt;&#x2F;button&gt;\n    &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;&quot; class&#x3D;&quot;agree&quot;&gt;\n    &lt;script&gt;\n        &#x2F;&#x2F; 1. 获取元素\n        let input &#x3D; document.querySelector(&#39;input&#39;)\n        &#x2F;&#x2F; 2. 取值或者设置值  得到input里面的值可以用 value\n        &#x2F;&#x2F; console.log(input.value)\n        input.value &#x3D; &#39;小米手机&#39;\n        input.type &#x3D; &#39;password&#39;\n\n        &#x2F;&#x2F; 2. 启用按钮\n        let btn &#x3D; document.querySelector(&#39;button&#39;)\n        &#x2F;&#x2F; disabled 不可用   &#x3D;  false  这样可以让按钮启用\n        btn.disabled &#x3D; false\n        &#x2F;&#x2F; 3. 勾选复选框\n        let checkbox &#x3D; document.querySelector(&#39;.agree&#39;)\n        checkbox.checked &#x3D; false\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n\n&lt;&#x2F;html&gt;</code></pre>\n\n<h4 id=\"自定义属性\"><a href=\"#自定义属性\" class=\"headerlink\" title=\"自定义属性\"></a>自定义属性</h4><p>标准属性: 标签天生自带的属性 比如class id title等, 可以直接使用点语法操作比如： disabled、checked、selected</p>\n<p>自定义属性：</p>\n<p>在html5中推出来了专门的data-自定义属性  </p>\n<p>在标签上一律以data-开头</p>\n<p>在DOM对象上一律以dataset对象方式获取</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;title&gt;Document&lt;&#x2F;title&gt;\n\n&lt;&#x2F;head&gt;\n\n&lt;body&gt;\n   &lt;div data-id&#x3D;&quot;1&quot;&gt; 自定义属性 &lt;&#x2F;div&gt;\n    &lt;script&gt;\n        &#x2F;&#x2F; 1. 获取元素\n        let div &#x3D; document.querySelector(&#39;div&#39;)\n        &#x2F;&#x2F; 2. 获取自定义属性值\n         console.log(div.dataset.id)\n      \n    &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"间歇函数\"><a href=\"#间歇函数\" class=\"headerlink\" title=\"间歇函数\"></a>间歇函数</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>知道间歇函数的作用，利用间歇函数创建定时任务。</p></blockquote>\n<p><code>setInterval</code> 是 JavaScript 中内置的函数，它的作用是间隔固定的时间自动重复执行另一个函数，也叫定时器函数。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 1. 定义一个普通函数\n  function repeat() &#123;\n    console.log(&#39;不知疲倦的执行下去....&#39;)\n  &#125;\n\n  &#x2F;&#x2F; 2. 使用 setInterval 调用 repeat 函数\n  &#x2F;&#x2F; 间隔 1000 毫秒，重复调用 repeat\n  setInterval(repeat, 1000)\n&lt;&#x2F;script&gt;</code></pre>\n\n\n\n<h2 id=\"Web-APIs-第2天笔记\"><a href=\"#Web-APIs-第2天笔记\" class=\"headerlink\" title=\"Web APIs - 第2天笔记\"></a>Web APIs - 第2天笔记</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>学会通过为DOM注册事件来实现可交互的网页特效。</p></blockquote>\n<ul>\n<li>能够判断函数运行的环境并确字 this 所指代的对象</li>\n<li>理解事件的作用，知道应用事件的 3 个步骤</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>学习会为 DOM 注册事件，实现简单可交互的网页特交。</p></blockquote>\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><p>事件是编程语言中的术语，它是用来描述程序的行为或状态的，<strong>一旦行为或状态发生改变，便立即调用一个函数。</strong></p>\n<p>例如：用户使用【鼠标点击】网页中的一个按钮、用户使用【鼠标拖拽】网页中的一张图片</p>\n<h4 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h4><p>结合 DOM 使用事件时，需要为 DOM 对象添加事件监听，等待事件发生（触发）时，便立即调用一个函数。</p>\n<p><code>addEventListener</code> 是 DOM 对象专门用来添加事件监听的方法，它的两个参数分别为【事件类型】和【事件回调】。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n  &lt;title&gt;事件监听&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;h3&gt;事件监听&lt;&#x2F;h3&gt;\n  &lt;p id&#x3D;&quot;text&quot;&gt;为 DOM 元素添加事件监听，等待事件发生，便立即执行一个函数。&lt;&#x2F;p&gt;\n  &lt;button id&#x3D;&quot;btn&quot;&gt;点击改变文字颜色&lt;&#x2F;button&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 1. 获取 button 对应的 DOM 对象\n    const btn &#x3D; document.querySelector(&#39;#btn&#39;)\n\n    &#x2F;&#x2F; 2. 添加事件监听\n    btn.addEventListener(&#39;click&#39;, function () &#123;\n      console.log(&#39;等待事件被触发...&#39;)\n      &#x2F;&#x2F; 改变 p 标签的文字颜色\n      let text &#x3D; document.getElementById(&#39;text&#39;)\n      text.style.color &#x3D; &#39;red&#39;\n    &#125;)\n\n    &#x2F;&#x2F; 3. 只要用户点击了按钮，事件便触发了！！！\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>完成事件监听分成3个步骤：</p>\n<ol>\n<li>获取 DOM 元素</li>\n<li>通过 <code>addEventListener</code> 方法为 DOM 节点添加事件监听</li>\n<li>等待事件触发，如用户点击了某个按钮时便会触发 <code>click</code> 事件类型</li>\n<li>事件触发后，相对应的回调函数会被执行</li>\n</ol>\n<p>大白话描述：所谓的事件无非就是找个机会（事件触发）调用一个函数（回调函数）。</p>\n<h4 id=\"事件类型\"><a href=\"#事件类型\" class=\"headerlink\" title=\"事件类型\"></a>事件类型</h4><p><code>click</code> 译成中文是【点击】的意思，它的含义是监听（等着）用户鼠标的单击操作，除了【单击】还有【双击】<code>dblclick</code></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 双击事件类型\n  btn.addEventListener(&#39;dblclick&#39;, function () &#123;\n    console.log(&#39;等待事件被触发...&#39;);\n    &#x2F;&#x2F; 改变 p 标签的文字颜色\n    const text &#x3D; document.querySelector(&#39;.text&#39;)\n    text.style.color &#x3D; &#39;red&#39;\n  &#125;)\n\n  &#x2F;&#x2F; 只要用户双击击了按钮，事件便触发了！！！\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>结论：【事件类型】决定了事件被触发的方式，如 <code>click</code> 代表鼠标单击，<code>dblclick</code> 代表鼠标双击。</p>\n<h4 id=\"事件处理程序\"><a href=\"#事件处理程序\" class=\"headerlink\" title=\"事件处理程序\"></a>事件处理程序</h4><p><code>addEventListener</code> 的第2个参数是函数，这个函数会在事件被触发时立即被调用，在这个函数中可以编写任意逻辑的代码，如改变 DOM 文本颜色、文本内容等。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 双击事件类型\n  btn.addEventListener(&#39;dblclick&#39;, function () &#123;\n    console.log(&#39;等待事件被触发...&#39;)\n    \n    const text &#x3D; document.querySelector(&#39;.text&#39;)\n    &#x2F;&#x2F; 改变 p 标签的文字颜色\n    text.style.color &#x3D; &#39;red&#39;\n    &#x2F;&#x2F; 改变 p 标签的文本内容\n    text.style.fontSize &#x3D; &#39;20px&#39;\n  &#125;)\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>结论：【事件处理程序】决定了事件触发后应该执行的逻辑。</p>\n<h3 id=\"事件类型-1\"><a href=\"#事件类型-1\" class=\"headerlink\" title=\"事件类型\"></a>事件类型</h3><p>将众多的事件类型分类可分为：鼠标事件、键盘事件、表单事件、焦点事件等，我们逐一展开学习。</p>\n<h4 id=\"鼠标事件\"><a href=\"#鼠标事件\" class=\"headerlink\" title=\"鼠标事件\"></a>鼠标事件</h4><p>鼠标事件是指跟鼠标操作相关的事件，如单击、双击、移动等。</p>\n<ol>\n<li>&#96;mouseenter 监听鼠标是否移入 DOM 元素</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;h3&gt;鼠标事件&lt;&#x2F;h3&gt;\n  &lt;p&gt;监听与鼠标相关的操作&lt;&#x2F;p&gt;\n  &lt;hr&gt;\n  &lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 需要事件监听的 DOM 元素\n    const box &#x3D; document.querySelector(&#39;.box&#39;);\n\n    &#x2F;&#x2F; 监听鼠标是移入当前 DOM 元素\n    box.addEventListener(&#39;mouseenter&#39;, function () &#123;\n      &#x2F;&#x2F; 修改文本内容\n      this.innerText &#x3D; &#39;鼠标移入了...&#39;;\n      &#x2F;&#x2F; 修改光标的风格\n      this.style.cursor &#x3D; &#39;move&#39;;\n    &#125;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<ol>\n<li>&#96;mouseleave 监听鼠标是否移出 DOM 元素</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;h3&gt;鼠标事件&lt;&#x2F;h3&gt;\n  &lt;p&gt;监听与鼠标相关的操作&lt;&#x2F;p&gt;\n  &lt;hr&gt;\n  &lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 需要事件监听的 DOM 元素\n    const box &#x3D; document.querySelector(&#39;.box&#39;);\n\n    &#x2F;&#x2F; 监听鼠标是移出当前 DOM 元素\n    box.addEventListener(&#39;mouseleave&#39;, function () &#123;\n      &#x2F;&#x2F; 修改文本内容\n      this.innerText &#x3D; &#39;鼠标移出了...&#39;;\n    &#125;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<h4 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a>键盘事件</h4><p>keydown   键盘按下触发<br>keyup   键盘抬起触发</p>\n<h4 id=\"焦点事件\"><a href=\"#焦点事件\" class=\"headerlink\" title=\"焦点事件\"></a>焦点事件</h4><p>focus  获得焦点</p>\n<p>blur 失去焦点</p>\n<h4 id=\"文本框输入事件\"><a href=\"#文本框输入事件\" class=\"headerlink\" title=\"文本框输入事件\"></a>文本框输入事件</h4><p>input  </p>\n<h3 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h3><p>任意事件类型被触发时与事件相关的信息会被以对象的形式记录下来，我们称这个对象为事件对象。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;h3&gt;事件对象&lt;&#x2F;h3&gt;\n  &lt;p&gt;任意事件类型被触发时与事件相关的信息会被以对象的形式记录下来，我们称这个对象为事件对象。&lt;&#x2F;p&gt;\n  &lt;hr&gt;\n  &lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 获取 .box 元素\n    const box &#x3D; document.querySelector(&#39;.box&#39;)\n\n    &#x2F;&#x2F; 添加事件监听\n    box.addEventListener(&#39;click&#39;, function (e) &#123;\n      console.log(&#39;任意事件类型被触发后，相关信息会以对象形式被记录下来...&#39;);\n\n      &#x2F;&#x2F; 事件回调函数的第1个参数即所谓的事件对象\n      console.log(e)\n    &#125;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>事件回调函数的【第1个参数】即所谓的事件对象，通常习惯性的将这个对数命名为 <code>event</code>、<code>ev</code> 、<code>ev</code> 。</p>\n<p>接下来简单看一下事件对象中包含了哪些有用的信息：</p>\n<ol>\n<li><code>ev.type</code> 当前事件的类型</li>\n<li><code>ev.clientX/Y</code> 光标相对浏览器窗口的位置</li>\n<li><code>ev.offsetX/Y</code> 光标相于当前 DOM 元素的位置</li>\n</ol>\n<p>注：在事件回调函数内部通过 window.event 同样可以获取事件对象。</p>\n<h3 id=\"环境对象\"><a href=\"#环境对象\" class=\"headerlink\" title=\"环境对象\"></a>环境对象</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>能够分析判断函数运行在不同环境中 this 所指代的对象。</p></blockquote>\n<p>环境对象指的是函数内部特殊的变量 <code>this</code> ，它代表着当前函数运行时所处的环境。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 声明函数\n  function sayHi() &#123;\n    &#x2F;&#x2F; this 是一个变量\n    console.log(this);\n  &#125;\n\n  &#x2F;&#x2F; 声明一个对象\n  let user &#x3D; &#123;\n    name: &#39;张三&#39;,\n    sayHi: sayHi &#x2F;&#x2F; 此处把 sayHi 函数，赋值给 sayHi 属性\n  &#125;\n  \n  let person &#x3D; &#123;\n    name: &#39;李四&#39;,\n    sayHi: sayHi\n  &#125;\n\n  &#x2F;&#x2F; 直接调用\n  sayHi() &#x2F;&#x2F; window\n  window.sayHi() &#x2F;&#x2F; window\n\n  &#x2F;&#x2F; 做为对象方法调用\n  user.sayHi()&#x2F;&#x2F; user\n\tperson.sayHi()&#x2F;&#x2F; person\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>结论：</p>\n<ol>\n<li><code>this</code> 本质上是一个变量，数据类型为对象</li>\n<li>函数的调用方式不同 <code>this</code> 变量的值也不同</li>\n<li>【谁调用 <code>this</code> 就是谁】是判断 <code>this</code> 值的粗略规则</li>\n<li>函数直接调用时实际上 <code>window.sayHi()</code> 所以 <code>this</code> 的值为 <code>window</code></li>\n</ol>\n<h3 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h3><p>如果将函数 A 做为参数传递给函数 B 时，我们称函数 A 为回调函数。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 声明 foo 函数\n  function foo(arg) &#123;\n    console.log(arg);\n  &#125;\n\n  &#x2F;&#x2F; 普通的值做为参数\n  foo(10);\n  foo(&#39;hello world!&#39;);\n  foo([&#39;html&#39;, &#39;css&#39;, &#39;javascript&#39;]);\n\n  function bar() &#123;\n    console.log(&#39;函数也能当参数...&#39;);\n  &#125;\n  &#x2F;&#x2F; 函数也可以做为参数！！！！\n  foo(bar);\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>函数 <code>bar</code> 做参数传给了 <code>foo</code> 函数，<code>bar</code> 就是所谓的回调函数了！！！</p>\n<p>我们回顾一下间歇函数 <code>setInterval</code> </p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n\tfunction fn() &#123;\n    console.log(&#39;我是回调函数...&#39;);\n  &#125;\n  &#x2F;&#x2F; 调用定时器\n  setInterval(fn, 1000);\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><code>fn</code> 函数做为参数传给了 <code>setInterval</code> ，这便是回调函数的实际应用了，结合刚刚学习的函数表达式上述代码还有另一种更常见写法。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 调用定时器，匿名函数做为参数\n  setInterval(function () &#123;\n    console.log(&#39;我是回调函数...&#39;);\n  &#125;, 1000);\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>结论：</p>\n<ol>\n<li>回调函数本质还是函数，只不过把它当成参数使用</li>\n<li>使用匿名函数做为回调函数比较常见</li>\n</ol>\n<h2 id=\"Web-APIs-第3天笔记\"><a href=\"#Web-APIs-第3天笔记\" class=\"headerlink\" title=\"Web APIs - 第3天笔记\"></a>Web APIs - 第3天笔记</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>进一步学习 事件进阶，实现更多交互的网页特效，结合事件流的特征优化事件执行的效率</p></blockquote>\n<ul>\n<li>掌握阻止事件冒泡的方法</li>\n<li>理解事件委托的实现原理</li>\n</ul>\n<h3 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h3><p>事件流是对事件执行过程的描述，了解事件的执行过程有助于加深对事件的理解，提升开发实践中对事件运用的灵活度。</p>\n<p><img src=\"/images/Web-APIs/assets%5Cevent.png\" alt=\"event\"></p>\n<p>如上图所示，任意事件被触发时总会经历两个阶段：【捕获阶段】和【冒泡阶段】。</p>\n<p>简言之，捕获阶段是【从父到子】的传导过程，冒泡阶段是【从子向父】的传导过程。</p>\n<h4 id=\"捕获和冒泡\"><a href=\"#捕获和冒泡\" class=\"headerlink\" title=\"捕获和冒泡\"></a>捕获和冒泡</h4><p>了解了什么是事件流之后，我们来看事件流是如何影响事件执行的：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;h3&gt;事件流&lt;&#x2F;h3&gt;\n  &lt;p&gt;事件流是事件在执行时的底层机制，主要体现在父子盒子之间事件的执行上。&lt;&#x2F;p&gt;\n  &lt;div class&#x3D;&quot;outer&quot;&gt;\n    &lt;div class&#x3D;&quot;inner&quot;&gt;\n      &lt;div class&#x3D;&quot;child&quot;&gt;&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 获取嵌套的3个节点\n    const outer &#x3D; document.querySelector(&#39;.outer&#39;);\n    const inner &#x3D; document.querySelector(&#39;.inner&#39;);\n    const child &#x3D; document.querySelector(&#39;.child&#39;);\n\t\t\n    &#x2F;&#x2F; html 元素添加事件\n    document.documentElement.addEventListener(&#39;click&#39;, function () &#123;\n      console.log(&#39;html...&#39;)\n    &#125;)\n\t\t\n    &#x2F;&#x2F; body 元素添加事件\n    document.body.addEventListener(&#39;click&#39;, function () &#123;\n      console.log(&#39;body...&#39;)\n    &#125;)\n\n    &#x2F;&#x2F; 外层的盒子添加事件\n    outer.addEventListener(&#39;click&#39;, function () &#123;\n      console.log(&#39;outer...&#39;)\n    &#125;)\n    \n    &#x2F;&#x2F; 中间的盒子添加事件\n    outer.addEventListener(&#39;click&#39;, function () &#123;\n      console.log(&#39;inner...&#39;)\n    &#125;)\n    \n    &#x2F;&#x2F; 内层的盒子添加事件\n    outer.addEventListener(&#39;click&#39;, function () &#123;\n      console.log(&#39;child...&#39;)\n    &#125;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>执行上述代码后发现，当单击事件触发时，其祖先元素的单击事件也【相继触发】，这是为什么呢？</p>\n<p>结合事件流的特征，我们知道当某个元素的事件被触发时，事件总是会先经过其祖先才能到达当前元素，然后再由当前元素向祖先传递，事件在流动的过程中遇到相同的事件便会被触发。</p>\n<p>再来关注一个细节就是事件相继触发的【执行顺序】，事件的执行顺序是可控制的，即可以在捕获阶段被执行，也可以在冒泡阶段被执行。</p>\n<p>如果事件是在冒泡阶段执行的，我们称为冒泡模式，它会先执行子盒子事件再去执行父盒子事件，默认是冒泡模式。</p>\n<p>如果事件是在捕获阶段执行的，我们称为捕获模式，它会先执行父盒子事件再去执行子盒子事件。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;h3&gt;事件流&lt;&#x2F;h3&gt;\n  &lt;p&gt;事件流是事件在执行时的底层机制，主要体现在父子盒子之间事件的执行上。&lt;&#x2F;p&gt;\n  &lt;div class&#x3D;&quot;outer&quot;&gt;\n    &lt;div class&#x3D;&quot;inner&quot;&gt;&lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 获取嵌套的3个节点\n    const outer &#x3D; document.querySelector(&#39;.outer&#39;)\n    const inner &#x3D; document.querySelector(&#39;.inner&#39;)\n\n    &#x2F;&#x2F; 外层的盒子\n    outer.addEventListener(&#39;click&#39;, function () &#123;\n      console.log(&#39;outer...&#39;)\n    &#125;, true) &#x2F;&#x2F; true 表示在捕获阶段执行事件\n    \n    &#x2F;&#x2F; 中间的盒子\n    outer.addEventListener(&#39;click&#39;, function () &#123;\n      console.log(&#39;inner...&#39;)\n    &#125;, true)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>结论：</p>\n<ol>\n<li><code>addEventListener</code> 第3个参数决定了事件是在捕获阶段触发还是在冒泡阶段触发</li>\n<li><code>addEventListener</code> 第3个参数为  <code>true</code> 表示捕获阶段触发，<code>false</code> 表示冒泡阶段触发，默认值为 <code>false</code></li>\n<li>事件流只会在父子元素具有相同事件类型时才会产生影响</li>\n<li>绝大部分场景都采用默认的冒泡模式（其中一个原因是早期 IE 不支持捕获）</li>\n</ol>\n<h4 id=\"阻止冒泡\"><a href=\"#阻止冒泡\" class=\"headerlink\" title=\"阻止冒泡\"></a>阻止冒泡</h4><p>阻止冒泡是指阻断事件的流动，保证事件只在当前元素被执行，而不再去影响到其对应的祖先元素。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;h3&gt;阻止冒泡&lt;&#x2F;h3&gt;\n  &lt;p&gt;阻止冒泡是指阻断事件的流动，保证事件只在当前元素被执行，而不再去影响到其对应的祖先元素。&lt;&#x2F;p&gt;\n  &lt;div class&#x3D;&quot;outer&quot;&gt;\n    &lt;div class&#x3D;&quot;inner&quot;&gt;\n      &lt;div class&#x3D;&quot;child&quot;&gt;&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 获取嵌套的3个节点\n    const outer &#x3D; document.querySelector(&#39;.outer&#39;)\n    const inner &#x3D; document.querySelector(&#39;.inner&#39;)\n    const child &#x3D; document.querySelector(&#39;.child&#39;)\n\n    &#x2F;&#x2F; 外层的盒子\n    outer.addEventListener(&#39;click&#39;, function () &#123;\n      console.log(&#39;outer...&#39;)\n    &#125;)\n\n    &#x2F;&#x2F; 中间的盒子\n    inner.addEventListener(&#39;click&#39;, function (ev) &#123;\n      console.log(&#39;inner...&#39;)\n\n      &#x2F;&#x2F; 阻止事件冒泡\n      ev.stopPropagation()\n    &#125;)\n\n    &#x2F;&#x2F; 内层的盒子\n    child.addEventListener(&#39;click&#39;, function (ev) &#123;\n      console.log(&#39;child...&#39;)\n\n      &#x2F;&#x2F; 借助事件对象，阻止事件向上冒泡\n      ev.stopPropagation()\n    &#125;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>结论：事件对象中的 <code>ev.stopPropagation</code> 方法，专门用来阻止事件冒泡。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>鼠标经过事件：</p>\n<p>mouseover 和 mouseout 会有冒泡效果</p>\n<p>mouseenter  和 mouseleave   没有冒泡效果 (推荐)</p></blockquote>\n<h3 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h3><p>事件委托是利用事件流的特征解决一些现实开发需求的知识技巧，主要的作用是提升程序效率。</p>\n<p>大量的事件监听是比较耗费性能的，如下代码所示</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 假设页面中有 10000 个 button 元素\n  const buttons &#x3D; document.querySelectorAll(&#39;table button&#39;);\n\n  for(let i &#x3D; 0; i &lt;&#x3D; buttons.length; i++) &#123;\n    &#x2F;&#x2F; 为 10000 个 button 元素添加了事件\n    buttons.addEventListener(&#39;click&#39;, function () &#123;\n      &#x2F;&#x2F; 省略具体执行逻辑...\n    &#125;)\n  &#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>利用事件流的特征，可以对上述的代码进行优化，事件的的冒泡模式总是会将事件流向其父元素的，如果父元素监听了相同的事件类型，那么父元素的事件就会被触发并执行，正是利用这一特征对上述代码进行优化，如下代码所示：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 假设页面中有 10000 个 button 元素\n  let buttons &#x3D; document.querySelectorAll(&#39;table button&#39;);\n  \n  &#x2F;&#x2F; 假设上述的 10000 个 buttom 元素共同的祖先元素是 table\n  let parents &#x3D; document.querySelector(&#39;table&#39;);\n  parents.addEventListener(&#39;click&#39;, function () &#123;\n    console.log(&#39;点击任意子元素都会触发事件...&#39;);\n  &#125;)\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>我们的最终目的是保证只有点击 button 子元素才去执行事件的回调函数，如何判断用户点击是哪一个子元素呢？</p>\n<p><img src=\"/images/Web-APIs/assets%5Cevent.png\" alt=\"event\"></p>\n<p>事件对象中的属性 <code>target</code> 或 <code>srcElement</code>属性表示真正触发事件的元素，它是一个元素类型的节点。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 假设页面中有 10000 个 button 元素\n  const buttons &#x3D; document.querySelectorAll(&#39;table button&#39;)\n  \n  &#x2F;&#x2F; 假设上述的 10000 个 buttom 元素共同的祖先元素是 table\n  const parents &#x3D; document.querySelector(&#39;table&#39;)\n  parents.addEventListener(&#39;click&#39;, function (ev) &#123;\n    &#x2F;&#x2F; console.log(ev.target);\n    &#x2F;&#x2F; 只有 button 元素才会真正去执行逻辑\n    if(ev.target.tagName &#x3D;&#x3D;&#x3D; &#39;BUTTON&#39;) &#123;\n      &#x2F;&#x2F; 执行的逻辑\n    &#125;\n  &#125;)\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>优化过的代码只对祖先元素添加事件监听，相比对 10000 个元素添加事件监听执行效率要高许多！！！</p>\n<h3 id=\"其他事件\"><a href=\"#其他事件\" class=\"headerlink\" title=\"其他事件\"></a>其他事件</h3><h4 id=\"页面加载事件\"><a href=\"#页面加载事件\" class=\"headerlink\" title=\"页面加载事件\"></a>页面加载事件</h4><p>加载外部资源（如图片、外联CSS和JavaScript等）加载完毕时触发的事件</p>\n<p>有些时候需要等页面资源全部处理完了做一些事情</p>\n<p><strong>事件名：load</strong></p>\n<p>监听页面所有资源加载完毕：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window.addEventListener(&#39;load&#39;, function() &#123;\n    &#x2F;&#x2F; xxxxx\n&#125;)</code></pre>\n\n<h4 id=\"元素滚动事件\"><a href=\"#元素滚动事件\" class=\"headerlink\" title=\"元素滚动事件\"></a>元素滚动事件</h4><p>滚动条在滚动的时候持续触发的事件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window.addEventListener(&#39;scroll&#39;, function() &#123;\n    &#x2F;&#x2F; xxxxx\n&#125;)</code></pre>\n\n<h4 id=\"页面尺寸事件\"><a href=\"#页面尺寸事件\" class=\"headerlink\" title=\"页面尺寸事件\"></a>页面尺寸事件</h4><p>会在窗口尺寸改变的时候触发事件：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window.addEventListener(&#39;resize&#39;, function() &#123;\n    &#x2F;&#x2F; xxxxx\n&#125;)</code></pre>\n\n<h3 id=\"元素尺寸与位置\"><a href=\"#元素尺寸与位置\" class=\"headerlink\" title=\"元素尺寸与位置\"></a>元素尺寸与位置</h3><p>获取元素的自身宽高、包含元素自身设置的宽高、padding、border</p>\n<p>offsetWidth和offsetHeight  </p>\n<p>获取出来的是数值,方便计算</p>\n<p>注意: 获取的是可视宽高, 如果盒子是隐藏的,获取的结果是0</p>\n<h2 id=\"Web-APIs-第4天笔记\"><a href=\"#Web-APIs-第4天笔记\" class=\"headerlink\" title=\"Web APIs - 第4天笔记\"></a>Web APIs - 第4天笔记</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>进一步学习 DOM 相关知识，实现可交互的网页特效</p></blockquote>\n<ul>\n<li>能够插入、删除和替换元素节点</li>\n<li>能够依据元素节点关系查找节点</li>\n</ul>\n<h3 id=\"日期对象\"><a href=\"#日期对象\" class=\"headerlink\" title=\"日期对象\"></a>日期对象</h3><p>掌握 Date 日期对象的使用，动态获取当前计算机的时间。</p>\n<p>ECMAScript 中内置了获取系统时间的对象 Date，使用 Date 时与之前学习的内置对象 console 和 Math 不同，它需要借助 new 关键字才能使用。</p>\n<h4 id=\"实例化\"><a href=\"#实例化\" class=\"headerlink\" title=\"实例化\"></a>实例化</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 1. 实例化\n&#x2F;&#x2F; const date &#x3D; new Date(); &#x2F;&#x2F; 系统默认时间\nconst date &#x3D; new Date(&#39;2020-05-01&#39;) &#x2F;&#x2F; 指定时间\n&#x2F;&#x2F; date 变量即所谓的时间对象\n\nconsole.log(typeof date)\n\n\n</code></pre>\n\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4> <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> &#x2F;&#x2F; 1. 实例化\nconst date &#x3D; new Date();\n&#x2F;&#x2F; 2. 调用时间对象方法\n&#x2F;&#x2F; 通过方法分别获取年、月、日，时、分、秒\nconst year &#x3D; date.getFullYear(); &#x2F;&#x2F; 四位年份\nconst month &#x3D; date.getMonth(); &#x2F;&#x2F; 0 ~ 11</code></pre>\n\n\n<p>getFullYear 获取四位年份</p>\n<p>getMonth 获取月份，取值为 0 ~ 11</p>\n<p>getDate 获取月份中的每一天，不同月份取值也不相同</p>\n<p>getDay 获取星期，取值为 0 ~ 6</p>\n<p>getHours 获取小时，取值为 0 ~ 23</p>\n<p>getMinutes 获取分钟，取值为 0 ~ 59</p>\n<p>getSeconds 获取秒，取值为 0 ~ 59</p>\n<h4 id=\"时间戳\"><a href=\"#时间戳\" class=\"headerlink\" title=\"时间戳\"></a>时间戳</h4><p>时间戳是指1970年01月01日00时00分00秒起至现在的总秒数或毫秒数，它是一种特殊的计量时间的方式。</p>\n<p>注：ECMAScript 中时间戳是以毫秒计的。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">    &#x2F;&#x2F; 1. 实例化\n  const date &#x3D; new Date()\n  &#x2F;&#x2F; 2. 获取时间戳\n  console.log(date.getTime())\n&#x2F;&#x2F; 还有一种获取时间戳的方法\n  console.log(+new Date())\n  &#x2F;&#x2F; 还有一种获取时间戳的方法\n  console.log(Date.now())\n</code></pre>\n\n\n<p>获取时间戳的方法，分别为 getTime 和 Date.now 和  +new Date()</p>\n<h3 id=\"DOM-节点-1\"><a href=\"#DOM-节点-1\" class=\"headerlink\" title=\"DOM 节点\"></a>DOM 节点</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>掌握元素节点创建、复制、插入、删除等操作的方法，能够依据元素节点的结构关系查找节点</p></blockquote>\n<p>回顾之前 DOM 的操作都是针对元素节点的属性或文本的，除此之外也有专门针对元素节点本身的操作，如插入、复制、删除、替换等。</p>\n<h4 id=\"插入节点\"><a href=\"#插入节点\" class=\"headerlink\" title=\"插入节点\"></a>插入节点</h4><p>在已有的 DOM 节点中插入新的 DOM 节点时，需要关注两个关键因素：首先要得到新的 DOM 节点，其次在哪个位置插入这个节点。</p>\n<p>如下代码演示：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;h3&gt;插入节点&lt;&#x2F;h3&gt;\n  &lt;p&gt;在现有 dom 结构基础上插入新的元素节点&lt;&#x2F;p&gt;\n  &lt;hr&gt;\n  &lt;!-- 普通盒子 --&gt;\n  &lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;\n  &lt;!-- 点击按钮向 box 盒子插入节点 --&gt;\n  &lt;button class&#x3D;&quot;btn&quot;&gt;插入节点&lt;&#x2F;button&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 点击按钮，在网页中插入节点\n    const btn &#x3D; document.querySelector(&#39;.btn&#39;)\n    btn.addEventListener(&#39;click&#39;, function () &#123;\n      &#x2F;&#x2F; 1. 获得一个 DOM 元素节点\n      const p &#x3D; document.createElement(&#39;p&#39;)\n      p.innerText &#x3D; &#39;创建的新的p标签&#39;\n      p.className &#x3D; &#39;info&#39;\n      \n      &#x2F;&#x2F; 复制原有的 DOM 节点\n      const p2 &#x3D; document.querySelector(&#39;p&#39;).cloneNode(true)\n      p2.style.color &#x3D; &#39;red&#39;\n\n      &#x2F;&#x2F; 2. 插入盒子 box 盒子\n      document.querySelector(&#39;.box&#39;).appendChild(p)\n      document.querySelector(&#39;.box&#39;).appendChild(p2)\n    &#125;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>结论：</p>\n<ul>\n<li><p><code>createElement</code> 动态创建任意 DOM 节点</p>\n</li>\n<li><p><code>cloneNode</code> 复制现有的 DOM 节点，传入参数 true 会复制所有子节点</p>\n</li>\n<li><p><code>appendChild</code> 在末尾（结束标签前）插入节点</p>\n</li>\n</ul>\n<p>再来看另一种情形的代码演示：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;h3&gt;插入节点&lt;&#x2F;h3&gt;\n  &lt;p&gt;在现有 dom 结构基础上插入新的元素节点&lt;&#x2F;p&gt;\n\t&lt;hr&gt;\n  &lt;button class&#x3D;&quot;btn1&quot;&gt;在任意节点前插入&lt;&#x2F;button&gt;\n  &lt;ul&gt;\n    &lt;li&gt;HTML&lt;&#x2F;li&gt;\n    &lt;li&gt;CSS&lt;&#x2F;li&gt;\n    &lt;li&gt;JavaScript&lt;&#x2F;li&gt;\n  &lt;&#x2F;ul&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 点击按钮，在已有 DOM 中插入新节点\n    const btn1 &#x3D; document.querySelector(&#39;.btn1&#39;)\n    btn1.addEventListener(&#39;click&#39;, function () &#123;\n\n      &#x2F;&#x2F; 第 2 个 li 元素\n      const relative &#x3D; document.querySelector(&#39;li:nth-child(2)&#39;)\n\n      &#x2F;&#x2F; 1. 动态创建新的节点\n      const li1 &#x3D; document.createElement(&#39;li&#39;)\n      li1.style.color &#x3D; &#39;red&#39;\n      li1.innerText &#x3D; &#39;Web APIs&#39;\n\n      &#x2F;&#x2F; 复制现有的节点\n      const li2 &#x3D; document.querySelector(&#39;li:first-child&#39;).cloneNode(true)\n      li2.style.color &#x3D; &#39;blue&#39;\n\n      &#x2F;&#x2F; 2. 在 relative 节点前插入\n      document.querySelector(&#39;ul&#39;).insertBefore(li1, relative)\n      document.querySelector(&#39;ul&#39;).insertBefore(li2, relative)\n    &#125;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>结论：</p>\n<ul>\n<li><p><code>createElement</code> 动态创建任意 DOM 节点</p>\n</li>\n<li><p><code>cloneNode</code> 复制现有的 DOM 节点，传入参数 true 会复制所有子节点</p>\n</li>\n<li><p><code>insertBefore</code> 在父节点中任意子节点之前插入新节点</p>\n</li>\n</ul>\n<h4 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h4><p>删除现有的 DOM 节点，也需要关注两个因素：首先由父节点删除子节点，其次是要删除哪个子节点。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;!-- 点击按钮删除节点 --&gt;\n  &lt;button&gt;删除节点&lt;&#x2F;button&gt;\n  &lt;ul&gt;\n    &lt;li&gt;HTML&lt;&#x2F;li&gt;\n    &lt;li&gt;CSS&lt;&#x2F;li&gt;\n    &lt;li&gt;Web APIs&lt;&#x2F;li&gt;\n  &lt;&#x2F;ul&gt;\n\n  &lt;script&gt;\n    const btn &#x3D; document.querySelector(&#39;button&#39;)\n    btn.addEventListener(&#39;click&#39;, function () &#123;\n      &#x2F;&#x2F; 获取 ul 父节点\n      let ul &#x3D; document.querySelector(&#39;ul&#39;)\n      &#x2F;&#x2F; 待删除的子节点\n      let lis &#x3D; document.querySelectorAll(&#39;li&#39;)\n\n      &#x2F;&#x2F; 删除节点\n      ul.removeChild(lis[0])\n    &#125;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>结论：<code>removeChild</code> 删除节点时一定是由父子关系。</p>\n<h3 id=\"查找节点\"><a href=\"#查找节点\" class=\"headerlink\" title=\"查找节点\"></a>查找节点</h3><p>DOM 树中的任意节点都不是孤立存在的，它们要么是父子关系，要么是兄弟关系，不仅如此，我们可以依据节点之间的关系查找节点。</p>\n<h4 id=\"父子关系\"><a href=\"#父子关系\" class=\"headerlink\" title=\"父子关系\"></a>父子关系</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;button class&#x3D;&quot;btn1&quot;&gt;所有的子节点&lt;&#x2F;button&gt;\n  &lt;!-- 获取 ul 的子节点 --&gt;\n  &lt;ul&gt;\n    &lt;li&gt;HTML&lt;&#x2F;li&gt;\n    &lt;li&gt;CSS&lt;&#x2F;li&gt;\n    &lt;li&gt;JavaScript 基础&lt;&#x2F;li&gt;\n    &lt;li&gt;Web APIs&lt;&#x2F;li&gt;\n  &lt;&#x2F;ul&gt;\n  &lt;script&gt;\n    const btn1 &#x3D; document.querySelector(&#39;.btn1&#39;)\n    btn1.addEventListener(&#39;click&#39;, function () &#123;\n      &#x2F;&#x2F; 父节点\n      const ul &#x3D; document.querySelector(&#39;ul&#39;)\n\n      &#x2F;&#x2F; 所有的子节点\n      console.log(ul.childNodes)\n      &#x2F;&#x2F; 只包含元素子节点\n      console.log(ul.children)\n    &#125;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>结论：</p>\n<ul>\n<li><code>childNodes</code> 获取全部的子节点，回车换行会被认为是空白文本节点</li>\n<li><code>children</code> 只获取元素类型节点</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;table&gt;\n    &lt;tr&gt;\n      &lt;td width&#x3D;&quot;60&quot;&gt;序号&lt;&#x2F;td&gt;\n      &lt;td&gt;课程名&lt;&#x2F;td&gt;\n      &lt;td&gt;难度&lt;&#x2F;td&gt;\n      &lt;td width&#x3D;&quot;80&quot;&gt;操作&lt;&#x2F;td&gt;\n    &lt;&#x2F;tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;1&lt;&#x2F;td&gt;\n      &lt;td&gt;&lt;span&gt;HTML&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;\n      &lt;td&gt;初级&lt;&#x2F;td&gt;\n      &lt;td&gt;&lt;button&gt;变色&lt;&#x2F;button&gt;&lt;&#x2F;td&gt;\n    &lt;&#x2F;tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;2&lt;&#x2F;td&gt;\n      &lt;td&gt;&lt;span&gt;CSS&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;\n      &lt;td&gt;初级&lt;&#x2F;td&gt;\n      &lt;td&gt;&lt;button&gt;变色&lt;&#x2F;button&gt;&lt;&#x2F;td&gt;\n    &lt;&#x2F;tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;3&lt;&#x2F;td&gt;\n      &lt;td&gt;&lt;span&gt;Web APIs&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;\n      &lt;td&gt;中级&lt;&#x2F;td&gt;\n      &lt;td&gt;&lt;button&gt;变色&lt;&#x2F;button&gt;&lt;&#x2F;td&gt;\n    &lt;&#x2F;tr&gt;\n  &lt;&#x2F;table&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 获取所有 button 节点，并添加事件监听\n    const buttons &#x3D; document.querySelectorAll(&#39;table button&#39;)\n    for(let i &#x3D; 0; i &lt; buttons.length; i++) &#123;\n      buttons[i].addEventListener(&#39;click&#39;, function () &#123;\n        &#x2F;&#x2F; console.log(this.parentNode); &#x2F;&#x2F; 父节点 td\n        &#x2F;&#x2F; console.log(this.parentNode.parentNode); &#x2F;&#x2F; 爷爷节点 tr\n        this.parentNode.parentNode.style.color &#x3D; &#39;red&#39;\n      &#125;)\n    &#125;\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>结论：<code>parentNode</code> 获取父节点，以相对位置查找节点，实际应用中非常灵活。</p>\n<h4 id=\"兄弟关系\"><a href=\"#兄弟关系\" class=\"headerlink\" title=\"兄弟关系\"></a>兄弟关系</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;ul&gt;\n    &lt;li&gt;HTML&lt;&#x2F;li&gt;\n    &lt;li&gt;CSS&lt;&#x2F;li&gt;\n    &lt;li&gt;JavaScript 基础&lt;&#x2F;li&gt;\n    &lt;li&gt;Web APIs&lt;&#x2F;li&gt;\n  &lt;&#x2F;ul&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 获取所有 li 节点\n    const lis &#x3D; document.querySelectorAll(&#39;ul li&#39;)\n\n    &#x2F;&#x2F; 对所有的 li 节点添加事件监听\n    for(let i &#x3D; 0; i &lt; lis.length; i++) &#123;\n      lis[i].addEventListener(&#39;click&#39;, function () &#123;\n        &#x2F;&#x2F; 前一个节点\n        console.log(this.previousSibling)\n        &#x2F;&#x2F; 下一下节点\n        console.log(this.nextSibling)\n      &#125;)\n    &#125;\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>结论：</p>\n<ul>\n<li><code>previousSibling</code> 获取前一个节点，以相对位置查找节点，实际应用中非常灵活。</li>\n<li><code>nextSibling</code> 获取后一个节点，以相对位置查找节点，实际应用中非常灵活。</li>\n</ul>\n<h2 id=\"Web-APIs-第5天笔记\"><a href=\"#Web-APIs-第5天笔记\" class=\"headerlink\" title=\"Web APIs - 第5天笔记\"></a>Web APIs - 第5天笔记</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>目标： 能够利用JS操作浏览器,具备利用本地存储实现学生就业表的能力</p></blockquote>\n<ul>\n<li>BOM操作</li>\n<li>综合案例</li>\n</ul>\n<h3 id=\"js组成\"><a href=\"#js组成\" class=\"headerlink\" title=\"js组成\"></a>js组成</h3><p>JavaScript的组成</p>\n<ul>\n<li><p>ECMAScript:</p>\n<ul>\n<li>规定了js基础语法核心知识。</li>\n<li>比如：变量、分支语句、循环语句、对象等等</li>\n</ul>\n</li>\n<li><p>Web APIs :</p>\n<ul>\n<li>DOM   文档对象模型， 定义了一套操作HTML文档的API</li>\n<li>BOM   浏览器对象模型，定义了一套操作浏览器窗口的API</li>\n</ul>\n</li>\n</ul>\n<p> <img src=\"/images/Web-APIs/assets%5C1676047389456.png\" alt=\"67604738945\"></p>\n<h3 id=\"window对象\"><a href=\"#window对象\" class=\"headerlink\" title=\"window对象\"></a>window对象</h3><p><strong>BOM</strong> (Browser Object Model ) 是浏览器对象模型</p>\n<ul>\n<li>window对象是一个全局对象，也可以说是JavaScript中的顶级对象</li>\n<li>像document、alert()、console.log()这些都是window的属性，基本BOM的属性和方法都是window的</li>\n<li>所有通过var定义在全局作用域中的变量、函数都会变成window对象的属性和方法</li>\n<li>window对象下的属性和方法调用的时候可以省略window</li>\n</ul>\n<p> <img src=\"/images/Web-APIs/assets%5C1676047436362.png\" alt=\"67604743636\"></p>\n<h3 id=\"定时器-延迟函数\"><a href=\"#定时器-延迟函数\" class=\"headerlink\" title=\"定时器-延迟函数\"></a>定时器-延迟函数</h3><p>JavaScript 内置的一个用来让代码延迟执行的函数，叫 setTimeout</p>\n<p><strong>语法：</strong></p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">setTimeout(回调函数, 延迟时间)</code></pre>\n\n<p>setTimeout 仅仅只执行一次，所以可以理解为就是把一段代码延迟执行, 平时省略window</p>\n<p>间歇函数 setInterval : 每隔一段时间就执行一次， , 平时省略window</p>\n<p>清除延时函数：</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">clearTimeout(timerId)</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意点</p>\n<ol>\n<li>延时函数需要等待,所以后面的代码先执行</li>\n<li>返回值是一个正整数，表示定时器的编号</li>\n</ol></blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 定时器之延迟函数\n\n    &#x2F;&#x2F; 1. 开启延迟函数\n    let timerId &#x3D; setTimeout(function () &#123;\n      console.log(&#39;我只执行一次&#39;)\n    &#125;, 3000)\n\n    &#x2F;&#x2F; 1.1 延迟函数返回的还是一个正整数数字，表示延迟函数的编号\n    console.log(timerId)\n\n    &#x2F;&#x2F; 1.2 延迟函数需要等待时间，所以下面的代码优先执行\n\n    &#x2F;&#x2F; 2. 关闭延迟函数\n    clearTimeout(timerId)\n\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<h3 id=\"location对象\"><a href=\"#location对象\" class=\"headerlink\" title=\"location对象\"></a>location对象</h3><p>location (地址) 它拆分并保存了 URL 地址的各个组成部分， 它是一个对象</p>\n<table>\n<thead>\n<tr>\n<th>属性&#x2F;方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>href</td>\n<td>属性，获取完整的 URL 地址，赋值时用于地址的跳转</td>\n</tr>\n<tr>\n<td>search</td>\n<td>属性，获取地址中携带的参数，符号 ？后面部分</td>\n</tr>\n<tr>\n<td>hash</td>\n<td>属性，获取地址中的啥希值，符号 # 后面部分</td>\n</tr>\n<tr>\n<td>reload()</td>\n<td>方法，用来刷新当前页面，传入参数 true 时表示强制刷新</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;form&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;search&quot;&gt; &lt;button&gt;搜索&lt;&#x2F;button&gt;\n  &lt;&#x2F;form&gt;\n  &lt;a href&#x3D;&quot;#&#x2F;music&quot;&gt;音乐&lt;&#x2F;a&gt;\n  &lt;a href&#x3D;&quot;#&#x2F;download&quot;&gt;下载&lt;&#x2F;a&gt;\n\n  &lt;button class&#x3D;&quot;reload&quot;&gt;刷新页面&lt;&#x2F;button&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; location 对象  \n    &#x2F;&#x2F; 1. href属性 （重点） 得到完整地址，赋值则是跳转到新地址\n    console.log(location.href)\n    &#x2F;&#x2F; location.href &#x3D; &#39;http:&#x2F;&#x2F;www.itcast.cn&#39;\n\n    &#x2F;&#x2F; 2. search属性  得到 ? 后面的地址 \n    console.log(location.search)  &#x2F;&#x2F; ?search&#x3D;笔记本\n\n    &#x2F;&#x2F; 3. hash属性  得到 # 后面的地址\n    console.log(location.hash)\n\n    &#x2F;&#x2F; 4. reload 方法  刷新页面\n    const btn &#x3D; document.querySelector(&#39;.reload&#39;)\n    btn.addEventListener(&#39;click&#39;, function () &#123;\n      &#x2F;&#x2F; location.reload() &#x2F;&#x2F; 页面刷新\n      location.reload(true) &#x2F;&#x2F; 强制页面刷新 ctrl+f5\n    &#125;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<h3 id=\"navigator对象\"><a href=\"#navigator对象\" class=\"headerlink\" title=\"navigator对象\"></a>navigator对象</h3><p>navigator是对象，该对象下记录了浏览器自身的相关信息</p>\n<p>常用属性和方法：</p>\n<ul>\n<li>通过 userAgent 检测浏览器的版本及平台</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 检测 userAgent（浏览器信息）\n(function () &#123;\n  const userAgent &#x3D; navigator.userAgent\n  &#x2F;&#x2F; 验证是否为Android或iPhone\n  const android &#x3D; userAgent.match(&#x2F;(Android);?[\\s\\&#x2F;]+([\\d.]+)?&#x2F;)\n  const iphone &#x3D; userAgent.match(&#x2F;(iPhone\\sOS)\\s([\\d_]+)&#x2F;)\n  &#x2F;&#x2F; 如果是Android或iPhone，则跳转至移动站点\n  if (android || iphone) &#123;\n    location.href &#x3D; &#39;http:&#x2F;&#x2F;m.itcast.cn&#39;\n  &#125;&#125;)();</code></pre>\n\n<h3 id=\"histroy对象\"><a href=\"#histroy对象\" class=\"headerlink\" title=\"histroy对象\"></a>histroy对象</h3><p>history (历史)是对象，主要管理历史记录， 该对象与浏览器地址栏的操作相对应，如前进、后退等</p>\n<p><strong>使用场景</strong></p>\n<p>history对象一般在实际开发中比较少用，但是会在一些OA 办公系统中见到。</p>\n<p> <img src=\"/images/Web-APIs/assets%5C1676047834796.png\" alt=\"67604783479\"></p>\n<p>常见方法：</p>\n<p> <img src=\"/images/Web-APIs/assets%5C1676047846593.png\" alt=\"67604784659\"></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;button class&#x3D;&quot;back&quot;&gt;←后退&lt;&#x2F;button&gt;\n  &lt;button class&#x3D;&quot;forward&quot;&gt;前进→&lt;&#x2F;button&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; histroy对象\n\n    &#x2F;&#x2F; 1.前进\n    const forward &#x3D; document.querySelector(&#39;.forward&#39;)\n    forward.addEventListener(&#39;click&#39;, function () &#123;\n      &#x2F;&#x2F; history.forward() \n      history.go(1)\n    &#125;)\n    &#x2F;&#x2F; 2.后退\n    const back &#x3D; document.querySelector(&#39;.back&#39;)\n    back.addEventListener(&#39;click&#39;, function () &#123;\n      &#x2F;&#x2F; history.back()\n      history.go(-1)\n    &#125;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n</code></pre>\n\n<h3 id=\"本地存储（今日重点）\"><a href=\"#本地存储（今日重点）\" class=\"headerlink\" title=\"本地存储（今日重点）\"></a>本地存储（今日重点）</h3><p>本地存储：将数据存储在本地浏览器中</p>\n<p>常见的使用场景：</p>\n<p><a href=\"https://todomvc.com/examples/vanilla-es6/\">https://todomvc.com/examples/vanilla-es6/</a>    页面刷新数据不丢失</p>\n<p>好处：</p>\n<p>1、页面刷新或者关闭不丢失数据，实现数据持久化</p>\n<p>2、容量较大，sessionStorage和 localStorage 约 5M 左右</p>\n<h4 id=\"localStorage（重点）\"><a href=\"#localStorage（重点）\" class=\"headerlink\" title=\"localStorage（重点）\"></a>localStorage（重点）</h4><p><strong>作用:</strong> 数据可以长期保留在本地浏览器中，刷新页面和关闭页面，数据也不会丢失</p>\n<p><strong>特性：</strong>以键值对的形式存储，并且存储的是字符串， 省略了window</p>\n<p><img src=\"/images/Web-APIs/assets%5C1676049635087.png\" alt=\"67604963508\"></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;\n  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n  &lt;title&gt;本地存储-localstorage&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n\n&lt;body&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 本地存储 - localstorage 存储的是字符串 \n    &#x2F;&#x2F; 1. 存储\n    localStorage.setItem(&#39;age&#39;, 18)\n\n    &#x2F;&#x2F; 2. 获取\n    console.log(typeof localStorage.getItem(&#39;age&#39;))\n\n    &#x2F;&#x2F; 3. 删除\n    localStorage.removeItem(&#39;age&#39;)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n\n&lt;&#x2F;html&gt;</code></pre>\n\n<h4 id=\"sessionStorage（了解）\"><a href=\"#sessionStorage（了解）\" class=\"headerlink\" title=\"sessionStorage（了解）\"></a>sessionStorage（了解）</h4><p>特性：</p>\n<ul>\n<li>用法跟localStorage基本相同</li>\n<li>区别是：当页面浏览器被关闭时，存储在 sessionStorage 的数据会被清除</li>\n</ul>\n<p>存储：sessionStorage.setItem(key,value)</p>\n<p>获取：sessionStorage.getItem(key)</p>\n<p>删除：sessionStorage.removeItem(key)</p>\n<h4 id=\"localStorage-存储复杂数据类型\"><a href=\"#localStorage-存储复杂数据类型\" class=\"headerlink\" title=\"localStorage 存储复杂数据类型\"></a>localStorage 存储复杂数据类型</h4><p><strong>问题：</strong>本地只能存储字符串,无法存储复杂数据类型.</p>\n<p><strong>解决：</strong>需要将复杂数据类型转换成 JSON字符串,在存储到本地</p>\n<p><strong>语法：</strong>JSON.stringify(复杂数据类型)</p>\n<p>JSON字符串：</p>\n<ul>\n<li>首先是1个字符串</li>\n<li>属性名使用双引号引起来，不能单引号</li>\n<li>属性值如果是字符串型也必须双引号</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 本地存储复杂数据类型\n    const goods &#x3D; &#123;\n      name: &#39;小米&#39;,\n      price: 1999\n    &#125;\n    &#x2F;&#x2F; localStorage.setItem(&#39;goods&#39;, goods)\n    &#x2F;&#x2F; console.log(localStorage.getItem(&#39;goods&#39;))\n\n    &#x2F;&#x2F; 1. 把对象转换为JSON字符串  JSON.stringify\n    localStorage.setItem(&#39;goods&#39;, JSON.stringify(goods))\n    &#x2F;&#x2F; console.log(typeof localStorage.getItem(&#39;goods&#39;))\n\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n\n\n<p><strong>问题：</strong>因为本地存储里面取出来的是字符串，不是对象，无法直接使用</p>\n<p>**解决： **把取出来的字符串转换为对象</p>\n<p><strong>语法：</strong>JSON.parse(JSON字符串)</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 本地存储复杂数据类型\n    const goods &#x3D; &#123;\n      name: &#39;小米&#39;,\n      price: 1999\n    &#125;\n    &#x2F;&#x2F; localStorage.setItem(&#39;goods&#39;, goods)\n    &#x2F;&#x2F; console.log(localStorage.getItem(&#39;goods&#39;))\n\n    &#x2F;&#x2F; 1. 把对象转换为JSON字符串  JSON.stringify\n    localStorage.setItem(&#39;goods&#39;, JSON.stringify(goods))\n    &#x2F;&#x2F; console.log(typeof localStorage.getItem(&#39;goods&#39;))\n\n    &#x2F;&#x2F; 2. 把JSON字符串转换为对象  JSON.parse\n    console.log(JSON.parse(localStorage.getItem(&#39;goods&#39;)))\n\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<h3 id=\"综合案例\"><a href=\"#综合案例\" class=\"headerlink\" title=\"综合案例\"></a>综合案例</h3><h4 id=\"数组map-方法\"><a href=\"#数组map-方法\" class=\"headerlink\" title=\"数组map 方法\"></a>数组map 方法</h4><p><strong>使用场景：</strong></p>\n<p>map 可以遍历数组处理数据，并且返回新的数组</p>\n<p><strong>语法：</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;body&gt;\n  &lt;script&gt;\n  const arr &#x3D; [&#39;red&#39;, &#39;blue&#39;, &#39;pink&#39;]\n  &#x2F;&#x2F; 1. 数组 map方法 处理数据并且 返回一个数组\n   const newArr &#x3D; arr.map(function (ele, index) &#123;\n    &#x2F;&#x2F; console.log(ele)  &#x2F;&#x2F; 数组元素\n    &#x2F;&#x2F; console.log(index) &#x2F;&#x2F; 索引号\n    return ele + &#39;颜色&#39;\n\t&#125;)\nconsole.log(newArr)\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>map 也称为映射。映射是个术语，指两个元素的集之间元素相互“对应”的关系。</p>\n<p>map重点在于有返回值，forEach没有返回值（undefined）</p></blockquote>\n<h4 id=\"数组join方法\"><a href=\"#数组join方法\" class=\"headerlink\" title=\"数组join方法\"></a>数组join方法</h4><p><strong>作用：</strong>join() 方法用于把数组中的所有元素转换一个字符串</p>\n<p><strong>语法：</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    const arr &#x3D; [&#39;red&#39;, &#39;blue&#39;, &#39;pink&#39;]\n\n    &#x2F;&#x2F; 1. 数组 map方法 处理数据并且 返回一个数组\n    const newArr &#x3D; arr.map(function (ele, index) &#123;\n      &#x2F;&#x2F; console.log(ele)  &#x2F;&#x2F; 数组元素\n      &#x2F;&#x2F; console.log(index) &#x2F;&#x2F; 索引号\n      return ele + &#39;颜色&#39;\n    &#125;)\n    console.log(newArr)\n\n    &#x2F;&#x2F; 2. 数组join方法  把数组转换为字符串\n    &#x2F;&#x2F; 小括号为空则逗号分割\n    console.log(newArr.join())  &#x2F;&#x2F; red颜色,blue颜色,pink颜色\n    &#x2F;&#x2F; 小括号是空字符串，则元素之间没有分隔符\n    console.log(newArr.join(&#39;&#39;))  &#x2F;&#x2F;red颜色blue颜色pink颜色\n    console.log(newArr.join(&#39;|&#39;))  &#x2F;&#x2F;red颜色|blue颜色|pink颜色\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n\n\n<h2 id=\"Web-APIs-第6天笔记\"><a href=\"#Web-APIs-第6天笔记\" class=\"headerlink\" title=\"Web APIs - 第6天笔记\"></a>Web APIs - 第6天笔记</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>目标：能够利用正则表达式完成小兔鲜注册页面的表单验证，具备常见的表单验证能力</p></blockquote>\n<ul>\n<li>正则表达式</li>\n<li>综合案例</li>\n<li>阶段案例</li>\n</ul>\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><p><strong>正则表达式</strong>（Regular Expression）是一种字符串匹配的模式（规则）</p>\n<p><strong>使用场景：</strong></p>\n<ul>\n<li>例如验证表单：手机号表单要求用户只能输入11位的数字 (匹配)</li>\n<li>过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等</li>\n</ul>\n<p> <img src=\"/images/Web-APIs/assets%5C1676079666366.png\" alt=\"67607966636\"></p>\n<h4 id=\"正则基本使用\"><a href=\"#正则基本使用\" class=\"headerlink\" title=\"正则基本使用\"></a>正则基本使用</h4><ol>\n<li><p>定义规则</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">const reg &#x3D;  &#x2F;表达式&#x2F;</code></pre>\n\n<ul>\n<li>其中<code>/   /</code>是正则表达式字面量</li>\n<li>正则表达式也是<code>对象 </code></li>\n</ul>\n</li>\n<li><p>使用正则</p>\n<ul>\n<li><code>test()方法</code>   用来查看正则表达式与指定的字符串是否匹配</li>\n<li>如果正则表达式与指定的字符串匹配 ，返回<code>true</code>，否则<code>false</code></li>\n</ul>\n</li>\n</ol>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 正则表达式的基本使用\n    const str &#x3D; &#39;web前端开发&#39;\n    &#x2F;&#x2F; 1. 定义规则\n    const reg &#x3D; &#x2F;web&#x2F;\n\n    &#x2F;&#x2F; 2. 使用正则  test()\n    console.log(reg.test(str))  &#x2F;&#x2F; true  如果符合规则匹配上则返回true\n    console.log(reg.test(&#39;java开发&#39;))  &#x2F;&#x2F; false  如果不符合规则匹配上则返回 false\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<h4 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h4><ol>\n<li><strong>普通字符:</strong></li>\n</ol>\n<ul>\n<li>大多数的字符仅能够描述它们本身，这些字符称作普通字符，例如所有的字母和数字。</li>\n<li>普通字符只能够匹配字符串中与它们相同的字符。    </li>\n<li>比如，规定用户只能输入英文26个英文字母，普通字符的话  &#x2F;[abcdefghijklmnopqrstuvwxyz]&#x2F;</li>\n</ul>\n<ol start=\"2\">\n<li><strong>元字符(特殊字符）</strong></li>\n</ol>\n<ul>\n<li>是一些具有特殊含义的字符，可以极大提高了灵活性和强大的匹配功能。</li>\n<li>比如，规定用户只能输入英文26个英文字母，换成元字符写法： &#x2F;[a-z]&#x2F;</li>\n</ul>\n<h4 id=\"边界符\"><a href=\"#边界符\" class=\"headerlink\" title=\"边界符\"></a>边界符</h4><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p>\n<p><img src=\"/images/Web-APIs/assets%5C1676080081650.png\" alt=\"67608008165\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果 ^ 和 $ 在一起，表示必须是精确匹配</p></blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 元字符之边界符\n    &#x2F;&#x2F; 1. 匹配开头的位置 ^\n    const reg &#x3D; &#x2F;^web&#x2F;\n    console.log(reg.test(&#39;web前端&#39;))  &#x2F;&#x2F; true\n    console.log(reg.test(&#39;前端web&#39;))  &#x2F;&#x2F; false\n    console.log(reg.test(&#39;前端web学习&#39;))  &#x2F;&#x2F; false\n    console.log(reg.test(&#39;we&#39;))  &#x2F;&#x2F; false\n\n    &#x2F;&#x2F; 2. 匹配结束的位置 $\n    const reg1 &#x3D; &#x2F;web$&#x2F;\n    console.log(reg1.test(&#39;web前端&#39;))  &#x2F;&#x2F;  false\n    console.log(reg1.test(&#39;前端web&#39;))  &#x2F;&#x2F; true\n    console.log(reg1.test(&#39;前端web学习&#39;))  &#x2F;&#x2F; false\n    console.log(reg1.test(&#39;we&#39;))  &#x2F;&#x2F; false  \n\n    &#x2F;&#x2F; 3. 精确匹配 ^ $\n    const reg2 &#x3D; &#x2F;^web$&#x2F;\n    console.log(reg2.test(&#39;web前端&#39;))  &#x2F;&#x2F;  false\n    console.log(reg2.test(&#39;前端web&#39;))  &#x2F;&#x2F; false\n    console.log(reg2.test(&#39;前端web学习&#39;))  &#x2F;&#x2F; false\n    console.log(reg2.test(&#39;we&#39;))  &#x2F;&#x2F; false \n    console.log(reg2.test(&#39;web&#39;))  &#x2F;&#x2F; true\n    console.log(reg2.test(&#39;webweb&#39;))  &#x2F;&#x2F; flase \n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<h4 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h4><p>量词用来设定某个模式重复次数</p>\n<p><img src=\"/images/Web-APIs/assets%5C1676080185383.png\" alt=\"67608018538\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意： 逗号左右两侧千万不要出现空格</p></blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 元字符之量词\n    &#x2F;&#x2F; 1. * 重复次数 &gt;&#x3D; 0 次\n    const reg1 &#x3D; &#x2F;^w*$&#x2F;\n    console.log(reg1.test(&#39;&#39;))  &#x2F;&#x2F; true\n    console.log(reg1.test(&#39;w&#39;))  &#x2F;&#x2F; true\n    console.log(reg1.test(&#39;ww&#39;))  &#x2F;&#x2F; true\n    console.log(&#39;-----------------------&#39;)\n\n    &#x2F;&#x2F; 2. + 重复次数 &gt;&#x3D; 1 次\n    const reg2 &#x3D; &#x2F;^w+$&#x2F;\n    console.log(reg2.test(&#39;&#39;))  &#x2F;&#x2F; false\n    console.log(reg2.test(&#39;w&#39;))  &#x2F;&#x2F; true\n    console.log(reg2.test(&#39;ww&#39;))  &#x2F;&#x2F; true\n    console.log(&#39;-----------------------&#39;)\n\n    &#x2F;&#x2F; 3. ? 重复次数  0 || 1 \n    const reg3 &#x3D; &#x2F;^w?$&#x2F;\n    console.log(reg3.test(&#39;&#39;))  &#x2F;&#x2F; true\n    console.log(reg3.test(&#39;w&#39;))  &#x2F;&#x2F; true\n    console.log(reg3.test(&#39;ww&#39;))  &#x2F;&#x2F; false\n    console.log(&#39;-----------------------&#39;)\n\n\n    &#x2F;&#x2F; 4. &#123;n&#125; 重复 n 次\n    const reg4 &#x3D; &#x2F;^w&#123;3&#125;$&#x2F;\n    console.log(reg4.test(&#39;&#39;))  &#x2F;&#x2F; false\n    console.log(reg4.test(&#39;w&#39;))  &#x2F;&#x2F; flase\n    console.log(reg4.test(&#39;ww&#39;))  &#x2F;&#x2F; false\n    console.log(reg4.test(&#39;www&#39;))  &#x2F;&#x2F; true\n    console.log(reg4.test(&#39;wwww&#39;))  &#x2F;&#x2F; false\n    console.log(&#39;-----------------------&#39;)\n\n    &#x2F;&#x2F; 5. &#123;n,&#125; 重复次数 &gt;&#x3D; n \n    const reg5 &#x3D; &#x2F;^w&#123;2,&#125;$&#x2F;\n    console.log(reg5.test(&#39;&#39;))  &#x2F;&#x2F; false\n    console.log(reg5.test(&#39;w&#39;))  &#x2F;&#x2F; false\n    console.log(reg5.test(&#39;ww&#39;))  &#x2F;&#x2F; true\n    console.log(reg5.test(&#39;www&#39;))  &#x2F;&#x2F; true\n    console.log(&#39;-----------------------&#39;)\n\n    &#x2F;&#x2F; 6. &#123;n,m&#125;   n &#x3D;&lt; 重复次数 &lt;&#x3D; m\n    const reg6 &#x3D; &#x2F;^w&#123;2,4&#125;$&#x2F;\n    console.log(reg6.test(&#39;w&#39;))  &#x2F;&#x2F; false\n    console.log(reg6.test(&#39;ww&#39;))  &#x2F;&#x2F; true\n    console.log(reg6.test(&#39;www&#39;))  &#x2F;&#x2F; true\n    console.log(reg6.test(&#39;wwww&#39;))  &#x2F;&#x2F; true\n    console.log(reg6.test(&#39;wwwww&#39;))  &#x2F;&#x2F; false\n\n    &#x2F;&#x2F; 7. 注意事项： 逗号两侧千万不要加空格否则会匹配失败\n\n  &lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"范围\"><a href=\"#范围\" class=\"headerlink\" title=\"范围\"></a>范围</h4><p>表示字符的范围，定义的规则限定在某个范围，比如只能是英文字母，或者数字等等，用表示范围</p>\n<p> <img src=\"/images/Web-APIs/assets/1676080296168.png\" alt=\"1676080296168\"></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 元字符之范围  []  \n    &#x2F;&#x2F; 1. [abc] 匹配包含的单个字符， 多选1\n    const reg1 &#x3D; &#x2F;^[abc]$&#x2F;\n    console.log(reg1.test(&#39;a&#39;))  &#x2F;&#x2F; true\n    console.log(reg1.test(&#39;b&#39;))  &#x2F;&#x2F; true\n    console.log(reg1.test(&#39;c&#39;))  &#x2F;&#x2F; true\n    console.log(reg1.test(&#39;d&#39;))  &#x2F;&#x2F; false\n    console.log(reg1.test(&#39;ab&#39;))  &#x2F;&#x2F; false\n\n    &#x2F;&#x2F; 2. [a-z] 连字符 单个\n    const reg2 &#x3D; &#x2F;^[a-z]$&#x2F;\n    console.log(reg2.test(&#39;a&#39;))  &#x2F;&#x2F; true\n    console.log(reg2.test(&#39;p&#39;))  &#x2F;&#x2F; true\n    console.log(reg2.test(&#39;0&#39;))  &#x2F;&#x2F; false\n    console.log(reg2.test(&#39;A&#39;))  &#x2F;&#x2F; false\n    &#x2F;&#x2F; 想要包含小写字母，大写字母 ，数字\n    const reg3 &#x3D; &#x2F;^[a-zA-Z0-9]$&#x2F;\n    console.log(reg3.test(&#39;B&#39;))  &#x2F;&#x2F; true\n    console.log(reg3.test(&#39;b&#39;))  &#x2F;&#x2F; true\n    console.log(reg3.test(9))  &#x2F;&#x2F; true\n    console.log(reg3.test(&#39;,&#39;))  &#x2F;&#x2F; flase\n\n    &#x2F;&#x2F; 用户名可以输入英文字母，数字，可以加下划线，要求 6~16位\n    const reg4 &#x3D; &#x2F;^[a-zA-Z0-9_]&#123;6,16&#125;$&#x2F;\n    console.log(reg4.test(&#39;abcd1&#39;))  &#x2F;&#x2F; false \n    console.log(reg4.test(&#39;abcd12&#39;))  &#x2F;&#x2F; true\n    console.log(reg4.test(&#39;ABcd12&#39;))  &#x2F;&#x2F; true\n    console.log(reg4.test(&#39;ABcd12_&#39;))  &#x2F;&#x2F; true\n\n    &#x2F;&#x2F; 3. [^a-z] 取反符\n    const reg5 &#x3D; &#x2F;^[^a-z]$&#x2F;\n    console.log(reg5.test(&#39;a&#39;))  &#x2F;&#x2F; false \n    console.log(reg5.test(&#39;A&#39;))  &#x2F;&#x2F; true\n    console.log(reg5.test(8))  &#x2F;&#x2F; true\n\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<h4 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h4><p>某些常见模式的简写方式，区分字母和数字</p>\n<p><img src=\"/images/Web-APIs/assets/1676080353637.png\" alt=\"1676080353637\"></p>\n<p> <img src=\"/images/Web-APIs/assets/1676080372325.png\" alt=\"1676080372325\"></p>\n<h3 id=\"替换和修饰符\"><a href=\"#替换和修饰符\" class=\"headerlink\" title=\"替换和修饰符\"></a>替换和修饰符</h3><p>replace 替换方法，可以完成字符的替换</p>\n<p> <img src=\"/images/Web-APIs/assets/1676080437160.png\" alt=\"1676080437160\"></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 替换和修饰符\n    const str &#x3D; &#39;欢迎大家学习前端，相信大家一定能学好前端，都成为前端大神&#39;\n    &#x2F;&#x2F; 1. 替换  replace  需求：把前端替换为 web\n    &#x2F;&#x2F; 1.1 replace 返回值是替换完毕的字符串\n    &#x2F;&#x2F; const strEnd &#x3D; str.replace(&#x2F;前端&#x2F;, &#39;web&#39;) 只能替换一个\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>修饰符约束正则执行的某些细节行为，如是否区分大小写、是否支持多行匹配等</p>\n<ul>\n<li>i 是单词 ignore 的缩写，正则匹配时字母不区分大小写</li>\n<li>g 是单词 global 的缩写，匹配所有满足正则表达式的结果</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 替换和修饰符\n    const str &#x3D; &#39;欢迎大家学习前端，相信大家一定能学好前端，都成为前端大神&#39;\n    &#x2F;&#x2F; 1. 替换  replace  需求：把前端替换为 web\n    &#x2F;&#x2F; 1.1 replace 返回值是替换完毕的字符串\n    &#x2F;&#x2F; const strEnd &#x3D; str.replace(&#x2F;前端&#x2F;, &#39;web&#39;) 只能替换一个\n\n    &#x2F;&#x2F; 2. 修饰符 g 全部替换\n    const strEnd &#x3D; str.replace(&#x2F;前端&#x2F;g, &#39;web&#39;)\n    console.log(strEnd) \n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<h3 id=\"正则插件\"><a href=\"#正则插件\" class=\"headerlink\" title=\"正则插件\"></a>正则插件</h3><p> <img src=\"/images/Web-APIs/assets/1676080548639.png\" alt=\"1676080548639\"></p>\n<h3 id=\"change-事件\"><a href=\"#change-事件\" class=\"headerlink\" title=\"change 事件\"></a>change 事件</h3><p>给input注册 change 事件，值被修改并且失去焦点后触发</p>\n<h3 id=\"判断是否有类\"><a href=\"#判断是否有类\" class=\"headerlink\" title=\"判断是否有类\"></a>判断是否有类</h3><p> <img src=\"/images/Web-APIs/assets/1676080618794.png\" alt=\"1676080618794\"></p>\n<p>元素.classList.contains() 看看有没有包含某个类，如果有则返回true，么有则返回false</p>\n","feature":true,"text":"Web APIs笔记跟着黑马程序员pink老师学完HTML、CSS、JavaScript 基础知识后开展了Web APIs的学习。那么一个重要的问题来了！！！到...","link":"","photos":[],"count_time":{"symbolsCount":"47k","symbolsTime":"43 mins."},"categories":[{"name":"计算机","slug":"计算机","count":5,"path":"api/categories/计算机.json"},{"name":"前端","slug":"计算机/前端","count":2,"path":"api/categories/计算机/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":7,"path":"api/tags/笔记.json"},{"name":"Web APIs","slug":"Web-APIs","count":1,"path":"api/tags/Web-APIs.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Web-APIs%E7%AC%94%E8%AE%B0\"><span class=\"toc-text\">Web APIs笔记</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Web-APIs-%E7%AC%AC1%E5%A4%A9%E7%AC%94%E8%AE%B0\"><span class=\"toc-text\">Web APIs - 第1天笔记</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DOM-%E6%A0%91\"><span class=\"toc-text\">DOM 树</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DOM-%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">DOM 节点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#document\"><span class=\"toc-text\">document</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96DOM%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">获取DOM对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E5%85%83%E7%B4%A0%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">操作元素内容</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E5%85%83%E7%B4%A0%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">操作元素属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7%E4%BF%AE%E6%94%B9\"><span class=\"toc-text\">常用属性修改</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E6%A0%B7%E5%BC%8F%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">控制样式属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">操作表单元素属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">自定义属性</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%B4%E6%AD%87%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">间歇函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Web-APIs-%E7%AC%AC2%E5%A4%A9%E7%AC%94%E8%AE%B0\"><span class=\"toc-text\">Web APIs - 第2天笔记</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">事件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC\"><span class=\"toc-text\">事件监听</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">事件类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">事件处理程序</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E7%B1%BB%E5%9E%8B-1\"><span class=\"toc-text\">事件类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">鼠标事件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">键盘事件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%84%A6%E7%82%B9%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">焦点事件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%87%E6%9C%AC%E6%A1%86%E8%BE%93%E5%85%A5%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">文本框输入事件</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">事件对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">环境对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">回调函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Web-APIs-%E7%AC%AC3%E5%A4%A9%E7%AC%94%E8%AE%B0\"><span class=\"toc-text\">Web APIs - 第3天笔记</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E6%B5%81\"><span class=\"toc-text\">事件流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8D%95%E8%8E%B7%E5%92%8C%E5%86%92%E6%B3%A1\"><span class=\"toc-text\">捕获和冒泡</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%98%BB%E6%AD%A2%E5%86%92%E6%B3%A1\"><span class=\"toc-text\">阻止冒泡</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98\"><span class=\"toc-text\">事件委托</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">其他事件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">页面加载事件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%83%E7%B4%A0%E6%BB%9A%E5%8A%A8%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">元素滚动事件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A1%B5%E9%9D%A2%E5%B0%BA%E5%AF%B8%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">页面尺寸事件</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%83%E7%B4%A0%E5%B0%BA%E5%AF%B8%E4%B8%8E%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">元素尺寸与位置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Web-APIs-%E7%AC%AC4%E5%A4%A9%E7%AC%94%E8%AE%B0\"><span class=\"toc-text\">Web APIs - 第4天笔记</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A5%E6%9C%9F%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">日期对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B%E5%8C%96\"><span class=\"toc-text\">实例化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%97%B4%E6%88%B3\"><span class=\"toc-text\">时间戳</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DOM-%E8%8A%82%E7%82%B9-1\"><span class=\"toc-text\">DOM 节点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">插入节点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">删除节点</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">查找节点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%88%B6%E5%AD%90%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">父子关系</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%84%E5%BC%9F%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">兄弟关系</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Web-APIs-%E7%AC%AC5%E5%A4%A9%E7%AC%94%E8%AE%B0\"><span class=\"toc-text\">Web APIs - 第5天笔记</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#js%E7%BB%84%E6%88%90\"><span class=\"toc-text\">js组成</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#window%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">window对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E6%97%B6%E5%99%A8-%E5%BB%B6%E8%BF%9F%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">定时器-延迟函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#location%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">location对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#navigator%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">navigator对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#histroy%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">histroy对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%EF%BC%88%E4%BB%8A%E6%97%A5%E9%87%8D%E7%82%B9%EF%BC%89\"><span class=\"toc-text\">本地存储（今日重点）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#localStorage%EF%BC%88%E9%87%8D%E7%82%B9%EF%BC%89\"><span class=\"toc-text\">localStorage（重点）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#sessionStorage%EF%BC%88%E4%BA%86%E8%A7%A3%EF%BC%89\"><span class=\"toc-text\">sessionStorage（了解）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#localStorage-%E5%AD%98%E5%82%A8%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">localStorage 存储复杂数据类型</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">综合案例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84map-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">数组map 方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84join%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">数组join方法</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Web-APIs-%E7%AC%AC6%E5%A4%A9%E7%AC%94%E8%AE%B0\"><span class=\"toc-text\">Web APIs - 第6天笔记</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">正则表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%88%99%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">正则基本使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%83%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">元字符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%B9%E7%95%8C%E7%AC%A6\"><span class=\"toc-text\">边界符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%87%8F%E8%AF%8D\"><span class=\"toc-text\">量词</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">范围</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E7%B1%BB\"><span class=\"toc-text\">字符类</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%BF%E6%8D%A2%E5%92%8C%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">替换和修饰符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%88%99%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">正则插件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#change-%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">change 事件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%9C%89%E7%B1%BB\"><span class=\"toc-text\">判断是否有类</span></a></li></ol></li></ol></li></ol>","author":{"name":"Honman","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"这家伙很坏 什么都没留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"8000英语单词","uid":"a2af924c2c9dc8abd52717dfa27385c7","slug":"English/8000英语单词","date":"2023-03-30T03:00:00.000Z","updated":"2023-08-17T06:38:25.930Z","comments":true,"path":"api/articles/English/8000英语单词.json","keywords":null,"cover":"/images/cover/7.jpg","text":" 学习英语是绝大部分年轻人绝不可能绕过去的一道坎。而“低配版”词汇量与“高配版”词汇量，将导致英语学习体验全方位的差别，所以背单词是一种“must-do”。 所...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"英语","slug":"英语","count":4,"path":"api/categories/英语.json"}],"tags":[{"name":"英语","slug":"英语","count":4,"path":"api/tags/英语.json"}],"author":{"name":"Honman","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"这家伙很坏 什么都没留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}