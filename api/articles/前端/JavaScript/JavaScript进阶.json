{"title":"JavaScript-进阶笔记","uid":"19e12028a5359d260a4ec9c616f8a947","slug":"前端/JavaScript/JavaScript进阶","date":"2023-08-24T00:30:00.000Z","updated":"2023-09-11T10:29:00.990Z","comments":true,"path":"api/articles/前端/JavaScript/JavaScript进阶.json","keywords":null,"cover":"/images/cover/4.jpg","content":"<h1 id=\"JavaScript进阶\"><a href=\"#JavaScript进阶\" class=\"headerlink\" title=\"JavaScript进阶\"></a>JavaScript进阶</h1><h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>了解作用域对程序执行的影响及作用域链的查找机制，使用闭包函数创建隔离作用域避免全局变量污染。</p></blockquote>\n<p>作用域（scope）规定了变量能够被访问的“范围”，离开了这个“范围”变量便不能被访问，作用域分为全局作用域和局部作用域。</p>\n<h3 id=\"局部作用域\"><a href=\"#局部作用域\" class=\"headerlink\" title=\"局部作用域\"></a>局部作用域</h3><p>局部作用域分为函数作用域和块作用域。</p>\n<h4 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h4><p>在函数内部声明的变量只能在函数内部被访问，外部无法直接访问。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 声明 counter 函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">counter</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75; font-style: italic\">x</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75; font-style: italic\">y</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #7F848E; font-style: italic\">// 函数内部声明的变量</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">s</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">+</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">y</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 18</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 设用 counter 函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">counter</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">8</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 访问变量 s</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">)</span><span style=\"color: #7F848E; font-style: italic\">// 报错</span></span>\n<span class=\"line\"></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li>函数内部声明的变量，在函数外部无法被访问</li>\n<li>函数的参数也是函数内部的局部变量</li>\n<li>不同函数内部声明的变量无法互相访问</li>\n<li>函数执行完毕后，函数内部的变量实际被清空了</li>\n</ol>\n<h4 id=\"块作用域\"><a href=\"#块作用域\" class=\"headerlink\" title=\"块作用域\"></a>块作用域</h4><p>在 JavaScript 中使用 <code>&#123;&#125;</code> 包裹的代码称为代码块，代码块内部声明的变量外部将【有可能】无法被访问。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #7F848E; font-style: italic\">// age 只能在该代码块中被访问</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">18</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\">); </span><span style=\"color: #7F848E; font-style: italic\">// 正常</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 超出了 age 的作用域</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 报错</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">flag</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">true</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E06C75\">flag</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #7F848E; font-style: italic\">// str 只能在该代码块中被访问</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">str</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;hello world!&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">str</span><span style=\"color: #ABB2BF\">); </span><span style=\"color: #7F848E; font-style: italic\">// 正常</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 超出了 age 的作用域</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">str</span><span style=\"color: #ABB2BF\">); </span><span style=\"color: #7F848E; font-style: italic\">// 报错</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">t</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">; </span><span style=\"color: #E06C75\">t</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">&lt;=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">6</span><span style=\"color: #ABB2BF\">; </span><span style=\"color: #E06C75\">t</span><span style=\"color: #56B6C2\">++</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #7F848E; font-style: italic\">// t 只能在该代码块中被访问</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">t</span><span style=\"color: #ABB2BF\">); </span><span style=\"color: #7F848E; font-style: italic\">// 正常</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 超出了 t 的作用域</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">t</span><span style=\"color: #ABB2BF\">); </span><span style=\"color: #7F848E; font-style: italic\">// 报错</span></span>\n<span class=\"line\"></span></code></pre></div>\n\n<p>JavaScript 中除了变量外还有常量，常量与变量本质的区别是【常量必须要有值且不允许被重新赋值】，常量值为对象时其属性和方法允许重新赋值。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 必须要有值</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">version</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;1.0.0&#39;</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 不能重新赋值</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// version = &#39;1.0.1&#39;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 常量值为对象类型</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">user</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&#39;小明&#39;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">18</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 不能重新赋值</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">user</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;&#125;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 属性和方法允许被修改</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">user</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;小小明&#39;</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">user</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">gender</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;男&#39;</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li><code>let</code> 声明的变量会产生块作用域，<code>var</code> 不会产生块作用域</li>\n<li><code>const</code> 声明的常量也会产生块作用域</li>\n<li>不同代码块之间的变量无法互相访问</li>\n<li>推荐使用 <code>let</code> 或 <code>const</code></li>\n</ol>\n<p>注：开发中 <code>let</code> 和 <code>const</code> 经常不加区分的使用，如果担心某个值会不小被修改时，则只能使用 <code>const</code> 声明成常量。</p>\n<h3 id=\"全局作用域\"><a href=\"#全局作用域\" class=\"headerlink\" title=\"全局作用域\"></a>全局作用域</h3><p><code>&lt;script&gt;</code> 标签和 <code>.js</code> 文件的【最外层】就是所谓的全局作用域，在此声明的变量在函数内部也可以被访问。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 此处是全局</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #7F848E; font-style: italic\">// 此处为局部</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 此处为全局</span></span>\n<span class=\"line\"></span></code></pre></div>\n\n<p>全局作用域中声明的变量，任何其它作用域都可以被访问，如下代码所示：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 全局变量 name</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">name</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;小明&#39;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 函数作用域中访问全局</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #7F848E; font-style: italic\">// 此处为局部</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;你好&#39;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">+</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 全局变量 flag 和 x</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">flag</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">true</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">10</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 块作用域中访问全局</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E06C75\">flag</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">5</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">+</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// x 是全局的</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li>为 <code>window</code> 对象动态添加的属性默认也是全局的，不推荐！</li>\n<li>函数中未使用任何关键字声明的变量为全局变量，不推荐！！！</li>\n<li>尽可能少的声明全局变量，防止全局变量被污染</li>\n</ol>\n<p>JavaScript 中的作用域是程序被执行时的底层机制，了解这一机制有助于规范代码书写习惯，避免因作用域导致的语法错误。</p>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><p>在解释什么是作用域链前先来看一段代码：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 全局作用域</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">2</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 局部作用域</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">f</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">c</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 局部作用域</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">g</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">d</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;yo&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span></code></pre></div>\n\n<p>函数内部允许创建新的函数，<code>f</code> 函数内部创建的新函数 <code>g</code>，会产生新的函数作用域，由此可知作用域产生了嵌套的关系。</p>\n<p>如下图所示，父子关系的作用域关联在一起形成了链状的结构，作用域链的名字也由此而来。</p>\n<p>作用域链本质上是底层的变量查找机制，在函数被执行时，会优先查找当前函数作用域中查找变量，如果当前作用域查找不到则会依次逐级查找父级作用域直到全局作用域，如下代码所示：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 全局作用域</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">2</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 局部作用域</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">f</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">c</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// let a = 10;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 1 或 10</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">d</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 报错</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 局部作用域</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">g</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">d</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;yo&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #7F848E; font-style: italic\">// let b = 20;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 2 或 20</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 调用 g 函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">g</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">c</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 报错</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">d</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 报错</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #61AFEF\">f</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li>嵌套关系的作用域串联起来形成了作用域链</li>\n<li>相同作用域链中按着从小到大的规则查找变量</li>\n<li>子作用域能够访问父作用域，父级作用域无法访问子级作用域</li>\n</ol>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>闭包是一种比较特殊和函数，使用闭包能够访问函数作用域中的变量。从代码形式上看闭包是一个做为返回值的函数，如下代码所示：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 1. 闭包 : 内层函数 + 外层函数变量</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// function outer() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   const a = 1</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   function f() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//     console.log(a)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   f()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// outer()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 2. 闭包的应用： 实现数据的私有。统计函数的调用次数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// let count = 1</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// function fn() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   count++</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   console.log(`函数被调用$&#123;count&#125;次`)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 3. 闭包的写法  统计函数的调用次数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">outer</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">count</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">fn</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E06C75\">count</span><span style=\"color: #56B6C2\">++</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">`函数被调用</span><span style=\"color: #C678DD\">$&#123;</span><span style=\"color: #E06C75\">count</span><span style=\"color: #C678DD\">&#125;</span><span style=\"color: #98C379\">次`</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">fn</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">re</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">outer</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// const re = function fn() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   count++</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   console.log(`函数被调用$&#123;count&#125;次`)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">re</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">re</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// const fn = function() &#123; &#125;  函数表达式</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 4. 闭包存在的问题： 可能会造成内存泄漏</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre></div>\n\n<p>总结：</p>\n<p>1.怎么理解闭包？</p>\n<ul>\n<li>闭包 &#x3D; 内层函数 + 外层函数的变量</li>\n</ul>\n<p>2.闭包的作用？</p>\n<ul>\n<li>封闭数据，实现数据私有，外部也可以访问函数内部的变量</li>\n<li>闭包很有用，因为它允许将函数与其所操作的某些数据（环境）关联起来</li>\n</ul>\n<p>3.闭包可能引起的问题？</p>\n<ul>\n<li>内存泄漏</li>\n</ul>\n<h3 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h3><p>变量提升是 JavaScript 中比较“奇怪”的现象，它允许在变量声明之前即被访问，</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 访问变量 str</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">str</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">+</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;world!&#39;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 声明变量 str</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">var</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">str</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;hello &#39;</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li>变量在未声明即被访问时会报语法错误</li>\n<li>变量在声明之前即被访问，变量的值为 <code>undefined</code></li>\n<li><code>let</code> 声明的变量不存在变量提升，推荐使用 <code>let</code></li>\n<li>变量提升出现在相同作用域当中</li>\n<li>实际开发中推荐先声明再访问变量</li>\n</ol>\n<p>注：关于变量提升的原理分析会涉及较为复杂的词法分析等知识，而开发中使用 <code>let</code> 可以轻松规避变量的提升，因此在此不做过多的探讨，有兴趣可<a href=\"https://segmentfault.com/a/1190000013915935\">查阅资料</a>。</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>知道函数参数默认值、动态参数、剩余参数的使用细节，提升函数应用的灵活度，知道箭头函数的语法及与普通函数的差异。</p></blockquote>\n<h3 id=\"函数提升\"><a href=\"#函数提升\" class=\"headerlink\" title=\"函数提升\"></a>函数提升</h3><p>函数提升与变量提升比较类似，是指函数在声明之前即可被调用。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 调用函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #61AFEF\">foo</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 声明函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">foo</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;声明之前即被调用...&#39;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 不存在提升现象</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #61AFEF\">bar</span><span style=\"color: #ABB2BF\">()  </span><span style=\"color: #7F848E; font-style: italic\">// 错误</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">var</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">bar</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;函数表达式不存在提升现象...&#39;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li>函数提升能够使函数的声明调用更灵活</li>\n<li>函数表达式不存在提升的现象</li>\n<li>函数提升出现在相同作用域当中</li>\n</ol>\n<h3 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a>函数参数</h3><p>函数参数的使用细节，能够提升函数应用的灵活度。</p>\n<h4 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h4><div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 设置参数默认值</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75; font-style: italic\">name</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #98C379\">&quot;小明&quot;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75; font-style: italic\">age</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #D19A66\">18</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">document</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">write</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">`&lt;p&gt;大家好，我叫</span><span style=\"color: #C678DD\">$&#123;</span><span style=\"color: #E06C75\">name</span><span style=\"color: #C678DD\">&#125;</span><span style=\"color: #98C379\">，我今年</span><span style=\"color: #C678DD\">$&#123;</span><span style=\"color: #E06C75\">age</span><span style=\"color: #C678DD\">&#125;</span><span style=\"color: #98C379\">岁了。&lt;/p&gt;`</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 调用函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;小红&#39;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;小刚&#39;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">21</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li>声明函数时为形参赋值即为参数的默认值</li>\n<li>如果参数未自定义默认值时，参数的默认值为 <code>undefined</code></li>\n<li>调用函数时没有传入对应实参时，参数的默认值被当做实参传入</li>\n</ol>\n<h4 id=\"动态参数\"><a href=\"#动态参数\" class=\"headerlink\" title=\"动态参数\"></a>动态参数</h4><p><code>arguments</code> 是函数内部内置的伪数组变量，它包含了调用函数时传入的所有实参。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 求生函数，计算所有参数的和</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">sum</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// console.log(arguments)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">; </span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">arguments</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">length</span><span style=\"color: #ABB2BF\">; </span><span style=\"color: #E06C75\">i</span><span style=\"color: #56B6C2\">++</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">+=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">arguments</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">s</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 调用求和函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #61AFEF\">sum</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">)</span><span style=\"color: #7F848E; font-style: italic\">// 两个参数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #61AFEF\">sum</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 两个参数</span></span>\n<span class=\"line\"></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li><code>arguments</code> 是一个伪数组</li>\n<li><code>arguments</code> 的作用是动态获取函数的实参</li>\n</ol>\n<h4 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h4><div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">config</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75; font-style: italic\">baseURL</span><span style=\"color: #ABB2BF\">, ...</span><span style=\"color: #E06C75; font-style: italic\">other</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">baseURL</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 得到 &#39;http://baidu.com&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">other</span><span style=\"color: #ABB2BF\">)  </span><span style=\"color: #7F848E; font-style: italic\">// other  得到 [&#39;get&#39;, &#39;json&#39;]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 调用函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #61AFEF\">config</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;http://baidu.com&#39;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&#39;get&#39;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&#39;json&#39;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li><code>...</code> 是语法符号，置于最末函数形参之前，用于获取多余的实参</li>\n<li>借助 <code>...</code> 获取的剩余实参，是个真数组</li>\n</ol>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>箭头函数是一种声明函数的简洁语法，它与普通函数并无本质的区别，差异性更多体现在语法格式上。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// const fn = function () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   console.log(123)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 1. 箭头函数 基本语法</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// const fn = () =&gt; &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   console.log(123)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// fn()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// const fn = (x) =&gt; &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   console.log(x)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// fn(1)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 2. 只有一个形参的时候，可以省略小括号</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// const fn = x =&gt; &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   console.log(x)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// fn(1)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// // 3. 只有一行代码的时候，我们可以省略大括号</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// const fn = x =&gt; console.log(x)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// fn(1)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 4. 只有一行代码的时候，可以省略return</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// const fn = x =&gt; x + x</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// console.log(fn(1))</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 5. 箭头函数可以直接返回一个对象</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// const fn = (uname) =&gt; (&#123; uname: uname &#125;)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// console.log(fn(&#39;刘德华&#39;))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li>箭头函数属于表达式函数，因此不存在函数提升</li>\n<li>箭头函数只有一个参数时可以省略圆括号 <code>()</code></li>\n<li>箭头函数函数体只有一行代码时可以省略花括号 <code>&#123;&#125;</code>，并自动做为返回值被返回</li>\n</ol>\n<h4 id=\"箭头函数参数\"><a href=\"#箭头函数参数\" class=\"headerlink\" title=\"箭头函数参数\"></a>箭头函数参数</h4><p>箭头函数中没有 <code>arguments</code>，只能使用 <code>...</code> 动态获取实参</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 1. 利用箭头函数来求和</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">getSum</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> (...</span><span style=\"color: #E06C75; font-style: italic\">arr</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">=&gt;</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">sum</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">; </span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">arr</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">length</span><span style=\"color: #ABB2BF\">; </span><span style=\"color: #E06C75\">i</span><span style=\"color: #56B6C2\">++</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E06C75\">sum</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">+=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">arr</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">sum</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">result</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">getSum</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">4</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">result</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 9</span></span>\n<span class=\"line\"></span></code></pre></div>\n\n<h4 id=\"箭头函数-this\"><a href=\"#箭头函数-this\" class=\"headerlink\" title=\"箭头函数 this\"></a>箭头函数 this</h4><p>箭头函数不会创建自己的this,它只会从自己的作用域链的上一层沿用this。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 以前this的指向：  谁调用的这个函数，this 就指向谁</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// console.log(this)  // window</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// // 普通函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// function fn() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   console.log(this)  // window</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// window.fn()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// // 对象方法里面的this</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// const obj = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   name: &#39;andy&#39;,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   sayHi: function () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//     console.log(this)  // obj</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// obj.sayHi()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 2. 箭头函数的this  是上一层作用域的this 指向</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// const fn = () =&gt; &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   console.log(this)  // window</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// fn()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 对象方法箭头函数 this</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// const obj = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   uname: &#39;pink老师&#39;,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   sayHi: () =&gt; &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//     console.log(this)  // this 指向谁？ window</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// obj.sayHi()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">obj</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">uname</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&#39;pink老师&#39;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">)  </span><span style=\"color: #7F848E; font-style: italic\">// obj</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">i</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">10</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">count</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> () </span><span style=\"color: #C678DD\">=&gt;</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">)  </span><span style=\"color: #7F848E; font-style: italic\">// obj </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #61AFEF\">count</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">obj</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"></span></code></pre></div>\n\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>知道解构的语法及分类，使用解构简洁语法快速为变量赋值。</p></blockquote>\n<p>解构赋值是一种快速为变量赋值的简洁语法，本质上仍然是为变量赋值，分为数组解构、对象解构两大类型。</p>\n<h3 id=\"数组解构\"><a href=\"#数组解构\" class=\"headerlink\" title=\"数组解构\"></a>数组解构</h3><p>数组解构是将数组的单元值快速批量赋值给一系列变量的简洁语法，如下代码所示：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 普通的数组</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">arr</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 批量声明变量 a b c </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 同时将数组单元值 1 2 3 依次赋值给变量 a b c</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">c</span><span style=\"color: #ABB2BF\">] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">arr</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\">); </span><span style=\"color: #7F848E; font-style: italic\">// 1</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">b</span><span style=\"color: #ABB2BF\">); </span><span style=\"color: #7F848E; font-style: italic\">// 2</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">c</span><span style=\"color: #ABB2BF\">); </span><span style=\"color: #7F848E; font-style: italic\">// 3</span></span>\n<span class=\"line\"></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li>赋值运算符 <code>=</code> 左侧的 <code>[]</code> 用于批量声明变量，右侧数组的单元值将被赋值给左侧的变量</li>\n<li>变量的顺序对应数组单元值的位置依次进行赋值操作</li>\n<li>变量的数量大于单元值数量时，多余的变量将被赋值为  <code>undefined</code></li>\n<li>变量的数量小于单元值数量时，可以通过 <code>...</code> 获取剩余单元值，但只能置于最末位</li>\n<li>允许初始化变量的默认值，且只有单元值为 <code>undefined</code> 时默认值才会生效</li>\n</ol>\n<p>注：支持多维解构赋值，比较复杂后续有应用需求时再进一步分析</p>\n<h3 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构\"></a>对象解构</h3><p>对象解构是将对象属性和方法快速批量赋值给一系列变量的简洁语法，如下代码所示：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 普通对象</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">user</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&#39;小明&#39;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">18</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 批量声明变量 name age</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 同时将数组单元值 小明  18 依次赋值给变量 name  age</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> &#123;</span><span style=\"color: #E5C07B\">name</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">age</span><span style=\"color: #ABB2BF\">&#125; </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">user</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 小明</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 18</span></span>\n<span class=\"line\"></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li>赋值运算符 <code>=</code> 左侧的 <code>&#123;&#125;</code> 用于批量声明变量，右侧对象的属性值将被赋值给左侧的变量</li>\n<li>对象属性的值将被赋值给与属性名相同的变量</li>\n<li>对象中找不到与变量名一致的属性时变量值为 <code>undefined</code></li>\n<li>允许初始化变量的默认值，属性不存在或单元值为 <code>undefined</code> 时默认值才会生效</li>\n</ol>\n<p>注：支持多维解构赋值</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 1. 这是后台传递过来的数据</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">msg</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #98C379\">&quot;code&quot;</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">200</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #98C379\">&quot;msg&quot;</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&quot;获取新闻列表成功&quot;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #98C379\">&quot;data&quot;</span><span style=\"color: #ABB2BF\">: [</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">                </span><span style=\"color: #98C379\">&quot;id&quot;</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">                </span><span style=\"color: #98C379\">&quot;title&quot;</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&quot;5G商用自己，三大运用商收入下降&quot;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">                </span><span style=\"color: #98C379\">&quot;count&quot;</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">58</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">                </span><span style=\"color: #98C379\">&quot;id&quot;</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">                </span><span style=\"color: #98C379\">&quot;title&quot;</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&quot;国际媒体头条速览&quot;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">                </span><span style=\"color: #98C379\">&quot;count&quot;</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">56</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">                </span><span style=\"color: #98C379\">&quot;id&quot;</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">                </span><span style=\"color: #98C379\">&quot;title&quot;</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&quot;乌克兰和俄罗斯持续冲突&quot;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">                </span><span style=\"color: #98C379\">&quot;count&quot;</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">1669</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            &#125;,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        ]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 需求1： 请将以上msg对象  采用对象解构的方式 只选出  data 方面后面使用渲染页面</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// const &#123; data &#125; = msg</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// console.log(data)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 需求2： 上面msg是后台传递过来的数据，我们需要把data选出当做参数传递给 函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// const &#123; data &#125; = msg</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// msg 虽然很多属性，但是我们利用解构只要 data值</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">render</span><span style=\"color: #ABB2BF\">(&#123; </span><span style=\"color: #E06C75; font-style: italic\">data</span><span style=\"color: #ABB2BF\"> &#125;) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #7F848E; font-style: italic\">// const &#123; data &#125; = arr</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #7F848E; font-style: italic\">// 我们只要 data 数据</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #7F848E; font-style: italic\">// 内部处理</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">data</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">render</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">msg</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 需求3， 为了防止msg里面的data名字混淆，要求渲染函数里面的数据名改为 myData</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">render</span><span style=\"color: #ABB2BF\">(&#123; </span><span style=\"color: #E06C75\">data</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E06C75; font-style: italic\">myData</span><span style=\"color: #ABB2BF\"> &#125;) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #7F848E; font-style: italic\">// 要求将 获取过来的 data数据 更名为 myData</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #7F848E; font-style: italic\">// 内部处理</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">myData</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">render</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">msg</span><span style=\"color: #ABB2BF\">)</span></span></code></pre></div>\n\n<h2 id=\"综合案例\"><a href=\"#综合案例\" class=\"headerlink\" title=\"综合案例\"></a>综合案例</h2><h3 id=\"forEach遍历数组\"><a href=\"#forEach遍历数组\" class=\"headerlink\" title=\"forEach遍历数组\"></a>forEach遍历数组</h3><p>forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：  </p>\n<p>1.forEach 主要是遍历数组</p>\n<p>2.参数当前数组元素是必须要写的， 索引号可选。</p></blockquote>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// forEach 就是遍历  加强版的for循环  适合于遍历数组对象</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">arr</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #98C379\">&#39;red&#39;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&#39;green&#39;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&#39;pink&#39;</span><span style=\"color: #ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">result</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">arr</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">forEach</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E06C75; font-style: italic\">item</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75; font-style: italic\">index</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">item</span><span style=\"color: #ABB2BF\">)  </span><span style=\"color: #7F848E; font-style: italic\">// 数组元素 red  green pink</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">index</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 索引号</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// console.log(result)</span></span>\n<span class=\"line\"></span></code></pre></div>\n\n<h3 id=\"filter筛选数组\"><a href=\"#filter筛选数组\" class=\"headerlink\" title=\"filter筛选数组\"></a>filter筛选数组</h3><p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</p>\n<p>主要使用场景： 筛选数组符合条件的元素，并返回筛选之后元素的新数组</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">arr</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">20</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">30</span><span style=\"color: #ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// const newArr = arr.filter(function (item, index) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   // console.log(item)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   // console.log(index)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   return item &gt;= 20</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// &#125;)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 返回的符合条件的新数组</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">newArr</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">arr</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">filter</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75; font-style: italic\">item</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">=&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">item</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">&gt;=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">20</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">newArr</span><span style=\"color: #ABB2BF\">)</span></span></code></pre></div>\n\n\n\n<h2 id=\"深入对象\"><a href=\"#深入对象\" class=\"headerlink\" title=\"深入对象\"></a>深入对象</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>了解面向对象的基础概念，能够利用构造函数创建对象。</p></blockquote>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>构造函数是专门用于创建对象的函数，如果一个函数使用 <code>new</code> 关键字调用，那么这个函数就是构造函数。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 定义函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">foo</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;通过 new 也能调用函数...&#39;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 调用函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">foo</span><span style=\"color: #ABB2BF\">;</span></span></code></pre></div>\n\n<p>总结：</p>\n<ol start=\"2\">\n<li>使用 <code>new</code> 关键字调用函数的行为被称为实例化</li>\n<li>实例化构造函数时没有参数时可以省略 <code>()</code></li>\n<li>构造函数的返回值即为新创建的对象</li>\n<li>构造函数内部的 <code>return</code> 返回的值无效！</li>\n</ol>\n<p>注：实践中为了从视觉上区分构造函数和普通函数，习惯将构造函数的首字母大写。</p>\n<h3 id=\"实例成员\"><a href=\"#实例成员\" class=\"headerlink\" title=\"实例成员\"></a>实例成员</h3><p>通过构造函数创建的对象称为实例对象，实例对象中的属性和方法称为实例成员。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 构造函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 构造函数内部的 this 就是实例对象</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 实例对象中动态添加属性</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;小明&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 实例对象动态添加方法</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;大家好~&#39;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 实例化，p1 是实例对象</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// p1 实际就是 构造函数内部的 this</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">p1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">p1</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">p1</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 访问实例属性</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">p1</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">() </span><span style=\"color: #7F848E; font-style: italic\">// 调用实例方法</span></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li>构造函数内部 <code>this</code> 实际上就是实例对象，为其动态添加的属性和方法即为实例成员</li>\n<li>为构造函数传入参数，动态创建结构相同但值不同的对象</li>\n</ol>\n<p>注：构造函数创建的实例对象彼此独立互不影响。</p>\n<h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><p>在 JavaScript 中底层函数本质上也是对象类型，因此允许直接为函数动态添加属性或方法，构造函数的属性和方法被称为静态成员。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 构造函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75; font-style: italic\">name</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75; font-style: italic\">age</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 省略实例成员</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 静态属性</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">Person</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">eyes</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">2</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">Person</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">arms</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">2</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 静态方法</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">Person</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">walk</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;^_^人都会走路...&#39;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// this 指向 Person</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">eyes</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li>静态成员指的是添加到构造函数本身的属性和方法</li>\n<li>一般公共特征的属性或方法静态成员设置为静态成员</li>\n<li>静态成员方法中的 <code>this</code> 指向构造函数本身</li>\n</ol>\n<h2 id=\"内置构造函数\"><a href=\"#内置构造函数\" class=\"headerlink\" title=\"内置构造函数\"></a>内置构造函数</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>掌握各引用类型和包装类型对象属性和方法的使用。</p></blockquote>\n<p>在 JavaScript 中<strong>最主要</strong>的数据类型有 6 种，分别是字符串、数值、布尔、undefined、null 和 对象，常见的对象类型数据包括数组和普通对象。其中字符串、数值、布尔、undefined、null 也被称为简单类型或基础类型，对象也被称为引用类型。</p>\n<p>在 JavaScript 内置了一些构造函数，绝大部的数据处理都是基于这些构造函数实现的，JavaScript 基础阶段学习的 <code>Date</code> 就是内置的构造函数。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 实例化</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t</span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">date</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Date</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// date 即为实例对象</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">date</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div>\n\n<p>甚至字符串、数值、布尔、数组、普通对象也都有专门的构造函数，用于创建对应类型的数据。</p>\n<h3 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h3><p><code>Object</code> 是内置的构造函数，用于创建普通对象。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 通过构造函数创建普通对象</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">user</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Object</span><span style=\"color: #ABB2BF\">(&#123;</span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&#39;小明&#39;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">15</span><span style=\"color: #ABB2BF\">&#125;)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 这种方式声明的变量称为【字面量】</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">student</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;</span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&#39;杜子腾&#39;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">21</span><span style=\"color: #ABB2BF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 对象语法简写</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;小红&#39;</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">people</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 相当于 name: name</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 相当于 walk: function () &#123;&#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">walk</span><span style=\"color: #ABB2BF\"> () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;人都要走路...&#39;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">student</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">constructor</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">user</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">constructor</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">student</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">instanceof</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Object</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div>\n\n\n\n<p>总结：</p>\n<ol>\n<li>推荐使用字面量方式声明对象，而不是 <code>Object</code> 构造函数</li>\n<li><code>Object.assign</code> 静态方法创建新的对象</li>\n<li><code>Object.keys</code> 静态方法获取对象中所有属性</li>\n<li><code>Object.values</code> 表态方法获取对象中所有属性值</li>\n</ol>\n<h3 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h3><p><code>Array</code> 是内置的构造函数，用于创建数组。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 构造函数创建数组</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">arr</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Array</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">7</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">8</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 字面量方式创建数组</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">list</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> [</span><span style=\"color: #98C379\">&#39;html&#39;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&#39;css&#39;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&#39;javascript&#39;</span><span style=\"color: #ABB2BF\">]</span></span></code></pre></div>\n\n<p>数组赋值后，无论修改哪个变量另一个对象的数据值也会相当发生改变。</p>\n<p>总结：</p>\n<ol>\n<li><p>推荐使用字面量方式声明数组，而不是 <code>Array</code> 构造函数</p>\n</li>\n<li><p>实例方法 <code>forEach</code> 用于遍历数组，替代 <code>for</code> 循环 (重点)</p>\n</li>\n<li><p>实例方法 <code>filter</code> 过滤数组单元值，生成新数组(重点)</p>\n</li>\n<li><p>实例方法 <code>map</code> 迭代原数组，生成新数组(重点)</p>\n</li>\n<li><p>实例方法 <code>join</code> 数组元素拼接为字符串，返回字符串(重点)</p>\n</li>\n<li><p>实例方法  <code>find</code>  查找元素， 返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回 undefined(重点)</p>\n</li>\n<li><p>实例方法<code>every</code> 检测数组所有元素是否都符合指定条件，如果<strong>所有元素</strong>都通过检测返回 true，否则返回 false(重点)</p>\n</li>\n<li><p>实例方法<code>some</code> 检测数组中的元素是否满足指定条件   <strong>如果数组中有</strong>元素满足条件返回 true，否则返回 false</p>\n</li>\n<li><p>实例方法 <code>concat</code>  合并两个数组，返回生成新数组</p>\n</li>\n<li><p>实例方法 <code>sort</code> 对原数组单元值排序</p>\n</li>\n<li><p>实例方法 <code>splice</code> 删除或替换原数组单元</p>\n</li>\n<li><p>实例方法 <code>reverse</code> 反转数组</p>\n</li>\n<li><p>实例方法 <code>findIndex</code>  查找元素的索引值</p>\n</li>\n</ol>\n<h3 id=\"包装类型\"><a href=\"#包装类型\" class=\"headerlink\" title=\"包装类型\"></a>包装类型</h3><p>在 JavaScript 中的字符串、数值、布尔具有对象的使用特征，如具有属性和方法，如下代码举例：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 字符串类型</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;hello world!&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\"> \t</span><span style=\"color: #7F848E; font-style: italic\">// 统计字符的长度（字符数量）</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">length</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 数值类型</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">price</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">12.345</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 保留两位小数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">price</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">toFixed</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 12.34</span></span></code></pre></div>\n\n<p>之所以具有对象特征的原因是字符串、数值、布尔类型数据是 JavaScript 底层使用 Object 构造函数“包装”来的，被称为包装类型。</p>\n<h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h4><p><code>String</code> 是内置的构造函数，用于创建字符串。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 使用构造函数创建字符串</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">str</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">String</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;hello world!&#39;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 字面量创建字符串</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">str2</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;你好，世界！&#39;</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 检测是否属于同一个构造函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">str</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">constructor</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">===</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">str2</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">constructor</span><span style=\"color: #ABB2BF\">); </span><span style=\"color: #7F848E; font-style: italic\">// true</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">str</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">instanceof</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">String</span><span style=\"color: #ABB2BF\">); </span><span style=\"color: #7F848E; font-style: italic\">// false</span></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li>实例属性 <code>length</code> 用来获取字符串的度长(重点)</li>\n<li>实例方法 <code>split(&#39;分隔符&#39;)</code> 用来将字符串拆分成数组(重点)</li>\n<li>实例方法 <code>substring（需要截取的第一个字符的索引[,结束的索引号]）</code> 用于字符串截取(重点)</li>\n<li>实例方法 <code>startsWith(检测字符串[, 检测位置索引号])</code> 检测是否以某字符开头(重点)</li>\n<li>实例方法 <code>includes(搜索的字符串[, 检测位置索引号])</code> 判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false(重点)</li>\n<li>实例方法 <code>toUpperCase</code> 用于将字母转换成大写</li>\n<li>实例方法 <code>toLowerCase</code> 用于将就转换成小写</li>\n<li>实例方法 <code>indexOf</code>  检测是否包含某字符</li>\n<li>实例方法 <code>endsWith</code> 检测是否以某字符结尾</li>\n<li>实例方法 <code>replace</code> 用于替换字符串，支持正则匹配</li>\n<li>实例方法 <code>match</code> 用于查找字符串，支持正则匹配</li>\n</ol>\n<p>注：String 也可以当做普通函数使用，这时它的作用是强制转换成字符串数据类型。</p>\n<h4 id=\"Number\"><a href=\"#Number\" class=\"headerlink\" title=\"Number\"></a>Number</h4><p><code>Number</code> 是内置的构造函数，用于创建数值。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 使用构造函数创建数值</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Number</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;10&#39;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Number</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 字面量创建数值</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">z</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">20</span></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li>推荐使用字面量方式声明数值，而不是 <code>Number</code> 构造函数</li>\n<li>实例方法 <code>toFixed</code> 用于设置保留小数位的长度</li>\n</ol>\n<h2 id=\"编程思想\"><a href=\"#编程思想\" class=\"headerlink\" title=\"编程思想\"></a>编程思想</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>学习 JavaScript 中基于原型的面向对象编程序的语法实现，理解面向对象编程的特征。</p></blockquote>\n<h3 id=\"面向过程\"><a href=\"#面向过程\" class=\"headerlink\" title=\"面向过程\"></a>面向过程</h3><p>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次</p>\n<p>调用就可以了。</p>\n<p> 举个栗子：蛋炒饭</p>\n<p><img src=\"/images/JavaScript%E8%BF%9B%E9%98%B6/assets/1676792906898.png\" alt=\"67679290689\"></p>\n<h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3><p>面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作。</p>\n<p><img src=\"/images/JavaScript%E8%BF%9B%E9%98%B6/assets/1676792930329.png\" alt=\"67679293032\"></p>\n<p>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工。</p>\n<p>面向对象编程具有灵活、代码可复用、容易维护和开发的优点，更适合多人合作的大型软件项目。</p>\n<p>面向对象的特性：</p>\n<ul>\n<li><p>封装性</p>\n</li>\n<li><p>继承性</p>\n</li>\n<li><p>多态性</p>\n</li>\n</ul>\n<h2 id=\"构造函数-1\"><a href=\"#构造函数-1\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>对比以下通过面向对象的构造函数实现的封装：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;佚名&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 设置名字</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">setName</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E06C75; font-style: italic\">name</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">name</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 读取名字</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">getName</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> () </span><span style=\"color: #C678DD\">=&gt;</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 实例对像，获得了构造函数中封装的所有逻辑</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">p1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">p1</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">setName</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;小明&#39;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">p1</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 实例对象</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">p2</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">p2</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">)</span></span></code></pre></div>\n\n<p>封装是面向对象思想中比较重要的一部分，js面向对象可以通过构造函数实现的封装。</p>\n<p>同样的将变量和函数组合到了一起并能通过 this 实现数据的共享，所不同的是借助构造函数创建出来的实例对象之</p>\n<p>间是彼此不影响的</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>总结：</p>\n<ol>\n<li>构造函数体现了面向对象的封装特性</li>\n<li>构造函数实例创建的对象彼此独立、互不影响</li>\n</ol></blockquote>\n<p>封装是面向对象思想中比较重要的一部分，js面向对象可以通过构造函数实现的封装。</p>\n<p>前面我们学过的构造函数方法很好用，但是 存在<code>浪费内存</code>的问题</p>\n<h2 id=\"原型对象\"><a href=\"#原型对象\" class=\"headerlink\" title=\"原型对象\"></a>原型对象</h2><p>构造函数通过原型分配的函数是所有对象所 共享的。</p>\n<ul>\n<li>JavaScript 规定，每一个构造函数都有一个 prototype 属性，指向另一个对象，所以我们也称为原型对象</li>\n<li>这个对象可以挂载函数，对象实例化不会多次创建原型上函数，节约内存</li>\n<li>我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。</li>\n<li>构造函数和原型对象中的this 都指向 实例化的对象</li>\n</ul>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 每个函数都有 prototype 属性</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">Person</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">prototype</span><span style=\"color: #ABB2BF\">)</span></span></code></pre></div>\n\n\n\n<p>了解了 JavaScript 中构造函数与原型对象的关系后，再来看原型对象具体的作用，如下代码所示：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 此处未定义任何方法</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 为构造函数的原型对象添加方法</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">Person</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">prototype</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;Hi~&#39;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 实例化</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">p1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">p1</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">(); </span><span style=\"color: #7F848E; font-style: italic\">// 输出结果为 Hi~</span></span></code></pre></div>\n\n\n\n<p>构造函数 <code>Person</code> 中未定义任何方法，这时实例对象调用了原型对象中的方法 <code>sayHi</code>，接下来改动一下代码：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 此处定义同名方法 sayHi</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;嗨!&#39;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 为构造函数的原型对象添加方法</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">Person</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">prototype</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;Hi~&#39;</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">p1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">p1</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">(); </span><span style=\"color: #7F848E; font-style: italic\">// 输出结果为 嗨!</span></span></code></pre></div>\n\n<p>构造函数 <code>Person</code> 中定义与原型对象中相同名称的方法，这时实例对象调用则是构造函中的方法 <code>sayHi</code>。</p>\n<p>通过以上两个简单示例不难发现 JavaScript 中对象的工作机制：<strong>当访问对象的属性或方法时，先在当前实例对象是查找，然后再去原型对象查找，并且原型对象被所有实例共享。</strong></p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t</span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 此处定义同名方法 sayHi</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;嗨!&#39;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">+</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 为构造函数的原型对象添加方法</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">Person</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">prototype</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;Hi~&#39;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">+</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 在构造函数的原型对象上添加属性</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">Person</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">prototype</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;小明&#39;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">p1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">p1</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">(); </span><span style=\"color: #7F848E; font-style: italic\">// 输出结果为 嗨!</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">p2</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">p2</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">()</span></span></code></pre></div>\n\n<p>总结：<strong>结合构造函数原型的特征，实际开发重往往会将封装的功能函数添加到原型对象中。</strong></p>\n<h3 id=\"constructor-属性\"><a href=\"#constructor-属性\" class=\"headerlink\" title=\"constructor 属性\"></a>constructor 属性</h3><p>在哪里？ 每个原型对象里面都有个constructor 属性（constructor 构造函数）</p>\n<p>作用：该属性指向该原型对象的构造函数， 简单理解，就是指向我的爸爸，我是有爸爸的孩子</p>\n<p><strong>使用场景：</strong></p>\n<p>如果有多个对象的方法，我们可以给原型对象采取对象形式赋值.</p>\n<p>但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor 就不再指向当前构造函数了</p>\n<p>此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。</p>\n<h3 id=\"对象原型\"><a href=\"#对象原型\" class=\"headerlink\" title=\"对象原型\"></a>对象原型</h3><p>对象都会有一个属性 <strong>proto</strong> 指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype </p>\n<p>原型对象的属性和方法，就是因为对象有 <strong>proto</strong> 原型的存在。</p>\n<p>注意：</p>\n<ul>\n<li><strong>proto</strong> 是JS非标准属性</li>\n<li>[[prototype]]和__proto__意义相同</li>\n<li>用来表明当前实例对象指向哪个原型对象prototype</li>\n<li>__proto__对象原型里面也有一个 constructor属性，指向创建该实例对象的构造函数</li>\n</ul>\n<h3 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h3><p>继承是面向对象编程的另一个特征，通过继承进一步提升代码封装的程度，JavaScript 中大多是借助原型对象实现继承</p>\n<p>的特性。</p>\n<p>龙生龙、凤生凤、老鼠的儿子会打洞描述的正是继承的含义。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 继续抽取   公共的部分放到原型上</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// const Person1 = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   eyes: 2,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   head: 1</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// const Person2 = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   eyes: 2,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   head: 1</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 构造函数  new 出来的对象 结构一样，但是对象不一样</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">eyes</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">2</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">head</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// console.log(new Person)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 女人  构造函数   继承  想要 继承 Person</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Woman</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// Woman 通过原型来继承 Person</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 父构造函数（父类）   子构造函数（子类）</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 子类的原型 =  new 父类  </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Woman</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">prototype</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">()   </span><span style=\"color: #7F848E; font-style: italic\">// &#123;eyes: 2, head: 1&#125; </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 指回原来的构造函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Woman</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">prototype</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">constructor</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">Woman</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 给女人添加一个方法  生孩子</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Woman</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">prototype</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">baby</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;宝贝&#39;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">red</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Woman</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">red</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// console.log(Woman.prototype)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 男人 构造函数  继承  想要 继承 Person</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Man</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 通过 原型继承 Person</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Man</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">prototype</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">Man</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">prototype</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">constructor</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">Man</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">pink</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Man</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">pink</span><span style=\"color: #ABB2BF\">)</span></span></code></pre></div>\n\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><p>基于原型对象的继承使得不同构造函数的原型对象关联在一起，并且这种关联的关系是一种链状的结构，我们将原型对</p>\n<p>象的链状结构关系称为原型链</p>\n<p><img src=\"/images/JavaScript%E8%BF%9B%E9%98%B6/assets/1676793388695.png\" alt=\"67679338869\"></p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// function Objetc() &#123;&#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">Object</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">prototype</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">Object</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">prototype</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">__proto__</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">ldh</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// console.log(ldh.__proto__ === Person.prototype)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// console.log(Person.prototype.__proto__ === Object.prototype)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">ldh</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">instanceof</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Person</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">ldh</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">instanceof</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Object</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">ldh</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">instanceof</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Array</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">([</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">3</span><span style=\"color: #ABB2BF\">] </span><span style=\"color: #C678DD\">instanceof</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Array</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">Array</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">instanceof</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Object</span><span style=\"color: #ABB2BF\">)</span></span></code></pre></div>\n\n<p>① 当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</p>\n<p>② 如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）</p>\n<p>③ 如果还没有就查找原型对象的原型（Object的原型对象）</p>\n<p>④ 依此类推一直找到 Object 为止（null）</p>\n<p>⑤ __proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线</p>\n<p>⑥ 可以使用 instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上</p>\n<h2 id=\"深浅拷贝\"><a href=\"#深浅拷贝\" class=\"headerlink\" title=\"深浅拷贝\"></a>深浅拷贝</h2><h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><p>首先浅拷贝和深拷贝只针对引用类型</p>\n<p>浅拷贝：拷贝的是地址</p>\n<p>常见方法：</p>\n<ol>\n<li>拷贝对象：Object.assgin() &#x2F; 展开运算符 {…obj} 拷贝对象</li>\n<li>拷贝数组：Array.prototype.concat() 或者 […arr]</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果是简单数据类型拷贝值，引用数据类型拷贝的是地址 (简单理解： 如果是单层对象，没问题，如果有多层就有问题)</p></blockquote>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><p>首先浅拷贝和深拷贝只针对引用类型</p>\n<p>深拷贝：拷贝的是对象，不是地址</p>\n<p>常见方法：</p>\n<ol>\n<li>通过递归实现深拷贝</li>\n<li>lodash&#x2F;cloneDeep</li>\n<li>通过JSON.stringify()实现</li>\n</ol>\n<h4 id=\"递归实现深拷贝\"><a href=\"#递归实现深拷贝\" class=\"headerlink\" title=\"递归实现深拷贝\"></a>递归实现深拷贝</h4><p>函数递归：</p>\n<p>如果一个函数在内部可以调用其本身，那么这个函数就是递归函数</p>\n<ul>\n<li>简单理解:函数内部自己调用自己, 这个函数就是递归函数</li>\n<li>递归函数的作用和循环效果类似</li>\n<li>由于递归很容易发生“栈溢出”错误（stack overflow），所以必须要加退出条件 return</li>\n</ul>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">obj</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">uname</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&#39;pink&#39;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">18</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">hobby</span><span style=\"color: #ABB2BF\">: [</span><span style=\"color: #98C379\">&#39;乒乓球&#39;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&#39;足球&#39;</span><span style=\"color: #ABB2BF\">],</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">family</span><span style=\"color: #ABB2BF\">: &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E06C75\">baby</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&#39;小pink&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">o</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;&#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 拷贝函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">deepCopy</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75; font-style: italic\">newObj</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75; font-style: italic\">oldObj</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #C678DD\">debugger</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">k</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">in</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">oldObj</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #7F848E; font-style: italic\">// 处理数组的问题  一定先写数组 在写 对象 不能颠倒</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E06C75\">oldObj</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E06C75\">k</span><span style=\"color: #ABB2BF\">] </span><span style=\"color: #C678DD\">instanceof</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Array</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          </span><span style=\"color: #E06C75\">newObj</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E06C75\">k</span><span style=\"color: #ABB2BF\">] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> []</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          </span><span style=\"color: #7F848E; font-style: italic\">//  newObj[k] 接收 []  hobby</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          </span><span style=\"color: #7F848E; font-style: italic\">//  oldObj[k]   [&#39;乒乓球&#39;, &#39;足球&#39;]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          </span><span style=\"color: #61AFEF\">deepCopy</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">newObj</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E06C75\">k</span><span style=\"color: #ABB2BF\">], </span><span style=\"color: #E06C75\">oldObj</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E06C75\">k</span><span style=\"color: #ABB2BF\">])</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        &#125; </span><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E06C75\">oldObj</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E06C75\">k</span><span style=\"color: #ABB2BF\">] </span><span style=\"color: #C678DD\">instanceof</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Object</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          </span><span style=\"color: #E06C75\">newObj</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E06C75\">k</span><span style=\"color: #ABB2BF\">] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;&#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          </span><span style=\"color: #61AFEF\">deepCopy</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">newObj</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E06C75\">k</span><span style=\"color: #ABB2BF\">], </span><span style=\"color: #E06C75\">oldObj</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E06C75\">k</span><span style=\"color: #ABB2BF\">])</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          </span><span style=\"color: #7F848E; font-style: italic\">//  k  属性名 uname age    oldObj[k]  属性值  18</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          </span><span style=\"color: #7F848E; font-style: italic\">// newObj[k]  === o.uname  给新对象添加属性</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          </span><span style=\"color: #E06C75\">newObj</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E06C75\">k</span><span style=\"color: #ABB2BF\">] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">oldObj</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E06C75\">k</span><span style=\"color: #ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">deepCopy</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">o</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">obj</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 函数调用  两个参数 o 新对象  obj 旧对象</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">o</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">o</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">20</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">o</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">hobby</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;篮球&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">o</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E5C07B\">family</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">baby</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;老pink&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">obj</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">([</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">23</span><span style=\"color: #ABB2BF\">] </span><span style=\"color: #C678DD\">instanceof</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Object</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 复习</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// const obj = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   uname: &#39;pink&#39;,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   age: 18,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   hobby: [&#39;乒乓球&#39;, &#39;足球&#39;]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// function deepCopy(&#123; &#125;, oldObj) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   // k 属性名  oldObj[k] 属性值</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   for (let k in oldObj) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//     // 处理数组的问题   k 变量</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//     newObj[k] = oldObj[k]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//     // o.uname = &#39;pink&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//     // newObj.k  = &#39;pink&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">//   &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// &#125;</span></span></code></pre></div>\n\n<h4 id=\"js库lodash里面cloneDeep内部实现了深拷贝\"><a href=\"#js库lodash里面cloneDeep内部实现了深拷贝\" class=\"headerlink\" title=\"js库lodash里面cloneDeep内部实现了深拷贝\"></a>js库lodash里面cloneDeep内部实现了深拷贝</h4><div class=\"language-html\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">html</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E06C75\">body</span><span style=\"color: #ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">&lt;!-- 先引用 --&gt;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &lt;</span><span style=\"color: #E06C75\">script</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">src</span><span style=\"color: #ABB2BF\">=</span><span style=\"color: #98C379\">&quot;./lodash.min.js&quot;</span><span style=\"color: #ABB2BF\">&gt;&lt;/</span><span style=\"color: #E06C75\">script</span><span style=\"color: #ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &lt;</span><span style=\"color: #E06C75\">script</span><span style=\"color: #ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">obj</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">uname</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&#39;pink&#39;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">18</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">hobby</span><span style=\"color: #ABB2BF\">: [</span><span style=\"color: #98C379\">&#39;乒乓球&#39;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&#39;足球&#39;</span><span style=\"color: #ABB2BF\">],</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">family</span><span style=\"color: #ABB2BF\">: &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E06C75\">baby</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&#39;小pink&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">o</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">_</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">cloneDeep</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">obj</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">o</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">o</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E5C07B\">family</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">baby</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;老pink&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">obj</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &lt;/</span><span style=\"color: #E06C75\">script</span><span style=\"color: #ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">&lt;/</span><span style=\"color: #E06C75\">body</span><span style=\"color: #ABB2BF\">&gt;</span></span></code></pre></div>\n\n<h4 id=\"JSON序列化\"><a href=\"#JSON序列化\" class=\"headerlink\" title=\"JSON序列化\"></a>JSON序列化</h4><div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">obj</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">uname</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&#39;pink&#39;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">18</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">hobby</span><span style=\"color: #ABB2BF\">: [</span><span style=\"color: #98C379\">&#39;乒乓球&#39;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">&#39;足球&#39;</span><span style=\"color: #ABB2BF\">],</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">family</span><span style=\"color: #ABB2BF\">: &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E06C75\">baby</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&#39;小pink&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 把对象转换为 JSON 字符串</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// console.log(JSON.stringify(obj))</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">o</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">JSON</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">parse</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">JSON</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">stringify</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">obj</span><span style=\"color: #ABB2BF\">))</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">o</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">o</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E5C07B\">family</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">baby</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;123&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">obj</span><span style=\"color: #ABB2BF\">)</span></span></code></pre></div>\n\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>了解 JavaScript 中程序异常处理的方法，提升代码运行的健壮性。</p></blockquote>\n<h3 id=\"throw\"><a href=\"#throw\" class=\"headerlink\" title=\"throw\"></a>throw</h3><p>异常处理是指预估代码执行过程中可能发生的错误，然后最大程度的避免错误的发生导致整个程序无法继续运行</p>\n<p>总结：</p>\n<ol>\n<li>throw 抛出异常信息，程序也会终止执行</li>\n<li>throw 后面跟的是错误提示信息</li>\n<li>Error 对象配合 throw 使用，能够设置更详细的错误信息</li>\n</ol>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">counter</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75; font-style: italic\">x</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75; font-style: italic\">y</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #56B6C2\">!</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">||</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">!</span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #7F848E; font-style: italic\">// throw &#39;参数不能为空!&#39;;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #C678DD\">throw</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Error</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;参数不能为空!&#39;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">+</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">y</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #61AFEF\">counter</span><span style=\"color: #ABB2BF\">()</span></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li><code>throw</code> 抛出异常信息，程序也会终止执行</li>\n<li><code>throw</code> 后面跟的是错误提示信息</li>\n<li><code>Error</code> 对象配合 <code>throw</code> 使用，能够设置更详细的错误信息</li>\n</ol>\n<h3 id=\"try-…-catch\"><a href=\"#try-…-catch\" class=\"headerlink\" title=\"try … catch\"></a>try … catch</h3><div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">   </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">foo</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #C678DD\">try</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #7F848E; font-style: italic\">// 查找 DOM 节点</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">document</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">querySelector</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;.p&#39;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E5C07B\">style</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">color</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;red&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      &#125; </span><span style=\"color: #C678DD\">catch</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E06C75\">error</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #7F848E; font-style: italic\">// try 代码段中执行有错误时，会执行 catch 代码段</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #7F848E; font-style: italic\">// 查看错误信息</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">error</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">message</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #7F848E; font-style: italic\">// 终止代码继续执行</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">return</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #C678DD\">finally</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          </span><span style=\"color: #61AFEF\">alert</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;执行&#39;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;如果出现错误，我的语句不会执行&#39;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">foo</span><span style=\"color: #ABB2BF\">()</span></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li><code>try...catch</code> 用于捕获错误信息</li>\n<li>将预估可能发生错误的代码写在 <code>try</code> 代码段中</li>\n<li>如果 <code>try</code> 代码段中出现错误后，会执行 <code>catch</code> 代码段，并截获到错误信息</li>\n</ol>\n<h3 id=\"debugger\"><a href=\"#debugger\" class=\"headerlink\" title=\"debugger\"></a>debugger</h3><p>相当于断点调试</p>\n<h2 id=\"处理this\"><a href=\"#处理this\" class=\"headerlink\" title=\"处理this\"></a>处理this</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>了解函数中 this 在不同场景下的默认值，知道动态指定函数 this 值的方法。</p></blockquote>\n<p><code>this</code> 是 JavaScript 最具“魅惑”的知识点，不同的应用场合 <code>this</code> 的取值可能会有意想不到的结果，在此我们对以往学习过的关于【 <code>this</code> 默认的取值】情况进行归纳和总结。</p>\n<h3 id=\"普通函数\"><a href=\"#普通函数\" class=\"headerlink\" title=\"普通函数\"></a>普通函数</h3><p><strong>普通函数</strong>的调用方式决定了 <code>this</code> 的值，即【谁调用 <code>this</code> 的值指向谁】，如下代码所示：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 普通函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">)  </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 函数表达式</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">sayHello</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 函数的调用方式决定了 this 的值</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">() </span><span style=\"color: #7F848E; font-style: italic\">// window</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">window</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 普通对象</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">user</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&#39;小明&#39;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">walk</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 动态为 user 添加方法</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">user</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">sayHi</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">sayHi</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">uesr</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">sayHello</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">sayHello</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 函数调用方式，决定了 this 的值</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">user</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">user</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sayHello</span><span style=\"color: #ABB2BF\">()</span></span></code></pre></div>\n\n<p>注： 普通函数没有明确调用者时 <code>this</code> 值为 <code>window</code>，严格模式下没有调用者时 <code>this</code> 的值为 <code>undefined</code>。</p>\n<h3 id=\"箭头函数-1\"><a href=\"#箭头函数-1\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p><strong>箭头函数</strong>中的 <code>this</code> 与普通函数完全不同，也不受调用方式的影响，事实上箭头函数中并不存在 <code>this</code> ！箭头函数中访问的 <code>this</code> 不过是箭头函数所在作用域的 <code>this</code> 变量。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 此处为 window</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 箭头函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 该箭头函数中的 this 为函数声明环境中 this 一致</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 普通对象</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">user</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&#39;小明&#39;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 该箭头函数中的 this 为函数声明环境中 this 一致</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">walk</span><span style=\"color: #ABB2BF\">: () </span><span style=\"color: #C678DD\">=&gt;</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">sleep</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">str</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&#39;hello&#39;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> () </span><span style=\"color: #C678DD\">=&gt;</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">str</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 该箭头函数中的 this 与 sleep 中的 this 一致</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #7F848E; font-style: italic\">// 调用箭头函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #61AFEF\">fn</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 动态添加方法</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">user</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">sayHi</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">sayHi</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 函数调用</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">user</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">user</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">sleep</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">user</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">walk</span><span style=\"color: #ABB2BF\">()</span></span></code></pre></div>\n\n<p>在开发中【使用箭头函数前需要考虑函数中 <code>this</code> 的值】，<strong>事件回调函数</strong>使用箭头函数时，<code>this</code> 为全局的 <code>window</code>，因此DOM事件回调函数不推荐使用箭头函数，如下代码所示：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// DOM 节点</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">btn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">document</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">querySelector</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;.btn&#39;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 箭头函数 此时 this 指向了 window</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">btn</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">addEventListener</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;click&#39;</span><span style=\"color: #ABB2BF\">, () </span><span style=\"color: #C678DD\">=&gt;</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 普通函数 此时 this 指向了 DOM 对象</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">btn</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">addEventListener</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;click&#39;</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;)</span></span></code></pre></div>\n\n<p>同样由于箭头函数 <code>this</code> 的原因，<strong>基于原型的面向对象也不推荐采用箭头函数</strong>，如下代码所示：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 原型对像上添加了箭头函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">Person</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">prototype</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">walk</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> () </span><span style=\"color: #C678DD\">=&gt;</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&#39;人都要走路...&#39;</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">); </span><span style=\"color: #7F848E; font-style: italic\">// window</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">p1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Person</span><span style=\"color: #ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">p1</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">walk</span><span style=\"color: #ABB2BF\">()</span></span></code></pre></div>\n\n<h3 id=\"改变this指向\"><a href=\"#改变this指向\" class=\"headerlink\" title=\"改变this指向\"></a>改变this指向</h3><p>以上归纳了普通函数和箭头函数中关于 <code>this</code> 默认值的情形，不仅如此 JavaScript 中还允许指定函数中 <code>this</code> 的指向，有 3 个方法可以动态指定普通函数中 <code>this</code> 的指向：</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h4><p>使用 <code>call</code> 方法调用函数，同时指定函数中 <code>this</code> 的值，使用方法如下代码所示：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 普通函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">user</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&#39;小明&#39;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">18</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">student</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&#39;小红&#39;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">16</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 调用函数并指定 this 的值</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">sayHi</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">call</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">user</span><span style=\"color: #ABB2BF\">); </span><span style=\"color: #7F848E; font-style: italic\">// this 值为 user</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">sayHi</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">call</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">student</span><span style=\"color: #ABB2BF\">); </span><span style=\"color: #7F848E; font-style: italic\">// this 值为 student</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 求和函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">counter</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75; font-style: italic\">x</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75; font-style: italic\">y</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">+</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">y</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 调用 counter 函数，并传入参数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">result</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">counter</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">call</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">null</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">result</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li><code>call</code> 方法能够在调用函数的同时指定 <code>this</code> 的值</li>\n<li>使用 <code>call</code> 方法调用函数时，第1个参数为 <code>this</code> 指定的值</li>\n<li><code>call</code> 方法的其余参数会依次自动传入函数做为函数的参数</li>\n</ol>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h4><p>使用 <code>call</code> 方法<strong>调用函数</strong>，同时指定函数中 <code>this</code> 的值，使用方法如下代码所示：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 普通函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">user</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&#39;小明&#39;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">18</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">student</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&#39;小红&#39;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">16</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 调用函数并指定 this 的值</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">sayHi</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">apply</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">user</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// this 值为 user</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">sayHi</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">apply</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">student</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// this 值为 student</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 求和函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">counter</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75; font-style: italic\">x</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75; font-style: italic\">y</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">+</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">y</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 调用 counter 函数，并传入参数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">result</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">counter</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">apply</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">null</span><span style=\"color: #ABB2BF\">, [</span><span style=\"color: #D19A66\">5</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #D19A66\">10</span><span style=\"color: #ABB2BF\">])</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">result</span><span style=\"color: #ABB2BF\">)</span></span></code></pre></div>\n\n<p>总结：</p>\n<ol>\n<li><code>apply</code> 方法能够在调用函数的同时指定 <code>this</code> 的值</li>\n<li>使用 <code>apply</code> 方法调用函数时，第1个参数为 <code>this</code> 指定的值</li>\n<li><code>apply</code> 方法第2个参数为数组，数组的单元值依次自动传入函数做为函数的参数</li>\n</ol>\n<h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h4><p><code>bind</code> 方法并<strong>不会调用函数</strong>，而是创建一个指定了 <code>this</code> 值的新函数，使用方法如下代码所示：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki \" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 普通函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">sayHi</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">this</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">user</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">&#39;小明&#39;</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">age</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">18</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 调用 bind 指定 this 的值</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">sayHello</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">sayHi</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">bind</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">user</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E; font-style: italic\">// 调用使用 bind 创建的新函数</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #61AFEF\">sayHello</span><span style=\"color: #ABB2BF\">()</span></span></code></pre></div>\n\n<p>注：<code>bind</code> 方法创建新的函数，与原函数的唯一的变化是改变了 <code>this</code> 的值。</p>\n<h2 id=\"防抖节流\"><a href=\"#防抖节流\" class=\"headerlink\" title=\"防抖节流\"></a>防抖节流</h2><ol>\n<li>防抖（debounce）<br>所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间</li>\n<li>节流（throttle）<br>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数</li>\n</ol>\n","feature":true,"text":"JavaScript进阶的重要性在于深入理解语言的高级概念和技术，如闭包、原型链、异步编程等。这将使开发者能够编写更高效、可维护和可扩展的代码，解决复杂的问题，并应对日益增长的Web应用需求。进阶的JavaScript知识将提升开发者的技术能力和职业竞争力。...","permalink":"/post/前端/JavaScript/JavaScript进阶","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"26 mins."},"categories":[{"name":"计算机","slug":"计算机","count":8,"path":"api/categories/计算机.json"},{"name":"前端","slug":"计算机/前端","count":4,"path":"api/categories/计算机/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":10,"path":"api/tags/笔记.json"},{"name":"JavaScript","slug":"JavaScript","count":2,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JavaScript%E8%BF%9B%E9%98%B6\"><span class=\"toc-text\">JavaScript进阶</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">作用域</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">局部作用域</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">函数作用域</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9D%97%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">块作用域</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">全局作用域</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE\"><span class=\"toc-text\">作用域链</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">闭包</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87\"><span class=\"toc-text\">变量提升</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87\"><span class=\"toc-text\">函数提升</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">函数参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">默认值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">动态参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">剩余参数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">箭头函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">箭头函数参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0-this\"><span class=\"toc-text\">箭头函数 this</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">解构赋值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84\"><span class=\"toc-text\">数组解构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E8%A7%A3%E6%9E%84\"><span class=\"toc-text\">对象解构</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">综合案例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#forEach%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">forEach遍历数组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#filter%E7%AD%9B%E9%80%89%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">filter筛选数组</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%85%A5%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">深入对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">构造函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B%E6%88%90%E5%91%98\"><span class=\"toc-text\">实例成员</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E6%88%90%E5%91%98\"><span class=\"toc-text\">静态成员</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%AE%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">内置构造函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Object\"><span class=\"toc-text\">Object</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Array\"><span class=\"toc-text\">Array</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">包装类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#String\"><span class=\"toc-text\">String</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Number\"><span class=\"toc-text\">Number</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">编程思想</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">面向过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">面向对象</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-1\"><span class=\"toc-text\">构造函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">原型对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#constructor-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">constructor 属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E5%8E%9F%E5%9E%8B\"><span class=\"toc-text\">对象原型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">原型继承</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E9%93%BE\"><span class=\"toc-text\">原型链</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">深浅拷贝</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%85%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">浅拷贝</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">深拷贝</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">递归实现深拷贝</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#js%E5%BA%93lodash%E9%87%8C%E9%9D%A2cloneDeep%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E4%BA%86%E6%B7%B1%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">js库lodash里面cloneDeep内部实现了深拷贝</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#JSON%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">JSON序列化</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\"><span class=\"toc-text\">异常处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#throw\"><span class=\"toc-text\">throw</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#try-%E2%80%A6-catch\"><span class=\"toc-text\">try … catch</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#debugger\"><span class=\"toc-text\">debugger</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86this\"><span class=\"toc-text\">处理this</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">普通函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0-1\"><span class=\"toc-text\">箭头函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%94%B9%E5%8F%98this%E6%8C%87%E5%90%91\"><span class=\"toc-text\">改变this指向</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#call\"><span class=\"toc-text\">call</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#apply\"><span class=\"toc-text\">apply</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#bind\"><span class=\"toc-text\">bind</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81\"><span class=\"toc-text\">防抖节流</span></a></li></ol></li></ol>","author":{"name":"Honman","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"这家伙很坏 什么都没留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"JavaScript-基础笔记","uid":"5db41f0a5fc879d1afc84eff3a276b04","slug":"前端/JavaScript/JavaScript基础","date":"2023-08-10T02:20:00.000Z","updated":"2023-09-11T10:23:32.384Z","comments":true,"path":"api/articles/前端/JavaScript/JavaScript基础.json","keywords":null,"cover":"/images/cover/4.jpg","text":"JavaScript基础的掌握对于现代Web开发至关重要。它是一种强大的编程语言，能够为网页添加交互性和动态性。了解JavaScript的基础知识是构建复杂应用程序和实现优化的用户体验的基础。无论是前端开发还是后端开发，掌握JavaScript基础都是成为一名出色开发者的必备技能。...","permalink":"/post/前端/JavaScript/JavaScript基础","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"25 mins."},"categories":[{"name":"计算机","slug":"计算机","count":8,"path":"api/categories/计算机.json"},{"name":"前端","slug":"计算机/前端","count":4,"path":"api/categories/计算机/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":10,"path":"api/tags/笔记.json"},{"name":"JavaScript","slug":"JavaScript","count":2,"path":"api/tags/JavaScript.json"}],"author":{"name":"Honman","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"这家伙很坏 什么都没留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}