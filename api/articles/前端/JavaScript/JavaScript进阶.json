{"title":"JavaScript-进阶笔记","uid":"19e12028a5359d260a4ec9c616f8a947","slug":"前端/JavaScript/JavaScript进阶","date":"2023-08-24T00:30:00.000Z","updated":"2023-08-24T15:36:13.748Z","comments":true,"path":"api/articles/前端/JavaScript/JavaScript进阶.json","keywords":null,"cover":"/images/cover/4.jpg","content":"<h1 id=\"JavaScript-进阶\"><a href=\"#JavaScript-进阶\" class=\"headerlink\" title=\"JavaScript 进阶\"></a>JavaScript 进阶</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>学习作用域、变量提升、闭包等语言特征，加深对 JavaScript 的理解，掌握变量赋值、函数声明的简洁语法，降低代码的冗余度。</p></blockquote>\n<ul>\n<li>理解作用域对程序执行的影响</li>\n<li>能够分析程序执行的作用域范围</li>\n<li>理解闭包本质，利用闭包创建隔离作用域</li>\n<li>了解什么变量提升及函数提升</li>\n<li>掌握箭头函数、解析剩余参数等简洁语法</li>\n</ul>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>了解作用域对程序执行的影响及作用域链的查找机制，使用闭包函数创建隔离作用域避免全局变量污染。</p></blockquote>\n<p>作用域（scope）规定了变量能够被访问的“范围”，离开了这个“范围”变量便不能被访问，作用域分为全局作用域和局部作用域。</p>\n<h3 id=\"局部作用域\"><a href=\"#局部作用域\" class=\"headerlink\" title=\"局部作用域\"></a>局部作用域</h3><p>局部作用域分为函数作用域和块作用域。</p>\n<h4 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h4><p>在函数内部声明的变量只能在函数内部被访问，外部无法直接访问。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 声明 counter 函数\n  function counter(x, y) &#123;\n    &#x2F;&#x2F; 函数内部声明的变量\n    const s &#x3D; x + y\n    console.log(s) &#x2F;&#x2F; 18\n  &#125;\n  &#x2F;&#x2F; 设用 counter 函数\n  counter(10, 8)\n  &#x2F;&#x2F; 访问变量 s\n  console.log(s)&#x2F;&#x2F; 报错\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>总结：</p>\n<ol>\n<li>函数内部声明的变量，在函数外部无法被访问</li>\n<li>函数的参数也是函数内部的局部变量</li>\n<li>不同函数内部声明的变量无法互相访问</li>\n<li>函数执行完毕后，函数内部的变量实际被清空了</li>\n</ol>\n<h4 id=\"块作用域\"><a href=\"#块作用域\" class=\"headerlink\" title=\"块作用域\"></a>块作用域</h4><p>在 JavaScript 中使用 <code>&#123;&#125;</code> 包裹的代码称为代码块，代码块内部声明的变量外部将【有可能】无法被访问。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#123;\n    &#x2F;&#x2F; age 只能在该代码块中被访问\n    let age &#x3D; 18;\n    console.log(age); &#x2F;&#x2F; 正常\n  &#125;\n  \n  &#x2F;&#x2F; 超出了 age 的作用域\n  console.log(age) &#x2F;&#x2F; 报错\n  \n  let flag &#x3D; true;\n  if(flag) &#123;\n    &#x2F;&#x2F; str 只能在该代码块中被访问\n    let str &#x3D; &#39;hello world!&#39;\n    console.log(str); &#x2F;&#x2F; 正常\n  &#125;\n  \n  &#x2F;&#x2F; 超出了 age 的作用域\n  console.log(str); &#x2F;&#x2F; 报错\n  \n  for(let t &#x3D; 1; t &lt;&#x3D; 6; t++) &#123;\n    &#x2F;&#x2F; t 只能在该代码块中被访问\n    console.log(t); &#x2F;&#x2F; 正常\n  &#125;\n  \n  &#x2F;&#x2F; 超出了 t 的作用域\n  console.log(t); &#x2F;&#x2F; 报错\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>JavaScript 中除了变量外还有常量，常量与变量本质的区别是【常量必须要有值且不允许被重新赋值】，常量值为对象时其属性和方法允许重新赋值。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 必须要有值\n  const version &#x3D; &#39;1.0.0&#39;;\n\n  &#x2F;&#x2F; 不能重新赋值\n  &#x2F;&#x2F; version &#x3D; &#39;1.0.1&#39;;\n\n  &#x2F;&#x2F; 常量值为对象类型\n  const user &#x3D; &#123;\n    name: &#39;小明&#39;,\n    age: 18\n  &#125;\n\n  &#x2F;&#x2F; 不能重新赋值\n  user &#x3D; &#123;&#125;;\n\n  &#x2F;&#x2F; 属性和方法允许被修改\n  user.name &#x3D; &#39;小小明&#39;;\n  user.gender &#x3D; &#39;男&#39;;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>总结：</p>\n<ol>\n<li><code>let</code> 声明的变量会产生块作用域，<code>var</code> 不会产生块作用域</li>\n<li><code>const</code> 声明的常量也会产生块作用域</li>\n<li>不同代码块之间的变量无法互相访问</li>\n<li>推荐使用 <code>let</code> 或 <code>const</code></li>\n</ol>\n<p>注：开发中 <code>let</code> 和 <code>const</code> 经常不加区分的使用，如果担心某个值会不小被修改时，则只能使用 <code>const</code> 声明成常量。</p>\n<h3 id=\"全局作用域\"><a href=\"#全局作用域\" class=\"headerlink\" title=\"全局作用域\"></a>全局作用域</h3><p><code>&lt;script&gt;</code> 标签和 <code>.js</code> 文件的【最外层】就是所谓的全局作用域，在此声明的变量在函数内部也可以被访问。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 此处是全局\n  \n  function sayHi() &#123;\n    &#x2F;&#x2F; 此处为局部\n  &#125;\n\n  &#x2F;&#x2F; 此处为全局\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>全局作用域中声明的变量，任何其它作用域都可以被访问，如下代码所示：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n    &#x2F;&#x2F; 全局变量 name\n    const name &#x3D; &#39;小明&#39;\n  \n  \t&#x2F;&#x2F; 函数作用域中访问全局\n    function sayHi() &#123;\n      &#x2F;&#x2F; 此处为局部\n      console.log(&#39;你好&#39; + name)\n    &#125;\n\n    &#x2F;&#x2F; 全局变量 flag 和 x\n    const flag &#x3D; true\n    let x &#x3D; 10\n  \n  \t&#x2F;&#x2F; 块作用域中访问全局\n    if(flag) &#123;\n      let y &#x3D; 5\n      console.log(x + y) &#x2F;&#x2F; x 是全局的\n    &#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>总结：</p>\n<ol>\n<li>为 <code>window</code> 对象动态添加的属性默认也是全局的，不推荐！</li>\n<li>函数中未使用任何关键字声明的变量为全局变量，不推荐！！！</li>\n<li>尽可能少的声明全局变量，防止全局变量被污染</li>\n</ol>\n<p>JavaScript 中的作用域是程序被执行时的底层机制，了解这一机制有助于规范代码书写习惯，避免因作用域导致的语法错误。</p>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><p>在解释什么是作用域链前先来看一段代码：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 全局作用域\n  let a &#x3D; 1\n  let b &#x3D; 2\n  &#x2F;&#x2F; 局部作用域\n  function f() &#123;\n    let c\n    &#x2F;&#x2F; 局部作用域\n    function g() &#123;\n      let d &#x3D; &#39;yo&#39;\n    &#125;\n  &#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>函数内部允许创建新的函数，<code>f</code> 函数内部创建的新函数 <code>g</code>，会产生新的函数作用域，由此可知作用域产生了嵌套的关系。</p>\n<p>如下图所示，父子关系的作用域关联在一起形成了链状的结构，作用域链的名字也由此而来。</p>\n<p>作用域链本质上是底层的变量查找机制，在函数被执行时，会优先查找当前函数作用域中查找变量，如果当前作用域查找不到则会依次逐级查找父级作用域直到全局作用域，如下代码所示：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 全局作用域\n  let a &#x3D; 1\n  let b &#x3D; 2\n\n  &#x2F;&#x2F; 局部作用域\n  function f() &#123;\n    let c\n    &#x2F;&#x2F; let a &#x3D; 10;\n    console.log(a) &#x2F;&#x2F; 1 或 10\n    console.log(d) &#x2F;&#x2F; 报错\n    \n    &#x2F;&#x2F; 局部作用域\n    function g() &#123;\n      let d &#x3D; &#39;yo&#39;\n      &#x2F;&#x2F; let b &#x3D; 20;\n      console.log(b) &#x2F;&#x2F; 2 或 20\n    &#125;\n    \n    &#x2F;&#x2F; 调用 g 函数\n    g()\n  &#125;\n\n  console.log(c) &#x2F;&#x2F; 报错\n  console.log(d) &#x2F;&#x2F; 报错\n  \n  f();\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>总结：</p>\n<ol>\n<li>嵌套关系的作用域串联起来形成了作用域链</li>\n<li>相同作用域链中按着从小到大的规则查找变量</li>\n<li>子作用域能够访问父作用域，父级作用域无法访问子级作用域</li>\n</ol>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>闭包是一种比较特殊和函数，使用闭包能够访问函数作用域中的变量。从代码形式上看闭包是一个做为返回值的函数，如下代码所示：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 1. 闭包 : 内层函数 + 外层函数变量\n    &#x2F;&#x2F; function outer() &#123;\n    &#x2F;&#x2F;   const a &#x3D; 1\n    &#x2F;&#x2F;   function f() &#123;\n    &#x2F;&#x2F;     console.log(a)\n    &#x2F;&#x2F;   &#125;\n    &#x2F;&#x2F;   f()\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; outer()\n\n    &#x2F;&#x2F; 2. 闭包的应用： 实现数据的私有。统计函数的调用次数\n    &#x2F;&#x2F; let count &#x3D; 1\n    &#x2F;&#x2F; function fn() &#123;\n    &#x2F;&#x2F;   count++\n    &#x2F;&#x2F;   console.log(&#96;函数被调用$&#123;count&#125;次&#96;)\n    &#x2F;&#x2F; &#125;\n\n    &#x2F;&#x2F; 3. 闭包的写法  统计函数的调用次数\n    function outer() &#123;\n      let count &#x3D; 1\n      function fn() &#123;\n        count++\n        console.log(&#96;函数被调用$&#123;count&#125;次&#96;)\n      &#125;\n      return fn\n    &#125;\n    const re &#x3D; outer()\n    &#x2F;&#x2F; const re &#x3D; function fn() &#123;\n    &#x2F;&#x2F;   count++\n    &#x2F;&#x2F;   console.log(&#96;函数被调用$&#123;count&#125;次&#96;)\n    &#x2F;&#x2F; &#125;\n    re()\n    re()\n    &#x2F;&#x2F; const fn &#x3D; function() &#123; &#125;  函数表达式\n    &#x2F;&#x2F; 4. 闭包存在的问题： 可能会造成内存泄漏\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>总结：</p>\n<p>1.怎么理解闭包？</p>\n<ul>\n<li>闭包 &#x3D; 内层函数 + 外层函数的变量</li>\n</ul>\n<p>2.闭包的作用？</p>\n<ul>\n<li>封闭数据，实现数据私有，外部也可以访问函数内部的变量</li>\n<li>闭包很有用，因为它允许将函数与其所操作的某些数据（环境）关联起来</li>\n</ul>\n<p>3.闭包可能引起的问题？</p>\n<ul>\n<li>内存泄漏</li>\n</ul>\n<h3 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h3><p>变量提升是 JavaScript 中比较“奇怪”的现象，它允许在变量声明之前即被访问，</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 访问变量 str\n  console.log(str + &#39;world!&#39;);\n\n  &#x2F;&#x2F; 声明变量 str\n  var str &#x3D; &#39;hello &#39;;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>总结：</p>\n<ol>\n<li>变量在未声明即被访问时会报语法错误</li>\n<li>变量在声明之前即被访问，变量的值为 <code>undefined</code></li>\n<li><code>let</code> 声明的变量不存在变量提升，推荐使用 <code>let</code></li>\n<li>变量提升出现在相同作用域当中</li>\n<li>实际开发中推荐先声明再访问变量</li>\n</ol>\n<p>注：关于变量提升的原理分析会涉及较为复杂的词法分析等知识，而开发中使用 <code>let</code> 可以轻松规避变量的提升，因此在此不做过多的探讨，有兴趣可<a href=\"https://segmentfault.com/a/1190000013915935\">查阅资料</a>。</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>知道函数参数默认值、动态参数、剩余参数的使用细节，提升函数应用的灵活度，知道箭头函数的语法及与普通函数的差异。</p></blockquote>\n<h3 id=\"函数提升\"><a href=\"#函数提升\" class=\"headerlink\" title=\"函数提升\"></a>函数提升</h3><p>函数提升与变量提升比较类似，是指函数在声明之前即可被调用。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 调用函数\n  foo()\n  &#x2F;&#x2F; 声明函数\n  function foo() &#123;\n    console.log(&#39;声明之前即被调用...&#39;)\n  &#125;\n\n  &#x2F;&#x2F; 不存在提升现象\n  bar()  &#x2F;&#x2F; 错误\n  var bar &#x3D; function () &#123;\n    console.log(&#39;函数表达式不存在提升现象...&#39;)\n  &#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>总结：</p>\n<ol>\n<li>函数提升能够使函数的声明调用更灵活</li>\n<li>函数表达式不存在提升的现象</li>\n<li>函数提升出现在相同作用域当中</li>\n</ol>\n<h3 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a>函数参数</h3><p>函数参数的使用细节，能够提升函数应用的灵活度。</p>\n<h4 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 设置参数默认值\n  function sayHi(name&#x3D;&quot;小明&quot;, age&#x3D;18) &#123;\n    document.write(&#96;&lt;p&gt;大家好，我叫$&#123;name&#125;，我今年$&#123;age&#125;岁了。&lt;&#x2F;p&gt;&#96;);\n  &#125;\n  &#x2F;&#x2F; 调用函数\n  sayHi();\n  sayHi(&#39;小红&#39;);\n  sayHi(&#39;小刚&#39;, 21);\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>总结：</p>\n<ol>\n<li>声明函数时为形参赋值即为参数的默认值</li>\n<li>如果参数未自定义默认值时，参数的默认值为 <code>undefined</code></li>\n<li>调用函数时没有传入对应实参时，参数的默认值被当做实参传入</li>\n</ol>\n<h4 id=\"动态参数\"><a href=\"#动态参数\" class=\"headerlink\" title=\"动态参数\"></a>动态参数</h4><p><code>arguments</code> 是函数内部内置的伪数组变量，它包含了调用函数时传入的所有实参。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 求生函数，计算所有参数的和\n  function sum() &#123;\n    &#x2F;&#x2F; console.log(arguments)\n    let s &#x3D; 0\n    for(let i &#x3D; 0; i &lt; arguments.length; i++) &#123;\n      s +&#x3D; arguments[i]\n    &#125;\n    console.log(s)\n  &#125;\n  &#x2F;&#x2F; 调用求和函数\n  sum(5, 10)&#x2F;&#x2F; 两个参数\n  sum(1, 2, 4) &#x2F;&#x2F; 两个参数\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>总结：</p>\n<ol>\n<li><code>arguments</code> 是一个伪数组</li>\n<li><code>arguments</code> 的作用是动态获取函数的实参</li>\n</ol>\n<h4 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  function config(baseURL, ...other) &#123;\n    console.log(baseURL) &#x2F;&#x2F; 得到 &#39;http:&#x2F;&#x2F;baidu.com&#39;\n    console.log(other)  &#x2F;&#x2F; other  得到 [&#39;get&#39;, &#39;json&#39;]\n  &#125;\n  &#x2F;&#x2F; 调用函数\n  config(&#39;http:&#x2F;&#x2F;baidu.com&#39;, &#39;get&#39;, &#39;json&#39;);\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>总结：</p>\n<ol>\n<li><code>...</code> 是语法符号，置于最末函数形参之前，用于获取多余的实参</li>\n<li>借助 <code>...</code> 获取的剩余实参，是个真数组</li>\n</ol>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>箭头函数是一种声明函数的简洁语法，它与普通函数并无本质的区别，差异性更多体现在语法格式上。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; const fn &#x3D; function () &#123;\n    &#x2F;&#x2F;   console.log(123)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; 1. 箭头函数 基本语法\n    &#x2F;&#x2F; const fn &#x3D; () &#x3D;&gt; &#123;\n    &#x2F;&#x2F;   console.log(123)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; fn()\n    &#x2F;&#x2F; const fn &#x3D; (x) &#x3D;&gt; &#123;\n    &#x2F;&#x2F;   console.log(x)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; fn(1)\n    &#x2F;&#x2F; 2. 只有一个形参的时候，可以省略小括号\n    &#x2F;&#x2F; const fn &#x3D; x &#x3D;&gt; &#123;\n    &#x2F;&#x2F;   console.log(x)\n    &#x2F;&#x2F; &#125;\n    &#x2F;&#x2F; fn(1)\n    &#x2F;&#x2F; &#x2F;&#x2F; 3. 只有一行代码的时候，我们可以省略大括号\n    &#x2F;&#x2F; const fn &#x3D; x &#x3D;&gt; console.log(x)\n    &#x2F;&#x2F; fn(1)\n    &#x2F;&#x2F; 4. 只有一行代码的时候，可以省略return\n    &#x2F;&#x2F; const fn &#x3D; x &#x3D;&gt; x + x\n    &#x2F;&#x2F; console.log(fn(1))\n    &#x2F;&#x2F; 5. 箭头函数可以直接返回一个对象\n    &#x2F;&#x2F; const fn &#x3D; (uname) &#x3D;&gt; (&#123; uname: uname &#125;)\n    &#x2F;&#x2F; console.log(fn(&#39;刘德华&#39;))\n\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<p>总结：</p>\n<ol>\n<li>箭头函数属于表达式函数，因此不存在函数提升</li>\n<li>箭头函数只有一个参数时可以省略圆括号 <code>()</code></li>\n<li>箭头函数函数体只有一行代码时可以省略花括号 <code>&#123;&#125;</code>，并自动做为返回值被返回</li>\n</ol>\n<h4 id=\"箭头函数参数\"><a href=\"#箭头函数参数\" class=\"headerlink\" title=\"箭头函数参数\"></a>箭头函数参数</h4><p>箭头函数中没有 <code>arguments</code>，只能使用 <code>...</code> 动态获取实参</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 1. 利用箭头函数来求和\n    const getSum &#x3D; (...arr) &#x3D;&gt; &#123;\n      let sum &#x3D; 0\n      for (let i &#x3D; 0; i &lt; arr.length; i++) &#123;\n        sum +&#x3D; arr[i]\n      &#125;\n      return sum\n    &#125;\n    const result &#x3D; getSum(2, 3, 4)\n    console.log(result) &#x2F;&#x2F; 9\n  &lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"箭头函数-this\"><a href=\"#箭头函数-this\" class=\"headerlink\" title=\"箭头函数 this\"></a>箭头函数 this</h4><p>箭头函数不会创建自己的this,它只会从自己的作用域链的上一层沿用this。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n   &#x2F;&#x2F; 以前this的指向：  谁调用的这个函数，this 就指向谁\n   &#x2F;&#x2F; console.log(this)  &#x2F;&#x2F; window\n   &#x2F;&#x2F; &#x2F;&#x2F; 普通函数\n   &#x2F;&#x2F; function fn() &#123;\n   &#x2F;&#x2F;   console.log(this)  &#x2F;&#x2F; window\n   &#x2F;&#x2F; &#125;\n   &#x2F;&#x2F; window.fn()\n   &#x2F;&#x2F; &#x2F;&#x2F; 对象方法里面的this\n   &#x2F;&#x2F; const obj &#x3D; &#123;\n   &#x2F;&#x2F;   name: &#39;andy&#39;,\n   &#x2F;&#x2F;   sayHi: function () &#123;\n   &#x2F;&#x2F;     console.log(this)  &#x2F;&#x2F; obj\n   &#x2F;&#x2F;   &#125;\n   &#x2F;&#x2F; &#125;\n   &#x2F;&#x2F; obj.sayHi()\n\n   &#x2F;&#x2F; 2. 箭头函数的this  是上一层作用域的this 指向\n   &#x2F;&#x2F; const fn &#x3D; () &#x3D;&gt; &#123;\n   &#x2F;&#x2F;   console.log(this)  &#x2F;&#x2F; window\n   &#x2F;&#x2F; &#125;\n   &#x2F;&#x2F; fn()\n   &#x2F;&#x2F; 对象方法箭头函数 this\n   &#x2F;&#x2F; const obj &#x3D; &#123;\n   &#x2F;&#x2F;   uname: &#39;pink老师&#39;,\n   &#x2F;&#x2F;   sayHi: () &#x3D;&gt; &#123;\n   &#x2F;&#x2F;     console.log(this)  &#x2F;&#x2F; this 指向谁？ window\n   &#x2F;&#x2F;   &#125;\n   &#x2F;&#x2F; &#125;\n   &#x2F;&#x2F; obj.sayHi()\n\n   const obj &#x3D; &#123;\n     uname: &#39;pink老师&#39;,\n     sayHi: function () &#123;\n       console.log(this)  &#x2F;&#x2F; obj\n       let i &#x3D; 10\n       const count &#x3D; () &#x3D;&gt; &#123;\n         console.log(this)  &#x2F;&#x2F; obj \n       &#125;\n       count()\n     &#125;\n   &#125;\n   obj.sayHi()\n\n &lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>知道解构的语法及分类，使用解构简洁语法快速为变量赋值。</p></blockquote>\n<p>解构赋值是一种快速为变量赋值的简洁语法，本质上仍然是为变量赋值，分为数组解构、对象解构两大类型。</p>\n<h3 id=\"数组解构\"><a href=\"#数组解构\" class=\"headerlink\" title=\"数组解构\"></a>数组解构</h3><p>数组解构是将数组的单元值快速批量赋值给一系列变量的简洁语法，如下代码所示：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 普通的数组\n  let arr &#x3D; [1, 2, 3]\n  &#x2F;&#x2F; 批量声明变量 a b c \n  &#x2F;&#x2F; 同时将数组单元值 1 2 3 依次赋值给变量 a b c\n  let [a, b, c] &#x3D; arr\n  console.log(a); &#x2F;&#x2F; 1\n  console.log(b); &#x2F;&#x2F; 2\n  console.log(c); &#x2F;&#x2F; 3\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>总结：</p>\n<ol>\n<li>赋值运算符 <code>=</code> 左侧的 <code>[]</code> 用于批量声明变量，右侧数组的单元值将被赋值给左侧的变量</li>\n<li>变量的顺序对应数组单元值的位置依次进行赋值操作</li>\n<li>变量的数量大于单元值数量时，多余的变量将被赋值为  <code>undefined</code></li>\n<li>变量的数量小于单元值数量时，可以通过 <code>...</code> 获取剩余单元值，但只能置于最末位</li>\n<li>允许初始化变量的默认值，且只有单元值为 <code>undefined</code> 时默认值才会生效</li>\n</ol>\n<p>注：支持多维解构赋值，比较复杂后续有应用需求时再进一步分析</p>\n<h3 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构\"></a>对象解构</h3><p>对象解构是将对象属性和方法快速批量赋值给一系列变量的简洁语法，如下代码所示：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n  &#x2F;&#x2F; 普通对象\n  const user &#x3D; &#123;\n    name: &#39;小明&#39;,\n    age: 18\n  &#125;;\n  &#x2F;&#x2F; 批量声明变量 name age\n  &#x2F;&#x2F; 同时将数组单元值 小明  18 依次赋值给变量 name  age\n  const &#123;name, age&#125; &#x3D; user\n\n  console.log(name) &#x2F;&#x2F; 小明\n  console.log(age) &#x2F;&#x2F; 18\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>总结：</p>\n<ol>\n<li>赋值运算符 <code>=</code> 左侧的 <code>&#123;&#125;</code> 用于批量声明变量，右侧对象的属性值将被赋值给左侧的变量</li>\n<li>对象属性的值将被赋值给与属性名相同的变量</li>\n<li>对象中找不到与变量名一致的属性时变量值为 <code>undefined</code></li>\n<li>允许初始化变量的默认值，属性不存在或单元值为 <code>undefined</code> 时默认值才会生效</li>\n</ol>\n<p>注：支持多维解构赋值</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; 1. 这是后台传递过来的数据\n    const msg &#x3D; &#123;\n      &quot;code&quot;: 200,\n      &quot;msg&quot;: &quot;获取新闻列表成功&quot;,\n      &quot;data&quot;: [\n        &#123;\n          &quot;id&quot;: 1,\n          &quot;title&quot;: &quot;5G商用自己，三大运用商收入下降&quot;,\n          &quot;count&quot;: 58\n        &#125;,\n        &#123;\n          &quot;id&quot;: 2,\n          &quot;title&quot;: &quot;国际媒体头条速览&quot;,\n          &quot;count&quot;: 56\n        &#125;,\n        &#123;\n          &quot;id&quot;: 3,\n          &quot;title&quot;: &quot;乌克兰和俄罗斯持续冲突&quot;,\n          &quot;count&quot;: 1669\n        &#125;,\n\n      ]\n    &#125;\n\n    &#x2F;&#x2F; 需求1： 请将以上msg对象  采用对象解构的方式 只选出  data 方面后面使用渲染页面\n    &#x2F;&#x2F; const &#123; data &#125; &#x3D; msg\n    &#x2F;&#x2F; console.log(data)\n    &#x2F;&#x2F; 需求2： 上面msg是后台传递过来的数据，我们需要把data选出当做参数传递给 函数\n    &#x2F;&#x2F; const &#123; data &#125; &#x3D; msg\n    &#x2F;&#x2F; msg 虽然很多属性，但是我们利用解构只要 data值\n    function render(&#123; data &#125;) &#123;\n      &#x2F;&#x2F; const &#123; data &#125; &#x3D; arr\n      &#x2F;&#x2F; 我们只要 data 数据\n      &#x2F;&#x2F; 内部处理\n      console.log(data)\n\n    &#125;\n    render(msg)\n\n    &#x2F;&#x2F; 需求3， 为了防止msg里面的data名字混淆，要求渲染函数里面的数据名改为 myData\n    function render(&#123; data: myData &#125;) &#123;\n      &#x2F;&#x2F; 要求将 获取过来的 data数据 更名为 myData\n      &#x2F;&#x2F; 内部处理\n      console.log(myData)\n\n    &#125;\n    render(msg)\n\n  &lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"综合案例\"><a href=\"#综合案例\" class=\"headerlink\" title=\"综合案例\"></a>综合案例</h2><h3 id=\"forEach遍历数组\"><a href=\"#forEach遍历数组\" class=\"headerlink\" title=\"forEach遍历数组\"></a>forEach遍历数组</h3><p>forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：  </p>\n<p>1.forEach 主要是遍历数组</p>\n<p>2.参数当前数组元素是必须要写的， 索引号可选。</p></blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    &#x2F;&#x2F; forEach 就是遍历  加强版的for循环  适合于遍历数组对象\n    const arr &#x3D; [&#39;red&#39;, &#39;green&#39;, &#39;pink&#39;]\n    const result &#x3D; arr.forEach(function (item, index) &#123;\n      console.log(item)  &#x2F;&#x2F; 数组元素 red  green pink\n      console.log(index) &#x2F;&#x2F; 索引号\n    &#125;)\n    &#x2F;&#x2F; console.log(result)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<h3 id=\"filter筛选数组\"><a href=\"#filter筛选数组\" class=\"headerlink\" title=\"filter筛选数组\"></a>filter筛选数组</h3><p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</p>\n<p>主要使用场景： 筛选数组符合条件的元素，并返回筛选之后元素的新数组</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;script&gt;\n    const arr &#x3D; [10, 20, 30]\n    &#x2F;&#x2F; const newArr &#x3D; arr.filter(function (item, index) &#123;\n    &#x2F;&#x2F;   &#x2F;&#x2F; console.log(item)\n    &#x2F;&#x2F;   &#x2F;&#x2F; console.log(index)\n    &#x2F;&#x2F;   return item &gt;&#x3D; 20\n    &#x2F;&#x2F; &#125;)\n    &#x2F;&#x2F; 返回的符合条件的新数组\n\n    const newArr &#x3D; arr.filter(item &#x3D;&gt; item &gt;&#x3D; 20)\n    console.log(newArr)\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n\n\n","feature":true,"text":"📒 这篇笔记涵盖Web APIs 的重要性和使用技巧。了解HTTP通信、数据获取和操作。快来探索Web API的奇妙世界！","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"计算机","slug":"计算机","count":6,"path":"api/categories/计算机.json"},{"name":"前端","slug":"计算机/前端","count":3,"path":"api/categories/计算机/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":8,"path":"api/tags/笔记.json"},{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JavaScript-%E8%BF%9B%E9%98%B6\"><span class=\"toc-text\">JavaScript 进阶</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">作用域</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">局部作用域</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">函数作用域</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9D%97%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">块作用域</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">全局作用域</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE\"><span class=\"toc-text\">作用域链</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">闭包</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87\"><span class=\"toc-text\">变量提升</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87\"><span class=\"toc-text\">函数提升</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">函数参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">默认值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">动态参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">剩余参数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">箭头函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">箭头函数参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0-this\"><span class=\"toc-text\">箭头函数 this</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">解构赋值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84\"><span class=\"toc-text\">数组解构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E8%A7%A3%E6%9E%84\"><span class=\"toc-text\">对象解构</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">综合案例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#forEach%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">forEach遍历数组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#filter%E7%AD%9B%E9%80%89%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">filter筛选数组</span></a></li></ol></li></ol></li></ol>","author":{"name":"Honman","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"这家伙很坏 什么都没留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Web APIs笔记","uid":"5dce2666999480e2fb451f13cc3dbea9","slug":"前端/Web-APIs/Web APIs","date":"2023-07-20T07:30:00.000Z","updated":"2023-08-19T13:26:31.398Z","comments":true,"path":"api/articles/前端/Web-APIs/Web APIs.json","keywords":null,"cover":"/images/cover/4.jpg","text":"📒 这篇笔记涵盖Web APIs 的重要性和使用技巧。了解HTTP通信、数据获取和操作。快来探索Web API的奇妙世界！","link":"","photos":[],"count_time":{"symbolsCount":"47k","symbolsTime":"43 mins."},"categories":[{"name":"计算机","slug":"计算机","count":6,"path":"api/categories/计算机.json"},{"name":"前端","slug":"计算机/前端","count":3,"path":"api/categories/计算机/前端.json"}],"tags":[{"name":"笔记","slug":"笔记","count":8,"path":"api/tags/笔记.json"},{"name":"Web APIs","slug":"Web-APIs","count":1,"path":"api/tags/Web-APIs.json"}],"author":{"name":"Honman","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"这家伙很坏 什么都没留下","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}